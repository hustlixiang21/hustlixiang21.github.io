<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>13_June</title>
    <url>/2022/06/13/13-June/</url>
    <content><![CDATA[<p>As a child, you daydreamed and made stuff up. You were a daydream believer by day and in your right brain at night you sailed down a river of dreams.</p>
<p>So, forget about the literal attainment of your dream fot now. Focus on just going for it. By simply going for the dream, you make yourself come true.</p>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>15_June</title>
    <url>/2022/06/15/15-June/</url>
    <content><![CDATA[<h3 id="may-you-be-loyal-to-yourself-live-like-yourself">May you be loyal to yourself, live like yourself.</h3>
<h3 id="愿你忠于自我-活出自我">愿你忠于自我，活出自我</h3>
<span id="more"></span>
<h2 id="每天早点睡觉">每天早点睡觉！！！</h2>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>14_June</title>
    <url>/2022/06/14/14-june/</url>
    <content><![CDATA[<h3 id="great-things-never-came-from-comfort-zones">Great things never came from comfort zones.</h3>
<h3 id="伟大的事物从不来自于舒适圈">伟大的事物从不来自于舒适圈。</h3>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>17_June</title>
    <url>/2022/06/17/17-June/</url>
    <content><![CDATA[<h3 id="no-road-of-flowers-leads-to-glory">NO road of flowers leads to glory.</h3>
<h3 id="没有一条通往光荣的道路是铺满鲜花的">没有一条通往光荣的道路是铺满鲜花的。</h3>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>19_June</title>
    <url>/2022/06/19/19-June/</url>
    <content><![CDATA[<h3 id="the-first-time-i-hugged-the-sky-was-when-you-held-me-above-your-head">The first time I hugged the sky was when you held me above your head.</h3>
<h3 id="我第一次拥抱天空是您将我举过头顶">我第一次拥抱天空是您将我举过头顶。</h3>
<h3 id="祝所有的父亲父亲节快乐">祝所有的父亲父亲节快乐！！！</h3>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>自我激励</tag>
        <tag>亲情</tag>
      </tags>
  </entry>
  <entry>
    <title>22_June</title>
    <url>/2022/06/22/22-June/</url>
    <content><![CDATA[<h3 id="the-only-person-you-are-destined-to-become-is-the-person-you-decide-to-be">The only person you are destined to become is the person you decide to be.</h3>
<h3 id="你注定只会成为你决心要变成的那个人">你注定只会成为你决心要变成的那个人。</h3>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>A Happy 521</title>
    <url>/2022/05/18/A_happy_day/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="09d539e697ab57c6792459e410107cfcacd8825849d464460a376f7b66015c0e">0639fb05c215cbaaf02e5a329f2c74815797972bd732b7935776aa3d958c1de6bc55142d178c0b6d032e277dc89ee69d35dfd3dc984520532c5d67816d405fea80b677362dac748633c96da94b3478bf2e58734e35dc662ba3955e24d8f6441872ac076d6a71e197ddf8dddf1fa8124325959c8166bda1b5af442c3581c9f12880074b4280e6b2359e9b358c79b53b948044ed6fe5fe573cbbe369dddb1542cd48b8e245788c4850c6ceda62e5c5ddc87b2ac5c6c5edad6f0737668c90e243fad2d4908ababe1b1b65856119dcfb2cd92ff5f29e1a1700c3c51a67774e6340620804b4a7c77fa1215013bd2767d64fd722d1ac6b6ea2e8b30ceeca533a8781cbb1a2d837773dc73602b0da3c38ee3d3416480148d1a84638a60676fedc3374c6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">涉及隐私，请输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>和宝贝在一起的时光</tag>
        <tag>爱情</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP基础中需要注意的部分</title>
    <url>/2022/07/20/CPP%E5%9F%BA%E7%A1%80%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h2 id="数据的输入和输出">数据的输入和输出</h2>
<h3 id="i-o流">I/O流</h3>
<p>在C++，将数据从一个对象到另一个对象的流动抽象为“流”。cin和cout是预定义的流类对象，cin用来处理标准输入，即键盘输入，cout用来处理标准输出，即屏幕输出。</p>
<hr>
<h3 id="预定义的插入符和提取符">预定义的插入符和提取符</h3>
<p>“&lt;&lt;”是预定义的插入符，作用在流类对象cout上便可以实现最一般的屏幕输出。</p>
<p>“&gt;&gt;”是提取符，作用在流类对象cin上便可以实现最一般的键盘输入。</p>
<hr>
<h3 id="常用的i-o流类库操纵符">常用的I/O流类库操纵符</h3>
<table>
<thead>
<tr>
<th>操纵符名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>dec</td>
<td>数值数据采用十进制表示</td>
</tr>
<tr>
<td>hex</td>
<td>数值数据采用十六进制表示</td>
</tr>
<tr>
<td>oct</td>
<td>数值数据采用八进制表示</td>
</tr>
<tr>
<td>ws</td>
<td>提取空白符</td>
</tr>
<tr>
<td>endl</td>
<td>插入换行符，并且更新流</td>
</tr>
<tr>
<td>setsprecision(int)</td>
<td>设置浮点数的小数位数（包括小数点）</td>
</tr>
<tr>
<td>setw(int)</td>
<td>设置域宽</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="if-else语句">if-else语句</h2>
<p>首先是<code>else</code>的配对方式是与向上找同层的<code>if</code>配对.<br>
例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    <span class="built_in">else</span>()</span><br></pre></td></tr></table></figure>
<p>这样是可行的因为<code>else</code>都有配对的，但是缩进并不能代表结构，严格来说应该用<code>&#123;&#125;</code>来区分不同的嵌套。<strong>仅供区分不同的结构</strong>。</p>
<hr>
<p><strong>反例</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure>
<p>这样的话<code>else</code>和带有缩进的<code>if</code>配对。</p>
<hr>
<h2 id="typedef声明">typedef声明</h2>
<p>typedef  已有类型名  新类型名表</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> Area,Volume;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Natural;</span><br><span class="line">Natural i1,i2;</span><br><span class="line">Area a;</span><br><span class="line">Volume v;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="除typedef外另一种自定义类型using">除typedef外另一种自定义类型using</h2>
<p><code>using 新类型名 = 已有类型名</code></p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Area = <span class="type">double</span>;</span><br><span class="line"><span class="keyword">using</span> Volume = <span class="type">double</span>;</span><br></pre></td></tr></table></figure>
<h2 id="auto类型和decltype类型">auto类型和decltype类型</h2>
<p><code>auto</code>：编译器通过初始值自动判断变量的类型<br>
<code>decltype</code>：定义一个变量与某一表达式的类型相同，但并不用该表达式初始化变量<br>
例如：<code>decltype(i) j = 2;</code>让j和i有同样的类型，但是并不用2来初始化j。</p>
<h2 id="none"></h2>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>24_May</title>
    <url>/2022/05/24/24-May/</url>
    <content><![CDATA[<h3 id="have-a-heart-that-never-hardens-and-a-temper-that-never-tires-and-a-touch-that-never-hurts">Have a heart that never hardens, and a temper that never tires, and a touch that never hurts.</h3>
]]></content>
      <categories>
        <category>一句</category>
      </categories>
      <tags>
        <tag>一句</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP数组、指针和字符串</title>
    <url>/2022/07/23/CPP%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="数组">数组</h1>
<p>数组是具有一定顺序关系的若干对象的集合体，组成数组的对象成为该数组的元素。数组名是一个不能被赋值的指针，叫做指针常量。</p>
<blockquote><p>C++中的二维数组被当作<strong>一维数组的数组</strong>。因此二维数组是按照<strong>行优先</strong>的顺序存储。</p>
</blockquote>
<hr>
<blockquote><p>把数组作为参数时，一般不指定数组第一维的大小，即使指定，也会被忽略。</p>
</blockquote>
<h2 id="程序实例-线性拟合">程序实例—线性拟合</h2>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Linear%20fit">查看源代码</a></p>
<hr>
<h1 id="指针">指针</h1>
<p>基本定义使用略去。</p>
<h2 id="void指针的使用">void指针的使用</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">void</span> voidObject;             <span class="comment">//不能声明void类型的变量</span></span><br><span class="line">  <span class="type">void</span> *pv;                    <span class="comment">//可以声明void类型的指针</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">  pv = &amp;i;</span><br><span class="line">  <span class="type">int</span> *pint = <span class="built_in">static_cast</span>&lt;<span class="type">int</span> *&gt;(pv);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;* pint=&quot;</span> &lt;&lt; * pint &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">  * pint = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>void指针一般只在指针所指向的数据类型不确定的时候使用。</p>
</div>
<h2 id="空指针的使用">空指针的使用</h2>
<p>不同类型的指针之间或者指针与非零整数之间的关系运算是<strong>毫无意义</strong>的，但是指针变量可以和整数0进行比较。0专用于表示空指针，也就是一个不指向任何有效地址的指针。</p>
<p>空指针同时也可以用NULL表示。</p>
<div class="note success flat"><p>NULL是一个在很多头文件中都有定义的宏，该定义为0。</p>
</div>
<h2 id="对象指针">对象指针</h2>
<p>顾名思义，指向一个对象的指针。</p>
<p>使用对象指针时，可以很形象的表示对象的成员，语法形式为<code>对象指针名-&gt;成员名</code>这个与<code>(*对象指针名).成员名</code>的访问是等价的。</p>
<p>前面在类的组合时有个知识点叫做前向引用声明，当时有两个类，在定义时互相引用，这个问题就可以用指针解决。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;         <span class="comment">//前向引用说明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">  A *x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  B *y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明一个指针而不是对象时允许的，当A定义完，就可以声明A对象。</p>
<h3 id="this指针">this指针</h3>
<p>this指针是一个隐含于每一个类的非静态成员函数中的特殊指针（包括构造函数和析构函数），它用于指向正在被<strong>成员函数操作的对象</strong></p>
<div class="note info flat"><p>this指针是成员函数的隐含参数，让函数知道操作的是哪个对象，从而访问其数据成员。对于常成员函数来说，这个隐含的参数是长指针类型的。</p>
</div>
<h3 id="指向类的非静态成员的指针">指向类的非静态成员的指针</h3>
<p>声明语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型说明符  类名::* 指针名                           <span class="comment">//声明指向数据成员的指针</span></span><br><span class="line">类型说明符 (类名::* 指针名)(参数表);                  <span class="comment">//声明指向函数成员的指针</span></span><br></pre></td></tr></table></figure>
<p>为指向数据成员的指针赋值的一般语法形式为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">指针名 = &amp;类名::数据成员名;</span><br></pre></td></tr></table></figure>
<p>访问数据成员时，可以</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">对象名.*类成员指针名</span><br><span class="line">或</span><br><span class="line">对象指针名 -&gt; *类成员指针名</span><br></pre></td></tr></table></figure>
<p>为指向成员函数的指针赋值的一般语法为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">指针名 = &amp;类名::函数成员名;</span><br></pre></td></tr></table></figure>
<h3 id="指向类的静态成员的指针">指向类的静态成员的指针</h3>
<p>只需要使用普通的指针就可以</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型说明符  *指针名 = &amp;类名::静态数据成员</span><br><span class="line">类型说明符 (*指针名)(形式参数) = &amp;类名::静态成员函数</span><br></pre></td></tr></table></figure>
<h1 id="动态内存分配">动态内存分配</h1>
<p>在C++程序中建立和删除堆对象（程序运行过程中申请和释放的存储单元）使用的两个运算符：<code>new</code>和<code>delete</code>。</p>
<div class="note danger flat"><p>有new必有delete释放，否则导致无法回收内存，使得程序占据的内存越来越大，叫做内存泄漏。</p>
</div>
<h2 id="创建一个类的对象">创建一个类的对象</h2>
<blockquote><p>new建立一个类的对象时，需要注意的细节。</p>
<blockquote><p>如果该类存在用户定义的默认构造函数，那么<code>new T</code>和<code>new T()</code>没有任何的区别。</p>
</blockquote>
<blockquote><p>如果该类没有定义默认的构造函数，使用<code>new T</code>时会调用系统生成的隐含的默认构造函数；使用<code>new T()</code>时，除了执行这个隐含的函数，还会为基本数据类型和指针类型的成员用0赋初值，这一过程是<strong>递归的</strong>。</p>
</blockquote></blockquote>
<h2 id="创建多维数组">创建多维数组</h2>
<p>形式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类型名T[数组第<span class="number">1</span>维长度][数组第二维长度]...;</span><br></pre></td></tr></table></figure>
<p>其中数组的第一维长度可以是任何结果为正整数的<strong>表达式</strong>，而其他各维数组的长度必须是结果为正整数的<strong>常量表达式</strong>。</p>
<p>错误的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> * fp;</span><br><span class="line">fp = <span class="keyword">new</span> <span class="type">float</span>[<span class="number">10</span>][<span class="number">25</span>][<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
 <div class="note danger flat"><p>在这里new操作产生的是一个指向一个<code>$25 \times 10$</code>的二维float类型数组的指针，而fp是一个指向float型数据的指针，产生了矛盾！</p>
</div>
<h1 id="用vector创建数组对象">用vector创建数组对象</h1>
<p>C++提供了被封装的动态数组—vector，具有各种类型。vector<strong>不是一个类</strong>，而是<strong>一个类模板</strong>。</p>
<p>使用vector定义动态数组的形式为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;元素类型&gt;数组对象名(数组长度);</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>vector定义的数组对象的所有元素都会被初始化。如果为基本数据类型，则所有元素都会被0以初始化；如果为类类型，则会调用类的默认构造函数初始化。所以需要保证作为数组元素的类<strong>需要具有默认构造函数</strong>，初值可以指定，但是<strong>所有的元素初值必须是一样的</strong>。</p>
</div>
<h1 id="引用相关补充">引用相关补充</h1>
<p>引用通常用于函数参数列表和函数返回值。下面列出了 C++ 程序员必须清楚的两个与 C++ 引用相关的重要概念：</p>
<p><a href="https://www.runoob.com/cplusplus/passing-parameters-by-references.html">把引用作为参数</a></p>
<p><a href="https://www.runoob.com/cplusplus/returning-values-by-reference.html">把引用作为返回值</a></p>
<h1 id="深复制与浅复制">深复制与浅复制</h1>
<p>隐含的复制构造函数实现的只是浅复制，但是这样的复制并不适用于所有的情况。</p>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%B5%85%E5%A4%8D%E5%88%B6/main.cpp">浅复制代码示例</a></p>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%B7%B1%E5%A4%8D%E5%88%B6/main.cpp">深复制代码示例</a></p>
<h1 id="字符串">字符串</h1>
<p>C++对字符串一系列复杂的操作进行了封装，形成了string类，更加方便的操作字符串。</p>
<div class="note info flat"><p>执行很多字符串操作需要借助<strong>cstring</strong>头文件中的<strong>字符串处理函数</strong>，使用string类需要包含头文件<strong>string</strong>。</p>
</div>
<p><a href="https://www.runoob.com/cplusplus/cpp-strings.html">字符串相关讲解</a></p>
<h1 id="个人银行账户管理程序">个人银行账户管理程序</h1>
<p>对于上一个管理程序的功能补充。</p>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update">源码见github</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP函数部分</title>
    <url>/2022/07/20/CPP%E5%87%BD%E6%95%B0%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h2 id="函数部分">函数部分</h2>
<h3 id="rand函数">rand函数</h3>
<p>函数原型 :<code>int rand(void);</code><br>
所需头文件 : <code>&lt;cstdlib&gt;</code><br>
功能和返回值 : 求出并返回一个伪随机数</p>
<hr>
<h3 id="srand函数">srand函数</h3>
<p>函数原型 :<code>void srand(unsigned int seed);</code><br>
参数：seed产生随机数的种子<br>
所需头文件 : <code>&lt;cstdlib&gt;</code><br>
功能：为使rand（）能产生一系列伪随机整数而设置起始点。使用1作为seed参数，可以重新初化rand（）。</p>
<hr>
<h2 id="需要指出-若不使用种子seed-则会出现每次运行程序产生的随机数是固定不变的-故rand函数返回的是伪随机数">需要指出，若不使用种子seed，则会出现每次运行程序产生的随机数是<strong>固定不变的</strong>。故rand函数返回的是<strong>伪随机数</strong>。</h2>
<h3 id="引用的概念">引用的概念</h3>
<ul>
<li>引用(&amp;)是标识符的别名；</li>
<li>定义一个引用时，必须同时对它进行初始化，使它指向一个已存在的对象。<br>
例如：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> &amp;ri = i; <span class="comment">//定义int引用ri，并初始化为变量i的引用</span></span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line">ri = j;  <span class="comment">//相当于 i = j;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>一旦一个引用被初始化后，就不能改为指向其它对象。<br>
引用可以作为形参。</li>
</ul>
<div class="note info flat"><p>引用可以实现函数形参和实参之间的双向传递</p>
</div>
<p>例如下列程序：</p>
<h2 id="code-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> <span class="comment">//定义引用类型的形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;  y = &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">swap</span>(x, y);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;  y = &quot;</span>&lt;&lt;y&lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2>
<h3 id="含有可变参数的函数">含有可变参数的函数</h3>
<p>C++标准中主要提供了两个方法</p>
<ul>
<li>如果所有的实参类型相同，可以传递一个名为initializer_list的标准库类型；</li>
<li>如果实参的类型不同，我们可以编写可变参数的模板（第9章）。</li>
</ul>
<hr>
<h4 id="initializer-list">initializer_list</h4>
<p><code>initializer_list</code>是一种标准库类型，用于表示某种特定类型的值的数组，该类型定义在同名的头文件中。</p>
<hr>
<h4 id="initializer-list的使用方法">initializer_list的使用方法</h4>
<ul>
<li>initializer_list是一个类模板（第9章详细介绍模板）</li>
<li>使用模板时，我们需要在模板名字后面跟一对尖括号，括号内给出类型参数。例如：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">initializer_list&lt;string&gt;  ls;  <span class="comment">// initializer_list的元素类型是string</span></span><br><span class="line">initializer_list&lt;<span class="type">int</span>&gt; li;      <span class="comment">// initializer_list的元素类型是int</span></span><br></pre></td></tr></table></figure>
<ul>
<li>initializer_list比较特殊的一点是，其对象中的元素永远是常量值，我们无法改变initializer_list对象中元素的值。</li>
<li>含有initializer_list形参的函数也可以同时拥有其他形参</li>
</ul>
<hr>
<h4 id="initializer-list使用举例">initializer_list使用举例</h4>
<ul>
<li>在编写代码输出程序产生的错误信息时，最好统一用一个函数实现该功能，使得对所有错误的处理能够整齐划一。然而错误信息的种类不同，调用错误信息输出函数时传递的参数也会各不相同。</li>
<li>使用initializer_list编写一个错误信息输出函数，使其可以作用于可变数量的形参。</li>
</ul>
<hr>
<h3 id="内联函数">内联函数</h3>
<ul>
<li>声明时使用关键字 inline。</li>
<li>编译时在调用处用函数体进行替换，节省了参数传递、控制转移等开销。</li>
<li>注意：
<ul>
<li>内联函数体内不能有循环语句和switch语句；</li>
<li>内联函数的定义必须出现在内联函数第一次被调用之前；</li>
<li>对内联函数不能进行异常接口声明。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="应用举例">应用举例</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159265358979</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calArea</span><span class="params">(<span class="type">double</span> radius)</span> <span class="comment">//inline关键字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> r = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> area = <span class="built_in">calArea</span>(r);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实本质上就是省略了函数的调用与返回，类似于将函数体直接粘贴至调用处。</p>
<hr>
<h3 id="constexpr函数-不是很理解用法">constexpr函数（不是很理解用法）</h3>
<h4 id="constexpr函数语法规定">constexpr函数语法规定</h4>
<ul>
<li>constexpr修饰的函数在其所有参数都是constexpr时，一定返回constexpr；</li>
<li>函数体中必须有且仅有一条return语句。</li>
</ul>
<hr>
<h4 id="constexpr函数举例">constexpr函数举例</h4>
<ul>
<li>constexpr int get_size() { return 20; }</li>
<li>constexpr int foo = get_size();<br>
//正确：foo是一个常量表达式</li>
</ul>
<hr>
<h3 id="带默认参数值的函数">带默认参数值的函数</h3>
<h4 id="默认参数值的说明次序">默认参数值的说明次序</h4>
<ul>
<li>有默认参数的形参必须列在形参列表的最右，即默认参数值的右面不能有无默认值的参数；</li>
<li>调用时实参与形参的结合次序是从左向右。</li>
<li>例：</li>
</ul>
<h2 id="code-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">5</span>, <span class="type">int</span> z = <span class="number">6</span>)</span></span>;<span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">1</span>, <span class="type">int</span> y = <span class="number">5</span>, <span class="type">int</span> z)</span></span>;<span class="comment">//错误</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">1</span>, <span class="type">int</span> y, <span class="type">int</span> z = <span class="number">6</span>)</span></span>;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure></h2>
<h4 id="默认参数值与函数的调用位置">默认参数值与函数的调用位置</h4>
<p>如果一个函数有原型声明，且原型声明在定义之前，则默认参数值应在函数原型声明中给出；如果只有函数的定义，或函数定义在前，则默认参数值可以函数定义中给出。<br>
例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">5</span> ,<span class="type">int</span> y = <span class="number">6</span>)</span>；<span class="comment">//原型声明在前</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;<span class="comment">//此处不能够再指定默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="code-6"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">5</span> ,<span class="type">int</span> y = <span class="number">6</span>)</span><span class="comment">//只有定义没有原型声明</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2>
<h3 id="函数重载">函数重载</h3>
<p>C++允许功能相近的函数在相同的作用域内以相同函数名声明，从而形成重载。方便使用，便于记忆。</p>
<p>注意事项：</p>
<ul>
<li>重载函数的形参必须不同:个数不同或类型不同。</li>
<li>编译程序将根据实参和形参的类型及个数的最佳匹配来选择调用哪一个函数。（编译器不以形参名和函数的返回值来区分）</li>
<li>不要将不同功能的函数声明为重载函数，以免出现调用结果的误解、混淆。</li>
</ul>
<p>重载函数应用举例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sumOfSquare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sumOfSquare</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter two integer: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Their sum of square: &quot;</span>&lt;&lt;<span class="built_in">sumOfSquare</span>(m, n)&lt;&lt;endl;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter two real number: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Their sum of square: &quot;</span>&lt;&lt;<span class="built_in">sumOfSquare</span>(x, y)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
Enter two integer: 3 5<br>
Their sum of square: 34<br>
Enter two real number: 2.3 5.8<br>
Their sum of square: 38.93</p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP数据的共享与保护</title>
    <url>/2022/07/21/CPP%E6%95%B0%E6%8D%AE%E7%9A%84%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</url>
    <content><![CDATA[<h1 id="标识符的作用域与可见性">标识符的作用域与可见性</h1>
<h2 id="作用域">作用域</h2>
<p>作用域是一个标识符在程序正文中<strong>有效的区域</strong>。</p>
<h3 id="函数原型作用域">函数原型作用域</h3>
<p>在函数原型声明时形式参数的作用范围就是函数原型作用域。</p>
<div class="note info flat"><p>函数原型的形参列表中起作用的只是类型，而非标识符，允许省去，为了可读性，最好写上。</p>
</div>
<h3 id="局部作用域">局部作用域</h3>
<p>简单理解就是<strong>函数体内</strong>声明的变量，从声明处开始，一直到声明所在块结束的大括号为止。</p>
<blockquote>
<p>具有局部作用域的变量也叫做局部变量。</p>
</blockquote>
<h3 id="类作用域">类作用域</h3>
<p>类是一组有名成员的集合，其成员m具有类的作用域。访问方式有以下三种：</p>
<ol>
<li>成员函数中没有定义m标识符，成员m没有被函数体屏蔽，该函数可以直接访问到m；</li>
<li>通过表达式<code>x.m</code>或者<code>X::m</code>。<strong>这是最基本的方法</strong>，后者主要用来访问类的静态成员。</li>
<li>通过<code>ptr-&gt;m</code>访问，其中ptr为指向该类对象的一个<strong>指针</strong>。</li>
</ol>
<h3 id="命名空间作用域">命名空间作用域</h3>
<p>命名空间的作用是为了消除一个项目中可能具有歧义的不同的文件，例如：两个不同的模块之前变量的命名重名了。</p>
<p>语法形式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名&#123;</span><br><span class="line">  命名空间内的各种声明（函数声明、类声明、...）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在命名空间的内部可以直接使用当前空间所定义的标识符，如果需要使用其他命名空间中所定义的标识符，需要使用<code>命名空间名::标识符</code>。为了避免冗长，又提供了using语句。</p>
<p>using语句有两种形式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> 命名空间名::标识符</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> 命名空间名</span><br></pre></td></tr></table></figure>
<p>两类特殊的命名空间——全局命名空间和匿名命名空间。</p>
<p>全局命名空间是默认的命名空间，在显式声明的命名空间之外声明的标识符都是在一个全局命名空间里。</p>
<p>匿名命名空间只需要在定义时省去命名空间名即可，作用就是不想把自己定义的标识符给任何其他的命名空间访问的机会。</p>
<blockquote><p>C++标准程序库的所有标识符都被声明在std命名空间里，cout，cin，endl都是这样，所以每个程序中都使用了<code>using namespace std</code>,否则就需要使用<code>std::cin</code>…</p>
</blockquote>
<p>另外，命名空间<strong>允许嵌套</strong>。</p>
<div class="note info flat"><p>具有命名空间作用域的变量也称为全局变量。</p>
</div>
<hr>
<h2 id="可见性">可见性</h2>
<p>内容比较简单浅显，故略去。</p>
<hr>
<h1 id="对象的生存期">对象的生存期</h1>
<h2 id="静态生存期">静态生存期</h2>
<p>对象的生存期与程序的运行周期相同则称之为具有静态生存期，声明的时候需要使用关键字<strong>static</strong>。</p>
<p>特点：不会随着每次函数的调用都产生一个副本，也不随着函数的返回而失效。变量在每次的调用期间时共享的。同时只进行一次赋值，不会多次执行声明时的赋值语句。</p>
<div class="note info flat"><p>若不在声明的时候初始化，则默认为0。</p>
</div>
<h2 id="动态生存期">动态生存期</h2>
<p>局部生存期对象诞生于声明点，结束于声明所在的块执行完毕之时。</p>
<h1 id="类的静态成员">类的静态成员</h1>
<p>对象和对象之间也需要共享数据，静态成员就是解决这个问题的。</p>
<p>例如有一个雇员类，我们有若干个雇员对象，但我需要统计有多少个雇员对象怎么办呢？这时候就可以用静态数据成员，这个数据成员被所有的对象共享。</p>
<h2 id="静态数据成员">静态数据成员</h2>
<p>某个属性为<strong>整个类所共有</strong>，<strong>不属于任何一个具体的对象</strong>。则采用<strong>static</strong>关键字声明为静态成员，整个类中只有这一份副本，由所有的对象共同管理维护和使用。</p>
<p>因为它不属于任何对象，具有静态生存期，所以通过类名对其进行访问。“<strong>类名::标识符</strong>”。</p>
<div class="note warning flat"><p>在类的定义中仅仅进行引用性声明，必须在命名空间作用域的某个地方使用类名限定定义性声明，这时也可以进行初始化。</p>
</div>
<p>程序实例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;                                        <span class="comment">//Point类定义 public: //外部接口</span></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y)&#123;          <span class="comment">//构造函数                                                                                            </span></span><br><span class="line">  	count++;            <span class="comment">//在构造函数中对count累加，所有对象共同维护同一个count </span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">Point</span>(Point &amp;p)&#123;      <span class="comment">//复制构造函数</span></span><br><span class="line">	x = p.x;</span><br><span class="line">	y = p.y;</span><br><span class="line">	count++;</span><br><span class="line">	&#125; </span><br><span class="line">	~<span class="built_in">Point</span>() &#123; count--; &#125; </span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125; </span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showCount</span><span class="params">()</span> </span>&#123; <span class="comment">//输出静态数据成员 </span></span><br><span class="line">  	cout &lt;&lt; <span class="string">&quot; Object count = &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">private</span>:             <span class="comment">//私有数据成员 </span></span><br><span class="line">  <span class="type">int</span> x, y; </span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> count;  <span class="comment">//静态数据成员声明，用于记录点的个数 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Point::count = <span class="number">0</span>;<span class="comment">//静态数据成员定义和初始化，使用类名限定 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;         <span class="comment">//主函数 </span></span><br><span class="line">  <span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;     <span class="comment">//定义对象a，其构造函数回使count增1 </span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Point A: &quot;</span> &lt;&lt; a.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; a.<span class="built_in">getY</span>(); a.<span class="built_in">showCount</span>(); <span class="comment">//输出对象个数</span></span><br><span class="line">	<span class="function">Point <span class="title">b</span><span class="params">(a)</span></span>;        <span class="comment">//定义对象b，其构造函数回使count增1 </span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Point B: &quot;</span> &lt;&lt; b.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; b.<span class="built_in">getY</span>(); b.<span class="built_in">showCount</span>(); <span class="comment">//输出对象个数 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态成员函数">静态成员函数</h2>
<p>上面的程序中其实存在一个问题，就是showcount函数的调用前提是必须要有Point对象的存在，但是如果我想要直接输出count的值怎么办，这时候就需要使用静态成员函数，通过类名去直接进行函数的调用，而不依赖对象。</p>
<div class="note success flat"><p>虽然静态成员函数也可以使用对象访问，但是一般习惯是通过类名访问，即使通过对象名访问，函数也和对象之间没有关系。</p>
</div>
<h1 id="类的友元">类的友元</h1>
<p>以Point类举例，如果需要一个计算两点之间距离的函数怎么办？</p>
<p>设置成类外的普通函数，不能体现函数与点的联系，而且不能直接使用点的坐标；</p>
<p>设置成类内成员函数，却不符合类是一类事物特征的抽象，因为距离表示的是点和点之间的关系，而非点的特征。</p>
<blockquote><p>在<a href="https://hustlixiang21.github.io/2022/07/20/CPP%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/">类的组合</a>中,有一个Point和Line类，Line类中有一个计算线段长度的函数，但如果是面临很多点，并且经常需要计算任意两点之间的距离，每次计算都要构造一个Line类吗？显然是非常麻烦的事情。</p>
</blockquote>
<p>友元关系提供了不同类或对象的成员函数之间，类的成员函数与一般函数之间进行数据共享的机制。</p>
<p>在类中使用关键字<strong>friend</strong>声明函数为友元函数，类为友元类。<strong>友元类的所有函数都是友元函数</strong>。</p>
<h2 id="友元函数">友元函数</h2>
<p>是在类中用关键字<strong>friend</strong>修饰的<strong>非成员函数</strong>。可以是普通函数，也可以是其他类的成员函数，在友元函数的函数体中可以通过对象名访问类的私有和保护成员。</p>
<p>github上有<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/Point_distance(friend)/main.cpp">练习源码</a>。</p>
<h2 id="友元类">友元类</h2>
<p>跟友元函数类似。若A类为B类的友元类，则A类的所有成员函数都是B类的友元函数，都可以访问B类的私有和保护成员。</p>
<p>特别注意⚠️：</p>
<ul>
<li>友元关系<strong>没有传递性</strong>，B是A的友元，C是B的友元，C在没有声明的情况下<strong>不是A的友元</strong>。</li>
<li>友元关系是<strong>单向的</strong>，B是A的友元，B能访问A，但A不能访问B。</li>
<li>友元关系是<strong>不被继承的</strong>，B时A的友元，B的派生类不会自动成为A的友元。很浅显的比喻是，别人信任你爸，但是别人不一定信任你。</li>
</ul>
<h1 id="共享数据保护">共享数据保护</h1>
<h2 id="常对象">常对象</h2>
<p>常对象的数据值成员在对象的整个生存期间内不能被改变。<strong><u>常对象必须被初始化，且不能更新。</u></strong></p>
<div class="note warning flat"><p>定义时指定初值叫做初始化，后变动进行赋值运算叫做赋值，<strong>不要混淆初始化与赋值</strong>！</p>
</div>
<h2 id="用const修饰的类成员">用const修饰的类成员</h2>
<h3 id="常成员函数">常成员函数</h3>
<p>声明格式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型说明符 函数名(参数表) <span class="type">const</span>;</span><br></pre></td></tr></table></figure>
<p>注意⚠️：</p>
<ul>
<li>如果一个对象是常对象，则通过该常对象只能调用常成员函数，<strong>不能够调用别的成员函数</strong>！这是C++对于常对象的保护，也是常对象<strong>唯一的对外接口方式</strong>。</li>
<li>无论是否通过常对象调用常成员函数，在常成员函数的调用期间，目的对象都被视作常对象，因此常成员函数不能更新目的对象的数据成员，也不能针对目的对象调用该类中没有用const修饰的成员函数（保证了常成员函数不会修改目的对象的数据成员的值）</li>
<li>const关键字可以作为重载函数的区分（同名函数是否加const是不同的函数）。</li>
</ul>
<h3 id="常数据成员">常数据成员</h3>
<p>使用const说明的数据成员为常数据成员，任何函数不能对其赋值。构造函数通过对该数据成员进行初始化，只能通过初始化列表获取初值。</p>
<div class="note info flat"><p>类成员中的静态变量和常量都应当在类定义之外加以定义，但C++规定了一个例外，类的静态常量如果具有整数类型或枚举类型，可以直接在类的定义中指定常量值。</p>
</div>
<h3 id="常引用">常引用</h3>
<p>如果在声明引用时用const修饰，被声明的引用就是常引用，常引用所引用的对象不能被更新。用来作为函数的形参时，并不会意外的发生对实参的更改。</p>
<blockquote><p>对于在函数中无法改变其值的参数，不宜使用普通引用方式传递，因为会使得<strong>常对象无法被传入</strong>，采用传值的方式或传递常引用的方式可以避免这一问题，传值耗时较多，传递常引用为好。复制构造函数的参数一般也选用常引用！</p>
</blockquote>
<h1 id="多文件结构和编译预处理命令">多文件结构和编译预处理命令</h1>
<p>由于有过C语言的基础，此部分仅挑选一些不了解和一些印象不深的内容进行罗列。</p>
<h2 id="c-程序的一般组织结构">C++程序的一般组织结构</h2>
<p>一个工程可以划分为多个源文件：</p>
<ul>
<li>类声明文件（.h文件）</li>
<li>类实现文件（.cpp文件）</li>
<li>类的使用文件（main()所在的.cpp文件）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-22%2000.16.36.png" alt=""></p>
<h2 id="标准c-库">标准C++库</h2>
<p>标准C++类库是一个极为灵活并可扩展的可重用软件模块的集合</p>
<p>标准C++ 类与组件在逻辑上分为6种类型：</p>
<ul>
<li>输入/输出类</li>
<li>容器类与抽象数据类型</li>
<li>存储管理类</li>
<li>算法</li>
<li>错误处理</li>
<li>运行环境支持</li>
</ul>
<h1 id="综合实例-个人银行账户管理程序">综合实例——个人银行账户管理程序</h1>
<p>程序源码上传至了<a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management">github</a>，使用<a href="https://hustlixiang21.github.io/2022/06/19/Makefile%E5%85%A5%E9%97%A8/">makefile</a>进行编译运行</p>
<div class="note danger flat"><p>严重错误，静态变量没有在外部进行赋初始值，导致我进度直接停滞两小时，而且是在类的成员函数定义的文件内进行初始化赋值。</p>
</div>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP类和对象</title>
    <url>/2022/07/20/CPP%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="类和对象">类和对象</h1>
<h2 id="面向对象程序设计的基本特点">面向对象程序设计的基本特点</h2>
<p><strong>抽象</strong></p>
<ul>
<li>对同一类对象的共同属性和行为进行概括，形成类。
<ul>
<li>先注意问题的本质及描述，其次是实现过程或细节。</li>
<li>数据抽象：描述某类对象的属性或状态（对象相互区别的物理量）。</li>
<li>代码抽象：描述某类对象的共有的行为特征或具有的功能。</li>
<li>抽象的实现：类。</li>
</ul>
</li>
<li>抽象实例——钟表
<ul>
<li>数据抽象：<br>
int hour,int minute,int second</li>
<li>代码抽象：<br>
setTime(),showTime()</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Clock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH, <span class="type">int</span> newM, <span class="type">int</span> newS)</span></span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">   <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>封装</strong></p>
<ul>
<li>将抽象出的数据、代码封装在一起，形成类。
<ul>
<li>目的：增强安全性和简化编程，使用者不必了解具体的实现细节，而只需要通过外部接口，以特定的访问权限，来使用类的成员。</li>
<li>实现封装：类声明中的{}</li>
</ul>
</li>
<li>例：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Clock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>: <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH, <span class="type">int</span> newM, <span class="type">int</span> newS)</span></span>;</span><br><span class="line">          <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">private</span>: <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>继承</strong></p>
<ul>
<li>在已有类的基础上，进行扩展形成新的类。</li>
</ul>
<hr>
<p><strong>多态</strong></p>
<ul>
<li>多态：同一名称，不同的功能实现方式。</li>
<li>目的：达到行为标识统一，减少程序中标识符的个数。</li>
</ul>
<hr>
<h2 id="类和对象的定义">类和对象的定义</h2>
<h3 id="类定义的语法形式">类定义的语法形式</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名称</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">                公有成员（外部接口）</span><br><span class="line">    <span class="keyword">private</span>：</span><br><span class="line">                私有成员</span><br><span class="line">    <span class="keyword">protected</span>：</span><br><span class="line">                保护型成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="类内初始值">类内初始值</h3>
<ul>
<li>可以为数据成员提供一个类内初始值</li>
<li>在创建对象时，类内初始值用于初始化数据成员</li>
<li>没有初始值的成员将被默认初始化</li>
</ul>
<hr>
<h3 id="类成员访问控制">类成员访问控制</h3>
<ul>
<li>公有类型成员
<ul>
<li>在关键值public后面声明，它们是类与外部的借口，任何外部函数都可以访问公有类型数据和函数</li>
</ul>
</li>
<li>私有类型成员
<ul>
<li>在关键字private后面声明，只允许本类中的函数访问，而外部任何函数都不能访问。</li>
<li>如果紧跟在累名称后面声明私有成员，则关键字<strong>private</strong>可以省略</li>
</ul>
</li>
<li>保护类型成员
<ul>
<li>与private类似，其差别表表现在继承与派生时对派生类的影响不同</li>
</ul>
</li>
</ul>
<hr>
<h3 id="类的成员函数">类的成员函数</h3>
<ul>
<li>在类中说明函数原型</li>
<li>可以在类外给出函数体实现，并在函数名前使用类名加以限定</li>
<li>也可以直接在类中给出函数体，形成内联成员函数</li>
<li>允许声明重载函数和带默认参数值的函数</li>
</ul>
<hr>
<h3 id="类和对象程序举例">类和对象程序举例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> hour,minute,second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数的实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    hour = newH;</span><br><span class="line">    minute = newM;</span><br><span class="line">    second = newS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象的使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Clock myClock;</span><br><span class="line">    myClock.<span class="built_in">setTime</span>(<span class="number">8</span>,<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    myClock.<span class="built_in">showTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="构造函数和析构函数">构造函数和析构函数</h2>
<h3 id="构造函数">构造函数</h3>
<h4 id="构造函数的作用">构造函数的作用</h4>
<p>在对象被创建时使用特定的值构造对象，将对象<strong>初始化</strong>为一个特定的初始状态。</p>
<blockquote>
<p>希望在构造一个Clock类对象时，将初始时间设为0:0:0，就可以通过构造函数来设置。</p>
</blockquote>
<hr>
<h4 id="构造函数的形式">构造函数的形式</h4>
<ul>
<li>函数名和类名相同</li>
<li>不能定义返回值类型，也不能有return语句</li>
<li>可以有形式参数也可以没有形式参数</li>
<li>可以是内联函数</li>
<li>可以重载</li>
<li>可以带默认参数值</li>
</ul>
<hr>
<h4 id="构造函数的调用时机">构造函数的调用时机</h4>
<p>在对象创建时被自动调用</p>
<hr>
<h4 id="构造函数实例">构造函数实例</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS);<span class="comment">//构造函数</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> hour,minute,second;</span><br><span class="line">&#125;；<span class="comment">//这个地方有个分号</span></span><br><span class="line"><span class="comment">//构造函数的实现</span></span><br><span class="line">Clock::<span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS): <span class="built_in">hour</span>(newH),<span class="built_in">minute</span>(newM),<span class="built_in">second</span>(newS)&#123;&#125;</span><br><span class="line"><span class="comment">//成员函数的实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    hour = newH;</span><br><span class="line">    minute = newM;</span><br><span class="line">    second = newS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象的使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Clock <span class="title">c</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;<span class="comment">//自动调用构造函数</span></span><br><span class="line">    c.<span class="built_in">showTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<blockquote>
<p>：：符号是作用域解析运算符，也就是函数定义是需要用，类名：：来限制成员函数。</p>
</blockquote>
<div class="note warning flat"><p>一件很重要的事儿是类的定义结束之后有个分号！！！（浪费大把时间）</p>
</div>
<hr>
<h4 id="默认构造函数">默认构造函数</h4>
<ul>
<li>调用时可以不需要实参的构造函数
<ul>
<li>参数表全为空的构造函数</li>
<li>全部参数都有默认值的构造函数</li>
</ul>
</li>
<li>下面两个都是<strong>默认构造函数</strong>，如在类中同时出现，将产生编译错误：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Clock</span>();</span><br><span class="line"><span class="built_in">Clock</span>(<span class="type">int</span> newH=<span class="number">0</span>,<span class="type">int</span> newM=<span class="number">0</span>,<span class="type">int</span> newS=<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 这两个函数均不需要初始值，所以会产生调用矛盾</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="隐含生成的构造函数">隐含生成的构造函数</h4>
<p>如果程序中未定义构造函数，编译器将在需要时自动生成一个<strong>默认构造函数</strong></p>
<ul>
<li>参数列表为空，不为数据成员设计初始值</li>
<li>如果类内定义了成员的初始值，则使用类内定义的初始值</li>
<li>如果没有定义类内的初始值，则以默认方式初始化</li>
<li>基本类型的数据默认初始化的值是不确定的</li>
</ul>
<hr>
<h4 id="default">“=default”</h4>
<p>如果类内已定义构造函数，默认情况下编译器不再隐含生成默认构造函数。<br>
如果你坚持希望隐含生成默认构造函数，用“=default”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Clock</span>() = <span class="keyword">default</span>;<span class="comment">//指示编译器提供默认构造函数</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="委托构造函数">委托构造函数</h4>
<p>委托构造函数（delegating constructor）使用类其他构造函数执行初始化过程</p>
<p>例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS):<span class="built_in">hour</span>(newH),<span class="built_in">minute</span>(newM),<span class="built_in">second</span>(newS)&#123;&#125;</span><br><span class="line"><span class="built_in">Clock</span>():<span class="built_in">Clock</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//有的编译器并不支持委托构造函数</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="复制构造函数">复制构造函数</h3>
<p>复制构造函数时一种特殊的构造函数，其形参为本类的对象引用。作用是用一个已存在的对象去初始化同类型的新对象。</p>
<p>用法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        类名(形参);<span class="comment">//构造函数</span></span><br><span class="line">        类名(<span class="type">const</span> 类名&amp;对象名);<span class="comment">//复制构造函数</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">类名::类(<span class="type">const</span> 类名&amp;对象名)<span class="comment">//复制构造函数的实现</span></span><br><span class="line">&#123;函数体&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="隐含的复制构造函数">隐含的复制构造函数</h4>
<ul>
<li>如果没有为类声明拷贝初始化构造函数，则比编译器自己生成一个复制构造函数。</li>
<li>这个构造函数执行的功能是：用作为初始值对象的每个数据成员的值，初始化将要建立的对象的对应数据成员。</li>
</ul>
<hr>
<h4 id="delete">“=delete”</h4>
<p>如若不希望被复制构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Point(const Point&amp;p) = delete;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="复制构造函数被调用的三种情况">复制构造函数被调用的三种情况</h4>
<ul>
<li>定义一个对象是，以被雷另一个对象作为初始值，发生复制构造</li>
<li>如果函数的形参是类的对象，调用函数时，将使用实参对象初始化形参对象，发生复制构造</li>
<li>如果函数的返回值是类的对象，函数执行完成返回主函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主函数，此时发生复制构造</li>
</ul>
<hr>
<h3 id="析构函数">析构函数</h3>
<p>作用：完成对象被删除前的一些清理工作</p>
<ul>
<li>在对象生存期结束的时刻系统自动调用它，然后再释放此对象所属的空间</li>
<li>如果程序中未声明析构函数，编译器会自动生成一个默认的析构函数，函数体为空</li>
</ul>
<hr>
<h2 id="类的组合">类的组合</h2>
<p>说白了就是类的数据成员是别的类的对象，下面用计算两点之间线段的距离的程序来说明。</p>
<hr>
<h3 id="线段类和点类实例">线段类和点类实例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Point类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">float</span> xx,<span class="type">float</span> yy); <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Point</span>(); <span class="comment">//默认构造函数</span></span><br><span class="line">    <span class="built_in">Point</span>(Point &amp;p); <span class="comment">//复制构造函数</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getX</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getY</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line">Point::<span class="built_in">Point</span>(<span class="type">float</span> xx,<span class="type">float</span> yy):<span class="built_in">x</span>(xx),<span class="built_in">y</span>(yy)&#123;&#125; <span class="comment">//构造函数的定义</span></span><br><span class="line">Point::<span class="built_in">Point</span>():<span class="built_in">x</span>(<span class="number">0</span>),<span class="built_in">y</span>(<span class="number">0</span>)&#123;&#125; <span class="comment">//默认构造函数的定义</span></span><br><span class="line">Point::<span class="built_in">Point</span>(Point &amp;p) <span class="comment">//复制构造函数的定义</span></span><br><span class="line">&#123;</span><br><span class="line">    x=p.x;</span><br><span class="line">    y=p.y;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the copy constructor of Point&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Line类，类的组合，计算两点之间的距离</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(Point o1,Point o2); <span class="comment">//参数为Point对象的构造函数</span></span><br><span class="line">    <span class="built_in">Line</span>(Line &amp;l); <span class="comment">//复制构造函数</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getLen</span><span class="params">()</span></span>; <span class="comment">//外部接口</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Point p1,p2;</span><br><span class="line">    <span class="type">float</span> len=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Line::<span class="built_in">Line</span>(Point o1,Point o2):<span class="built_in">p1</span>(o1),<span class="built_in">p2</span>(o2) <span class="comment">//构造函数是每一个成员变量都要初始化的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x=p1.<span class="built_in">getX</span>()-p2.<span class="built_in">getX</span>();</span><br><span class="line">    <span class="comment">//此处并不能够直接写  p1.x - p2.x 因为x属于私有变量</span></span><br><span class="line">    <span class="comment">// 通过两个public成员函数可以访问，相当于提供了外部接口</span></span><br><span class="line">    <span class="type">float</span> y=p1.<span class="built_in">getY</span>()-p2.<span class="built_in">getY</span>();</span><br><span class="line">    len= <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the constructor of Line&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">Line::<span class="built_in">Line</span>(Line &amp;l): <span class="built_in">p1</span>(l.p1),<span class="built_in">p2</span>(l.p2) <span class="comment">//复制构造函数是每一个成员变量都需要进行复制的 且这个&#x27;.&#x27;只能够在类的作用域内使用。</span></span><br><span class="line">&#123;</span><br><span class="line">    len=l.len;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the copy constructor of Line&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Line::getLen</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> len;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">myp1</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span>,<span class="title">myp2</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">Line <span class="title">line</span><span class="params">(myp1,myp2)</span></span>; <span class="comment">//参数传递的时候也需要复制构造哦</span></span><br><span class="line">    <span class="function">Line <span class="title">line2</span><span class="params">(line)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The length of line is &quot;</span> &lt;&lt; line.<span class="built_in">getLen</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The length of line2 is &quot;</span> &lt;&lt; line2.<span class="built_in">getLen</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="前向引用声明">前向引用声明</h3>
<p>遇到两个类相互引用的情况，也称为循环依赖，简单理解就是你不能使用一个在前面完全没有出现过的标识符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;  					<span class="comment">//前向引用声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;						<span class="comment">//A类的定义</span></span><br><span class="line"><span class="keyword">public</span>:							<span class="comment">//外部接口</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;			<span class="comment">//以B类对象b为形参的成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;						<span class="comment">//B类定义</span></span><br><span class="line"><span class="keyword">public</span>:							<span class="comment">//外部接口</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;      <span class="comment">//以A类对象a为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile入门</title>
    <url>/2022/06/19/Makefile%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="makefile概念入门">Makefile概念入门</h1>
<p><a href="https://zhuanlan.zhihu.com/p/29910215">知乎原文链接</a></p>
<p><a href="https://www.cnblogs.com/paul-617/p/15501875.html">博客讲解链接</a></p>
<p><a href="https://blog.csdn.net/weixin_38391755/article/details/80380786">又一篇讲解</a></p>
<p>本文主要介绍怎么利用“基于目标分层”的方式去理解一个工具，写作一个概念，定义一个设计或者部署一套代码。</p>
<p>本文首先是一个“Makefile入门”，然后才是“基于目标分层的方法介绍”。</p>
<span id="more"></span>
<h2 id="关于程序编译">关于程序编译</h2>
<p>Makefile解决的是编译的问题。Makefile最初是用来解决C语言的编译问题的，所以和C的关系特别密切，但并不是说Makefile只能用来解决C的编译问题。你用来处理Java一点问题没有，但对于Java，显然ant比Makefile处理得更好。</p>
<p>比如说，你有foo.c, bar.c, main.c三个C文件，你要编译成一个app.executable，你会怎么做呢？你会执行这样的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Wall -c foo.c -o foo.o</span><br><span class="line">gcc -Wall -c bar.c -o bar.o</span><br><span class="line">gcc -Wall -c main.c -o main.o</span><br><span class="line">gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure>
<p>按照程序猿的惯例，凡是要一次次重新执行的命令，都应该写成脚本。所以，简单来说，<a href="http://xn--build-fg1hjcwnb27p5qh0aj8tnybdzrt45b0pms6bwy60bjr5a.sh">你会把上面这个命令序列写成一个build.sh</a>，每次编译你只要执行这个脚本问题就解决了。</p>
<p>但这个脚本有问题，假设我修改了foo.c，但我没有修改bar.c和main.c，那么执行这个脚本是很浪费的，因为它会无条件也重新编译bar.c和main.c。</p>
<p>这个脚本更合理的写法应该是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ foo.o -ot foo.c ] &amp;&amp; gcc -Wall -c foo.c -o foo.o</span><br><span class="line">[ bar.o -ot bar.c ] &amp;&amp; gcc -Wall -c bar.c -o bar.o</span><br><span class="line">[ main.o -ot main.o] &amp;&amp; gcc -Wall -c main.c -o main.o</span><br><span class="line">[ app.executable -ot main.o ] &amp;&amp; [ app.executable -ot foo.o ] &amp;&amp; [ app.executable -ot bar.o ] &amp;&amp; gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure>
<p>如果你面对一个问题，不要尝试重新去定义这个问题，而是看它和原来的问题相比，多出来的问题是什么，尝试解决那个多出来的问题就好了。那么这里，多出来的问题就是文件修改时间比较。这个就是Makefile要解决的基本问题了。我们定义一种新的“脚本语言”（只是不用sh/bash/tch来解释，而是用make来解释），可以用很简单的方法来说明我们需要做的文件比较。这样上面的脚本就可以写成这个样子了：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample1</span></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line">  gcc -Wall -c foo.c -o foo.o</span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line">  gcc -Wall -c bar.c -o woo.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">  gcc -Wall -c main.c -o main.o</span><br><span class="line"><span class="section">app.executable: foo.o bar.o main.o</span></span><br><span class="line">  gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure>
<p>上面那个Makefile中，foo.o: foo.c定义了一个**“依赖”<strong>，说明foo.o是靠foo.c编译成的，它后面缩进的那些命令，就是简单的shell脚本，称为</strong>规则(rule)**。而Makefile的作用是定义一组依赖，当被依赖的文件比依赖的文件新，就执行规则。这样，前面的问题就解决了。</p>
<p>IDE中封装了Makefile得使用，但是想要具体控制特定文件的编译细节，最终仍然需要面对这些问题，IDE和make工具的对比，两者解决的是问题的不同层次。</p>
<p>Makefile中的依赖定义构成了一个依赖链（树），比如上面这个Makefile中，app.executable依赖于main.o，main.o又依赖于main.c，所以，当你去满足app.executable（这个目标）的依赖的时候，它首先去检查main.o的依赖，直到找到依赖树的叶子节点(main.c），然后进行时间比较。这个判断过程由make工具来完成，所以，和一般的脚本不一样。Makefile的执行过程不是基于语句顺序的，而是基于依赖链的顺序的。<img src="https://pic4.zhimg.com/80/v2-90371e6fcdf8f515a68dab7404ed4f43_1440w.jpg" alt="依赖树"></p>
<h2 id="phony依赖">phony依赖</h2>
<p>make命令执行的时候，后面跟一个“目标”（不带参数的话默认是第一个依赖的目标），然后以这个目标为根建立整个依赖树。依赖树的每个节点是一个文件，任何时候我们都可以通过比较每个依赖文件和被依赖文件的时间，以决定是否需要执行“规则”</p>
<p>但有时，我们希望某个规则<strong>总是被执行</strong>。这时，很自然地，我们会定义一下<strong>永远都不会被满足</strong>的依赖。</p>
<p>可能会这么写：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">test:</span></span><br><span class="line">  DEBUG=1 ./app.executable</span><br></pre></td></tr></table></figure>
<p>test这个文件永远都不会被产生，所以，你只要执行这个依赖，rule是必然会被执行的。这种形式看起来很好用，但由于make工具默认认为你这是个文件，当它成为依赖链的一部分的时候，很容易造成各种误会和处理误差。</p>
<p>所以，简化起见，Makefile允许你显式地把一个依赖目标定义为<strong>假的(Phony)</strong>：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: test</span></span><br><span class="line"><span class="section">test:</span></span><br><span class="line"> DEBUG=1 ./app.executable</span><br></pre></td></tr></table></figure>
<p>这样make工具就不用多想了，也不用检查test这个文件的时间了，反正test就是假的，如果有人依赖它，无条件执行就对了。</p>
<h2 id="宏">宏</h2>
<p>前面的sample1明显还是有很多多余的成份，这些多余的成份可以简单通过引入“宏”定义来解决，比如上面的Makefile，我们把重复的东西都用宏来写，就成了这样了：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample2</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> foo.c -o foo.o</span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> bar.c -o bar.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> main.c -o main.o</span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line"> <span class="variable">$(LD)</span> main.o foo.o bar.o -o app.executable</span><br></pre></td></tr></table></figure>
<p>还是有“多余”的成份在，因为明明依赖中已经写了foo.o了，rule中还要再写一次，我们可以把依赖的对象定义为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">@</mi><mtext>，被依赖的对象定义为</mtext></mrow><annotation encoding="application/x-tex">@，被依赖的对象定义为</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">@</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">为</span></span></span></span>^（这是当前gnumake的设计），这样就可以进一步化简：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample3</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line">  <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>很明显，这还是有重复，我们可以把重复的定义写成通配符：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample4</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"><span class="section">woo.o: woo.c</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line"> <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>实际上，你要化简，还有很多手段，比如gnumake其实是默认定义了一组rule的，上面这个整个你都可以不写，就这样就可以了：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample5</span></span><br><span class="line">LDLIBS=-lpthead</span><br><span class="line">SRC=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">OBJ=$(SRC:.c=.o)</span><br><span class="line"><span class="section">app.executable: <span class="variable">$(OBJ)</span></span></span><br><span class="line"><span class="comment">#看不懂</span></span><br></pre></td></tr></table></figure>
<p>这里其实没有定义.o到.c的依赖，但gnumake默认如果.c存在，.o就依赖对应的.c，而.o到.c的rule，是通过宏默认定义的。你只要修改CC，LDLIBS这类的宏，就能解决大部分问题了。所以你又省掉了一组定义，这就可以写得很短。</p>
<h2 id="头文件问题">头文件问题</h2>
<p>现在我们把问题搞得复杂一点，增加三个头文件。比如foo.h, bar.h和common.h，前两者定义foo.c和bar.c的对外接口，给main.c使用，common.h定义所有文件都要用到的通用定义（foo.h和woo.h中包含common.h)。这样前面这个sample1就有毛病了。照理说，foo.h更新的时候，foo.o和main.o都需要重新编译，但根据那个定义，根本就没有这个比较。</p>
<p>我们的定义必须写成这个样子：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sample4+</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">foo.o: foo.c foo.h common.h</span></span><br><span class="line"><span class="section">bar.o: bar.c bar.h common.h</span></span><br><span class="line"><span class="section">main.o: main.c foo.h bar.h common.h</span></span><br><span class="line"><span class="section">app.executable: foo.o bar.o main.o</span></span><br><span class="line">  <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>(注：这个例子我们在.o.c依赖的规则中使用了$&lt;宏，它和$^的区别是，它不包括依赖列表中的所有文件，而仅仅是列表中的第一个文件）</p>
<p>这就又增加了复杂度了——头文件包含关系一变化，我就得更新这个Makefile的定义。这带来了升级时的冗余工作。按我们前面考虑一样的策略，我们尝试在已有的名称空间上解决这个问题。Makefile已经可以定义依赖了，但我们不知道这个依赖本身。这个事情谁能解决？——把这个过程想一下——其实已经有人解决这个问题了，这个包含关系谁知道嘛？当然是编译器。编译器都已经用到那个头文件了，当然是它才知道这种包含关系是什么样的。比如gcc本身直接就提供了-M系列参数，可以自动帮你生成依赖关系。比如你执行gcc -MM foo.c就可以得到</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">foo.o: foo.c foo.h common.h</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文引自开头的链接，由于能力有限及需求不高，剩余的看的不是很懂，目前就到这里。</p>
</blockquote>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>makefile基础</tag>
        <tag>CS工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt</title>
    <url>/2022/09/03/Qt/</url>
    <content><![CDATA[<p><a href="https://github.com/liubf21/Qt-Practical-Training-For-Programming">非爷的Qt仓库</a></p>
<h1 id="一个简单计算器的实现">一个简单计算器的实现</h1>
<p>照着下面的视频自己一步步来的，可以对于qt有个大致的了解，并且自己也亲手写了几个键的功能，也算是自己的第一个具有ui界面的简单程序了。</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/txGRU7OrTZo" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p><a href="https://github.com/hustlixiang21/Qt_Practice/tree/main/Calculator">点击查看源代码</a></p>
<p>效果图：<br>
<img src="https://picx.zhimg.com/80/v2-9e256ce589cf3dff00310312c0ad7f46_1440w.png" alt="效果图"></p>
<h1 id="添加程序图标">添加程序图标</h1>
<p>参考博客：<a href="https://blog.csdn.net/yc__coder/article/details/107425940?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-107425940-blog-79359228.pc_relevant_multi_platform_featuressortv2dupreplace&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-107425940-blog-79359228.pc_relevant_multi_platform_featuressortv2dupreplace&amp;utm_relevant_index=3">Mac端设置Qt应用图标</a></p>
<p>当然，最好的方式是去<a href="https://resources.qt.io/learning-hub">官网的document</a>进行查询。</p>
]]></content>
      <categories>
        <category>CS工具</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++语言</tag>
        <tag>ui程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Web认证的校园网接路由器</title>
    <url>/2023/02/16/Web%E8%AE%A4%E8%AF%81%E7%9A%84%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%8E%A5%E8%B7%AF%E7%94%B1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="需求">需求</h1>
<p>由于校园网的有设备数量的限制，于是想要利用校园的有线网接自己的路由器解除设备数量的限制，并且实现所谓的硬件翻墙，即流量经由路由器转发至代理服务器，作用就是处于该路由器形成的网络中的设备不用启动科学上网，省了一点事儿。</p>
<h1 id="困难与解决办法">困难与解决办法</h1>
<p>校园网不同于家庭网络，需要进行一步web认证才能进行联网，我一开始就是以为我买个现成路由器（华硕 TUF AX3000）接上去认证一下就好了，结果是并不会弹出这个认证的界面。所以我又买了台软路由R2S（本质上是一台微型计算机），并且装上<a href="https://zh.wikipedia.org/zh-hans/OpenWrt">openwrt</a>系统作为路由器的上级路由，因为本质上是个嵌入的linux系统，有命令行工具，可以用<code>curl</code>命令向自己校园网的认证界面(华科是192.168.50.3)发个http请求实现登陆即可。至于科学，利用软路由里的软件配置好自己订阅的机场地址就行，没错，本质上还是软翻，不过是交到网关去处理了而已。</p>
<h1 id="过程演示">过程演示</h1>
<h2 id="设备准备">设备准备</h2>
<p>一台路由器，一台软路由，两根网线，一台电脑。</p>
<h2 id="利用网络抓包获取校园网认证中http请求的content值">利用网络抓包获取校园网认证中http请求的content值</h2>
<p>首先用一根网线的一端接校园有线网的端口，另一端接自己的电脑。通过浏览器进入校园网的认证界面，此处最好关闭掉wifi功能。提前输入好账号密码，<strong>不要点登录</strong>。<br>
<img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.01.16.png" alt=""></p>
<h3 id="进入开发者模式">进入开发者模式</h3>
<p>按F12进入浏览器的开发者模式，大致看一下，并了解该网页的逻辑，即登录的函数<br>
<img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.05.27.png" alt=""></p>
<h3 id="在post位置处打上断点">在post位置处打上断点</h3>
<p>跟平常调试代码一样。<br>
<img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.06.24.png" alt=""></p>
<h3 id="点击login登录获取content值">点击login登录获取content值</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.27.04.png" alt=""></p>
<h3 id="利用curl命令发送请求">利用curl命令发送请求</h3>
<p>写一个shell脚本，或者不写都行。<br>
<img src="https://picx.zhimg.com/80/v2-285e2cea8e82f818410f32dd796559b3_1440w.png" alt=""><br>
利用chmod命令赋予其执行权限之后，执行该脚本，发现返回值是succees即代表该命令成功执行并完成了校园网的认证；如若不成功，重复获取content的操作，因为我也是第一次没成功。</p>
<h2 id="配置软路由">配置软路由</h2>
<h3 id="安装openwrt系统">安装openwrt系统</h3>
<p>由于github上开源众多，效果应该都差不多，随便选就行，而且tb上买的软路由大多是提前预装好的，如果是一台全新的机器，参考下面的video以安装好openwrt系统。</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/gsrAj1vySaE" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h3 id="进入软路由后台">进入软路由后台</h3>
<p>把TF卡正确插入软路由，并确保自己的软路由sys的指示灯正常。<br>
<img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2019.46.52.png"/></p>
<p>用一根网线一端接校园有线网的端口，另一端接软路由的wan口。另一根网线的一端接软路由的lan口，另一端接上电脑。此时电脑和软路由处于同一局域网下，通过其ip地址（这个一般商家会告诉你，如果没有则可以查看网关的ip地址，或者关闭dhcp手动分配）在浏览器中去登陆软路由的后台，输入用户名和密码进行登录。<br>
<img src="https://picx.zhimg.com/80/v2-7d989b04c23b0a4f5f0bef25068a117a_1440w.png" alt=""></p>
<h3 id="命令行中使用curl命令">命令行中使用curl命令</h3>
<p>进入软路由的命令行工具，使用上面写好的curl命令去进行校园网的认证。最好尝试ping一下百度，看能不能通。<br>
<img src="https://pica.zhimg.com/80/v2-1b493abb1ef9054903270b5bdffeabb5_1440w.png" alt=""></p>
<h3 id="配置科学上网">配置科学上网</h3>
<p>我使用的openclash这是它里面自带的软件，随便使用一款代理软件都行，然后就如在其他设备上配置科学一样，输入订阅的url就行。<br>
<img src="https://pic1.zhimg.com/80/v2-d9aab76bd341cae45b8c5524653098e7_1440w.png" alt=""></p>
<h2 id="配置硬路由">配置硬路由</h2>
<p>因为软路由不能像路由器那样发送无线的网络信号（至少我的入门机不行），需要使用一台真正的路由器去发送wifi信号或者是提供更多的lan口进行有线网的连接。我的华硕路由器的用途就是如此，关注到软路由接lan口那条线，把这条线接电脑的一端改接到路由器的wan口，当然也可以接到lan口，不过需要使用路由器的ap模式。不同点在于，接到wan口的方法，软路由变成了上级路由，你无法通过输入ip地址的方法进入软路由的后台（至少现在的我技术达不到）；而接到lan口的话，软路由仍与我们的设备处于同一个局域网内（此时的路由器充当的作用就跟一个具有无线功能的交换机一样）。</p>
<p>我是接到wan口，然后用任意一台能够上网的设备连接该wifi信号，根据路由器背面提供的信息完成对路由器的初始设置，例如名称密码什么的。此过程比较简单，不进行过多的赘述。</p>
<h1 id="写在最后">写在最后</h1>
<p>由于学校断电断网的局限性导致设备夜间断网，那也不能每次都得重复登录软路由后台去连接校园网，但是貌似启用无感认证之后，就算断了一段时间也能够自动的连上去。还是准备又时间写一个自动登录和自动下线的脚本，来迎合学校的规定。</p>
<p>上述的方法的确适用于我的状况，而且我买的路由器本身就支持刷机，其实对于一般的无需认证的家庭网络可以不用软路由这个东西，华硕的某些系列的路由器支持刷梅林系统，本质也是一个适配华硕路由器的openwrt系统。由于我目前没有找到更好的解决办法，只能够维持现状。软路由更多还是作为旁路由，专门给家里的电视盒子提供一些屏蔽广告的服务，或者是流媒体加速，最重要的还是能够科学，看外国的一些流媒体软件。</p>
<p>参考文章<br>
<a href="https://blog.csdn.net/qq_30763587/article/details/119523231">openwrt下实现校园网的web认证</a><br>
<a href="https://zhuanlan.zhihu.com/p/443145372?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=1137483569697013760&amp;utm_psn=1609660582969470976&amp;utm_source=wechat_session">华中科技大学校园网自动重连</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络 - 校园网 - 路由</tag>
      </tags>
  </entry>
  <entry>
    <title>git远程连接</title>
    <url>/2022/07/17/git%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>这个是继上篇文章git入门往后写的，主要原因还是在尝试将一些资料文件上传到github的时候遇到了比较多的问题吧。</p>
<p>我认为建立连接的方式我所目前能够实现的应该是<strong>两种</strong>。</p>
<p>在讲述实现方法之前，我觉得应该对于<strong>远程操作的命令</strong>应该有所了解。</p>
<h2 id="git常见的命令">git常见的命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init                    //初始化本地仓库，生成一个.git文件夹，这也是git的核心</span><br><span class="line"></span><br><span class="line">git add [target]            //添加目标文件到缓存区</span><br><span class="line"></span><br><span class="line">git rm -f &lt;filename&gt;        //这个命令是删除缓存区里和工作区里该文件</span><br><span class="line"></span><br><span class="line">git rm --cached &lt;filename&gt;  //当你add了你不想要的文件，这个命令可以删除缓存区的文件，但保留工作区</span><br><span class="line"></span><br><span class="line">git commit                  //提交在缓存区的文件，使用 -m [message]添加必要的信息（不添加也行自动弹出）</span><br><span class="line"></span><br><span class="line">git status                  //查看git的状态</span><br><span class="line"></span><br><span class="line">git clone [url or ssh]      </span><br><span class="line">//非常重要的一点是把远程仓库直接clone下来，默认会与其克隆下来的远程仓库进行连接，名称就叫做 origin</span><br><span class="line"></span><br><span class="line">git pull origin master      </span><br><span class="line">//拉去远程仓库“origin”相应的分支到本地仓库中的master中，在push之前常常需要先pull一下最新的仓库</span><br><span class="line"></span><br><span class="line">git pull origin master --allow-unrelated-histories </span><br><span class="line">//如果本地与远程是两个独立的仓库，则在pull时需要指定其“允许无关的日志合并”，否则会保存</span><br><span class="line"></span><br><span class="line">git push origin master </span><br><span class="line">//将本地仓库中的内容提交到远程仓库中（origin为远程分支的名字，master为当前分支的名字，应注意的是，该命令是不完全完整的，在实际使用中，如果是第一次提交到远程，应该使用的命令为【git push -u origin master】，如果不是第一次，则直接使用git push即可）</span><br><span class="line"></span><br><span class="line">git remote add origin [url or ssh]</span><br><span class="line">//添加一个远程仓库连接，并为其命名为&quot;origin&quot;，当然也可以自定义其它的名字，但一般都命名为origin</span><br><span class="line"></span><br><span class="line">git remote rm origin        //删除一个名为&quot;origin&quot;的远程仓库连接</span><br><span class="line"></span><br><span class="line">git remote set-url origin [url or ssh]</span><br><span class="line">//修改&quot;origin&quot;的url（结合上面一个命令可以发现，想要修改远程仓库连接有两种方法：一种是先删除再添加，一种是直接修改）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>无论是url或者是ssh都在仓库界面的code按钮查看复制，ssh更加的安全。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/20200213161009663.png" alt="原理"></p>
<h3 id="git-add-和-git-add-的区别">git add . 和 git add * 的区别</h3>
<p>git add . 添加所有文件、文件夹和子文件夹，包括.gitignore和以点开头的任何其他内容；</p>
<p>git add * 将添加除以点开头的文件、文件夹和子文件夹以外的任何文件、文件夹和子文件夹。</p>
<p>git add .也尊重.gitignore，而git add *会在任何非点文件被gitignore时抛出一个错误。<u>使用git add .比git add *好得多</u>。</p>
<p>* 不是git的一部分，它是shell解释的通配符。 *  扩展到当前目录中的所有文件，然后才传递给git，git是add的全部文件。.是当前目录本身，git add将添加它和它下面的所有文件。</p>
<p>add *表示添加当前目录中的所有文件，名称以点开头的文件除外。这是shell功能，Git只接收文件列表。</p>
<p>add .在shell中没有特殊的含义，因此git递归地添加整个目录，几乎相同，但包括名称以点开头的文件。</p>
<h3 id="删除远程仓库文件的方法">删除远程仓库文件的方法</h3>
<p>删除时非常需要注意的一点是，暂存区里的文件并<u>不会随着提交而清空</u>。同理，你删除的文件还在暂存区里，需要<u>移除暂存区的已被删除的文件</u>才可以commit。</p>
<h4 id="同时删除当前工作目录和暂存区的文件或者目录">同时删除当前工作目录和暂存区的文件或者目录。</h4>
<p><code>git rm &lt;file&gt;</code><br>
<code>git rm -r &lt;path&gt;</code></p>
<h4 id="只删除暂存区的文件或者目录">只删除暂存区的文件或者目录。</h4>
<p><code>git rm --cache &lt;file&gt;</code><br>
<code>git rm -r --cache &lt;path&gt;</code></p>
<h4 id="直接删除法">直接删除法</h4>
<p>直接删除指定的文件或者目录。适用于要删除的文件数量比较小的情况。</p>
<p><code>git rm -r --cached demo</code><br>
<code>git commit -m '删除 demo 文件夹'</code><br>
<code>git push -u origin master</code></p>
<h4 id="过滤删除法">过滤删除法</h4>
<p>在工程的根目录下添加 .gitignore 文件，将不需要的文件过滤掉，然后执行命令。该操作的原理是将暂存区中的所有文件删除，然后通过 git add . 命令将经过 .gitignore 文件过滤的文件添加到暂存区。该方法适用于大批量删除文件。</p>
<p><code>git rm -r --cached .</code><br>
<code>git add .</code><br>
<code>git commit</code><br>
<code>git push  -u origin master</code></p>
<p>无论直接删除还是过滤删除，目的都是删除已经删除的文件在暂存区的记录。</p>
<p>PS：需要注意自己的命令行提示的各种信息</p>
<h2 id="第一种实现方法-git-clone">第一种实现方法（git clone）</h2>
<h3 id="step1-在github中建立一个仓库名为git-test">Step1: 在github中建立一个仓库名为git_test</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2017.12.03.png" alt=""></p>
<h3 id="step2-进入一个文件夹使用git-clone-该仓库的url-or-ssh">Step2: 进入一个文件夹使用git clone &lt;该仓库的url or ssh&gt;</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.28.52.png" alt=""></p>
<p>此时git clone是完完整整的将整个仓库克隆到本地。会生成一个和仓库同名的文件夹，进入文件夹，可以直接看到 .git 文件。</p>
<h3 id="step3-不需要进行远程连接-自动建立了连接-默认origin">Step3: 不需要进行远程连接，自动建立了连接(默认origin)</h3>
<p>利用 git remote -v查看远程连接信息</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.35.28.png" alt=""></p>
<h3 id="step4-创建测试文件提交至远程仓库">Step4: 创建测试文件提交至远程仓库</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.39.24.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.42.25.png" alt=""></p>
<p>测试完毕！</p>
<h2 id="第二种实现方法-初始化本地仓库-手动添加连接">第二种实现方法（初始化本地仓库+手动添加连接）</h2>
<h3 id="step1-在github新建仓库同时初始化本地的一个仓库">Step1: 在github新建仓库同时初始化本地的一个仓库</h3>
<p>新建仓库：</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.52.37.png" alt=""></p>
<p>进入文件夹～/Desktop/git_freely 使用git init初始化本地仓库</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.54.27.png" alt=""></p>
<p>同时可以看出本地仓库没有建立远程连接。</p>
<h3 id="step2-建立远程连接">Step2: 建立远程连接</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.56.10.png" alt=""></p>
<p>可以看出此时已经建立了远程连接，且给远程仓库的名字其实随便取（一般是origin），我取得lixiang。</p>
<h3 id="u-问个问题：这个时候能够直接按照第一种实现方法创建测试文件-然后git-add-commit-push吗？-u"><u>问个问题：这个时候能够直接按照第一种实现方法创建测试文件，然后git add,commit,push吗？</u></h3>
<p>既然我问了，肯定是不行的😄，不信我们试试。</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.02.15.png" alt=""></p>
<p>为什么？</p>
<p>这个可能需要知道git的一些基础的原理，不过相信都听过他叫，分布式版本控制，咱们只管版本控制这四个字，请问你的本地库里有远程仓库的任何版本吗？要知道，当你在github上建立一个新仓库的时候，他是有第一个版本的，名字叫做<u>initial commit</u>,（也可能不叫做这个）总之我是想说创建之初会伴随着第一次初始化的提交，但是本地没有。你会问，为啥没有，你怎么知道？git log看看😜</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.09.01.png" alt=""></p>
<p>解释一下，这个是我为了展示我说的反例做的一次commit。实际上应该是，git log后啥东西都没有。</p>
<h3 id="解决办法：">解决办法：</h3>
<p>把远程仓库的初始化版本拉过来就好了，作为本地的基础版本，才叫版本控制嘛。git pull很形象</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.13.45.png" alt=""></p>
<p>它提示这个操作不成功是因为我有个test.txt文件，本地仓库的第一次commit和远程仓库的初始版本并不同，所以它提示我偏离的分支，巴拉巴拉一大堆，正如它的提示说的，可以使用 <code>git pull --rebase lixiang main</code></p>
<p>你可能不知道这个 <code>--rebase</code> 的作用，其实就是分支合并提交，把远程仓库和本地仓库不管三七二十一直接合并，并做一次提交。</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.22.04.png" alt=""></p>
<p>成功了！git log 看看…</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.23.03.png" alt=""></p>
<p>能看出来，远程仓库的Initial commit跟我的本地的第一次的commit合并了，但是远程和本地仓库此时并不同步！需要上传到远程仓库。</p>
<h3 id="step3-git-push">Step3: git push</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.28.42.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.29.24.png" alt=""></p>
<p>成功了，有个小问题是分支发生了变化，这个地方原因在于本地初始化的默认分支是master，而远程仓库的默认分支是main。不过问题不大。</p>
<p>修改默认分支的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global init.defaultBranch &lt;默认分支名称&gt;</span><br></pre></td></tr></table></figure>
<p>如果上面这个过程你不明白，没关系，我把他复杂化了，其实应该更简单的，没事儿，我写一遍简单的就是了。</p>
<h2 id="第二种方法的简单化">第二种方法的简单化</h2>
<h3 id="step1-创建远程仓库初始化本地仓库">Step1:创建远程仓库初始化本地仓库</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.35.31.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.36.50.png" alt=""></p>
<h3 id="step2-手动建立远程连接">Step2:手动建立远程连接</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.43.25.png" alt=""></p>
<h3 id="step3-拉取-git-pull-远程仓库的初始版本">Step3:拉取（git pull）远程仓库的初始版本</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.44.13.png" alt=""></p>
<p>如果你看了我之前的讲述，你会发现不用<code>--rebase</code>参数，因为我初始化之后啥也没干，提交记录是空的，一个空的库当然pull任何东西都不会产生分叉。跟空的仓库，没有合并这一说！</p>
<p>Git log看看</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.47.04.png" alt=""></p>
<p>的确那么回事儿！最后一步了!😬</p>
<h3 id="step4-创建测试文件后-git-push-上传至远程仓库">Step4:创建测试文件后，git push 上传至远程仓库</h3>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.51.01.png" alt=""></p>
<p>去github看看</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.51.47.png" alt=""></p>
<h2 id="总结">总结</h2>
<p>我觉得我所说的只是皮毛，手把手教如何进行本地和远程仓库的连接，并提交自己想要上传的文件，其实github支持直接上传文件的，看上图的<u>Add File</u>,我学这个其实也没什么目的，就是感觉挺有意思的，自己想要学的深入的话，完全可以参照我的<a href="https://hustlixiang21.github.io/2022/07/05/git%E5%85%A5%E9%97%A8/">上一篇博客</a></p>
<p>对了，这篇文章基本上全都是我写的，但是肯定是看了很多很多别人的观点，自己也不停的犯错，但学习就是这么个过程，在此附上几篇我参照的原文。</p>
<p><a href="https://zhuanlan.zhihu.com/p/359108193">知乎_Git的使用（连接远程仓库）</a></p>
<p><a href="https://blog.csdn.net/phily123/article/details/121160072">CSDN_删除远程仓库的文件</a></p>
<p><a href="https://blog.csdn.net/A496608119/article/details/123566231">CSDN_Git本地文件上传到远程仓库</a></p>
<p><a href="https://blog.csdn.net/u014630142/article/details/120261403">CSDN_删除 git 远程仓库文件</a></p>
<p>仔细看看他们写的，可能比我写的清楚，我的目的还是通过我自己的理解的原理过程，去一步步建立连接，可以说这是我的第一篇也还算是教程的博客吧，谢谢观看！</p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>CS工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git入门</title>
    <url>/2022/07/05/git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="git入门">git入门</h1>
<p>依托清华大学暑培进行一些实操，参照书籍<a href="https://git-scm.com/book/en/v2">《pro git》</a>。</p>
<p>同时推荐一个<a href="https://learngitbranching.js.org/?locale=zh_CN">快速入门的网站</a>。能够更加增加对于分支的理解。</p>
<span id="more"></span>
<h2 id="什么是git？">什么是git？</h2>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理项目。</p>
<h3 id="版本控制">版本控制</h3>
<p>能够轻易的将仓库里的东西恢复到上一次的<strong>commit</strong>。</p>
<p>原理：采用快照的方式进行版本控制。</p>
<h3 id="分布式">分布式</h3>
<p>我的理解就是能够多人多台主机在不同时空进行同一个开发，且互不影响，最后统一提交。</p>
<h2 id="基本原理">基本原理</h2>
<p>分为工作区、暂存区与版本库，文件夹中有一个.git文件，里面是暂存区和版本库，而.git外的区域就是工作区。</p>
<p><img src="https://pic2.zhimg.com/80/v2-99d8bb59ba479252bfae5f71554b33aa_1440w.png" alt="img"></p>
<h2 id="案例演示">案例演示</h2>
<p>首先使用命令行进入当前的文件夹。</p>
<p>需要初始化当前的文件夹建立一个空的仓库，使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p><img src="https://pica.zhimg.com/80/v2-099c25239375be8b37a05910cbc07143_1440w.png" alt="img"></p>
<p>将所需文件添加进入缓存区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure>
<p>将缓存区内的文件commit进入版本库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit </span><br></pre></td></tr></table></figure>
<p>==这个时候一般会弹出默认的编辑器，要求对本次的提交进行一些描述，通常需要统一标准，写的清楚详细。==</p>
<p><img src="https://pic1.zhimg.com/80/v2-245d2877ae4fc8dfe9e8b64e3e8081e2_1440w.png" alt="img"></p>
<h3 id="一些常用的命令">一些常用的命令</h3>
<p>查看commit日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/80/v2-1025580221e635d84f2ebf13e632c0fe_1440w.png" alt="img"></p>
<p>查看git状态，即缓存区内的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/80/v2-0edf6701fd8e886a2a037d0cc283edb9_1440w.png" alt="img"></p>
<p>修改<strong>工作区文件</strong>与上次的commit进行比对，并输出不同的地方。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p><img src="https://picx.zhimg.com/80/v2-0c8cd096128899e7b95e084d974e0214_1440w.png" alt="img"></p>
<h3 id="分支和远程操作">分支和远程操作</h3>
<p>参见文章开始处的网站教学，生动自然令人印象深刻。</p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>CS工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>useful_links</title>
    <url>/2022/05/25/useful-links/</url>
    <content><![CDATA[<p>书籍资源:<a href="https://github.com/frankcbliu/CS-Books-PDF">https://github.com/frankcbliu/CS-Books-PDF</a></p>
<p>算法知识讲解:<a href="https://oi-wiki.org/graph/">https://oi-wiki.org/graph/</a></p>
<p>cs自学指南:<a href="https://csdiy.wiki">https://csdiy.wiki</a></p>
<p>学堂在线（类似于mook的课程网站）:</p>
<p><a href="https://www.xuetangx.com">https://www.xuetangx.com</a>(强烈推荐清华大学郑莉老师讲的c++程序设计)</p>
<span id="more"></span>
<p>计算机实用技术（学堂在线）:<br>
<a href="https://www.xuetangx.com/learn/THUSAST08091234567890/THUSAST08091234567890/8571842/video/13167559">https://www.xuetangx.com/learn/THUSAST08091234567890/THUSAST08091234567890/8571842/video/13167559</a></p>
<p>数据结构邓俊辉（学堂在线）:<br>
<a href="https://www.xuetangx.com/learn/THU08091000384/THU08091000384/10322765/video/17436706?channel=i.area.manual_search">https://www.xuetangx.com/learn/THU08091000384/THU08091000384/10322765/video/17436706?channel=i.area.manual_search</a></p>
<p>代码学习在线网站:</p>
<p><a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a><br>
<a href="https://www.codecademy.com/learn">https://www.codecademy.com/learn</a></p>
<p>清华大学考研资料:<br>
<a href="https://github.com/Wsky51/THU-CS912-kaoyan">https://github.com/Wsky51/THU-CS912-kaoyan</a></p>
<p>github配置hexo搭建个人博客:<br>
<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a><br>
<a href="https://zhuanlan.zhihu.com/p/36912355?utm_source=wechat_session&amp;utm_medium=social&amp;s_r=0">https://zhuanlan.zhihu.com/p/36912355?utm_source=wechat_session&amp;utm_medium=social&amp;s_r=0</a></p>
<p>清华学长oop笔记<br>
<a href="https://c7w.tech/oop-note/">https://c7w.tech/oop-note/</a></p>
<p>清华学长笔记：<br>
<a href="https://cloud.tsinghua.edu.cn/d/598bef9e3b844f17bf59/">https://cloud.tsinghua.edu.cn/d/598bef9e3b844f17bf59/</a></p>
<p>linux学习笔记:<br>
<a href="https://zq99299.github.io/linux-tutorial/">https://zq99299.github.io/linux-tutorial/</a></p>
<p>vim编辑器配置插件:</p>
<p>MIT lecture of vim：<br>
<a href="https://missing.csail.mit.edu/2020/editors/">https://missing.csail.mit.edu/2020/editors/</a> （这上面有老师的配置）</p>
<p>找插件的网站:<br>
<a href="https://vimawesome.com">https://vimawesome.com</a></p>
<p>超级强大的vim配置(vimplus)–续集:<br>
<a href="https://www.cnblogs.com/highway-9/p/5984285.html">https://www.cnblogs.com/highway-9/p/5984285.html</a></p>
<p>item2 + zsh + oh-my-zsh美化:</p>
<p>教程:<a href="https://zhuanlan.zhihu.com/p/145437836">https://zhuanlan.zhihu.com/p/145437836</a></p>
<p>icon:<a href="https://www.nerdfonts.com/cheat-sheet">https://www.nerdfonts.com/cheat-sheet</a></p>
]]></content>
      <categories>
        <category>学习资源</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>个人计划（暑假）</title>
    <url>/2022/06/01/%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="对于这个暑假的一些具体安排">对于这个暑假的一些具体安排</h1>
<p>最近觉得心里乱乱的，感觉什么都想学，什么都想知道，但是人的精力的确是有限的，所以在此厘清自己的头绪，学会取舍。</p>
<span id="more"></span>
<p>按照我认为从急到缓</p>
<ul>
<li>[ ] 科研老师交予的任务，三本书，还有斯坦福的视频，这是一定要完成的任务！</li>
<li>[ ] C++（郑莉）的学习和数据结构（清华数据结构），算法（先就PAT乙）的学习，努力提高自己的代码能力，练习配上地大的实习和头哥的实验。</li>
<li>[ ] 学会一些基础的CS工具，linux，git，py，cmake和docker等等，对自己的要求就是浅尝辄止，不许过多浪费时间。</li>
<li>[ ] 至少要有做自己的项目的经历，初步的想法是用自己买的服务器搭一个网页游戏，从中学习前后端的知识，边做边学。还有一个就是利用c++写一个小游戏，参照地大的项目，目的是提高自己对C++的理解，然后熟悉程序开发的过程，OOP(面向对象编程)可以先搁置。</li>
</ul>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>个人反思</tag>
      </tags>
  </entry>
  <entry>
    <title>千与千寻有感</title>
    <url>/2022/08/09/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p>近几天有点混，突发奇想去看一些比较经典的影片，看完千里千寻之后被其中优美的旋律和动人的故事吸引，决定也来写一些自己的感受吧。</p>
<iframe src="//player.bilibili.com/player.html?aid=55571607&bvid=BV1A4411N7Kb&cid=97160161&page=1" width=100% height=570 scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<hr>
<h1 style="text-align:center;">成长是一场勇敢的冒险</h1>
<p>《千与千寻》指的不仅仅是主人公在两个世界中不同的名字，更是代表整个影片的主线，小千寻误入神隐世界，变成了千，历经“千寻”磨难，靠着自己的善良与坚韧，做回了千寻。而自己也在这个过程中，变得更加的沉着、顽强，成长了许多。回到现实世界，头发上那闪烁的头绳，提醒着我们，这并非一场梦，而是一段真实的旅程。</p>
<p>其实这部影片折射了许多的社会现象，有兴趣可以自己去看一些深刻的影评，我主要还是说一说自己对千寻的成长过程谈谈自己的感受。</p>
<p>初入一个陌生的环境，遇到一个能够真心帮助自己的人，实属不易，片中的白龙便是一个同千寻一样善良的人，他本是掌管一方河川的神，因为人类的破坏，来到了这方世界。他也成了千寻成长过程之中的一个非常重要的人。他提醒千寻不要忘了自己最初的名字，否则就会忘记自我，永远回不去了。这何尝不是在提醒我们，为什么这部影片能够吸引我们，是因为我们从剧中人物看到了我们自己。成长道路上一路走来，能够记得自己的初心，并保持善良和勤恳的人还有多少？童年时期的梦想又有几人记得，许多人迷失在了物欲横流的世界里，成为了那些出卖自己，跪地祈求他人施舍的人。剧中也有相应的片段，众人争先抢后的在无脸男面前换取金子，殊不知这些金子最后成了毫无价值的泥土，而自己也失掉了自己最宝贵的东西—尊严。</p>
<p>相反，千寻不接受自己并不需要的东西，她并不贪取这些身外之物。在她看来，她的朋友家人，甚至是需要帮助的陌生人才是最重要的。别人趋之若鹜不愿意做的事情，她也毫无怨言的去承担。不属于自己的东西何必去强取，做好自己的分内之事才对。</p>
<p>剧中的无脸男我觉得也代表着一类人，其实他们本心善良，别人对他好，他也对别人好，但是在社会之中显得格格不入，胆小，卑微不被大家所接纳。想尽办法融入他人的世界，最后却同样丢失掉了自己本心。</p>
<p>我非常喜欢剧中一个很经典的场景，一行人坐着电车去往远方的世界，全程无言，但是带给我的感受确实最震撼的。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20181109/f67332c54fb44cd790949f3416da762c.jpg" alt=""></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190829/0a6198ecc2e54548b8c7e513cdb51e63.jpeg" alt=""></p>
<p>他们一起搭载去往远方的火车，路途的美景尽收眼底，守住自己的初心，背上行囊，开始自己的旅程…</p>
<iframe src="//player.bilibili.com/player.html? aid=710367444&bvid=BV1gQ4y1T76f&cid=180227564&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=100% height=570> </iframe>
<p>许久没有坐过慢速火车，现代生活的快节奏，让我们无法体会儿时慢时光的快乐。这个片段中低低的房子，一望无际的海面，孤独的列车，五彩的云，带给我一种童年的感觉，我想这也是这部片如此吸引我们的原因。</p>
<p>成长是残酷的，就像现在的我，再也无法体会到儿时简简单单的快乐。没有办法，我们终将长大成人，注定远航，希望自己也希望大家，能够如千寻一般勤恳善良，奋力奔跑，定有属于自己的一番体悟。</p>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>感悟</tag>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>博客写作tricks</title>
    <url>/2022/07/20/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9Ctricks/</url>
    <content><![CDATA[<h2 id="加粗和斜体">加粗和斜体</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**Hello,World!**</span></span><br><span class="line"><span class="emphasis">*Hello,world!*</span></span><br></pre></td></tr></table></figure>
<p><strong>Hello,World!</strong><br>
<em>Hello,world!</em></p>
<hr>
<h2 id="行内html">行内HTML</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p>
<hr>
<h2 id="博客加密">博客加密</h2>
<h3 id="安装hexo-blog-encrypt插件">安装hexo-blog-encrypt插件</h3>
<ul>
<li>在hexo目录下<code>npm install hexo-blog-encrypt</code></li>
<li>在<code>/Hexo/_config.yml</code>文件中添加内容:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt</span>:</span><br><span class="line">	<span class="attr">enable</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="使用插件">使用插件</h3>
<ul>
<li>在想要使用加密功能的Blog头部加上对应文字：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: <span class="title class_">Hexo</span>加密功能</span><br><span class="line"><span class="attr">date</span>: <span class="number">2019</span>-<span class="number">09</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">20</span>:<span class="number">00</span>   </span><br><span class="line"><span class="attr">tags</span>: [学习笔记,<span class="title class_">Hexo</span>]</span><br><span class="line"><span class="attr">categories</span>: <span class="title class_">Hexo</span>      </span><br><span class="line"><span class="attr">password</span>: smile   </span><br><span class="line"><span class="attr">abstract</span>: <span class="title class_">Welcome</span> to my blog, enter password to read. </span><br><span class="line"><span class="attr">message</span>: 密码输入框上描述性内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：
<ul>
<li>password: 该Blog使用的密码</li>
<li>abstract: Blog摘要文字（少量）</li>
<li>message: 密码框上的描述性文字</li>
</ul>
</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/1917942">原文链接</a></p>
<hr>
<h2 id="insert-youtube-videos">Insert YouTube Videos</h2>
<h3 id="静态图片链接">静态图片链接</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Html version:</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youtu.be/BSlMAJ7SkMA</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.youtube.com/vi/ARted4RniaU/0.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">alt</span>=<span class="string">&quot;IMAGE ALT TEXT HERE&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Pure markdown version:</span><br><span class="line"></span><br><span class="line">[<span class="string">![IMAGE ALT TEXT HERE</span>](<span class="link">https://img.youtube.com/vi/ARted4RniaU/0.jpg</span>)](<span class="link">https://www.youtube.com/watch?v=ARted4RniaU</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://youtu.be/BSlMAJ7SkMA
" target="_blank"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg"
alt="IMAGE ALT TEXT HERE" width="700" height="500" border="20" /></a></p>
<p>Pure markdown version:</p>
<p><a href="https://www.youtube.com/watch?v=ARted4RniaU"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>
<hr>
<h3 id="内嵌视频">内嵌视频</h3>
<h4 id="方法一：">方法一：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="https://www.youtube.com/embed/BSlMAJ7SkMA" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p>视频ID的找法：</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-20%2015.05.24.png" alt=""></p>
<p>图中地址后面那一串英文和数字组成的<strong>字符串</strong> 如：BSlMAJ7SkMA</p>
<hr>
<h4 id="方法二：">方法二：</h4>
<p>点击上图的嵌入，其提供的是html代码（html和markdown具有一定的兼容性），直接复制到md文件即可。</p>
<p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-20%2015.05.39.png" alt=""></p>
<div class="note info flat"><p>自己可以修改html的一些属性如width、height。特别是width=100%，就会左右撑满。</p>
</div>
<iframe width=100% height="400" src="https://www.youtube.com/embed/BSlMAJ7SkMA" title="YouTube video player" frameborder="10" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<hr>
<h2 id="block-quote">Block quote</h2>
<p>为自己博客添加引用…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author,source] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>感谢观看！</p>
<footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">李翔的博客</a></cite></footer></blockquote>
<hr>
<p>可以嵌套哦！</p>
<blockquote><p>感谢观看！</p>
<blockquote><p>感谢观看！</p>
<footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">李翔的博客</a></cite></footer></blockquote><footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">李翔的博客</a></cite></footer></blockquote>
<hr>
<h2 id="note-bootstrap-callout">Note (Bootstrap Callout)</h2>
<p>每种方法都分 simple、modern 和 flat主题，也就是所谓的样式。</p>
<p>在此我只呈现出flat样式</p>
<h3 id="方法一：">方法一：</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note flat"><p>默认 提示块标签</p>
</div>
<div class="note default flat"><p>default 提示块标签</p>
</div>
<div class="note primary flat"><p>primary 提示块标签</p>
</div>
<div class="note success flat"><p>success 提示块标签</p>
</div>
<div class="note info flat"><p>info 提示块标签</p>
</div>
<div class="note warning flat"><p>warning 提示块标签</p>
</div>
<div class="note danger flat"><p>danger 提示块标签</p>
</div>
<hr>
<h3 id="方法二：">方法二：</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p>
</div>
<div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>
<hr>
<h2 id="tabs">Tabs</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<hr>
<h2 id="button">Button</h2>
<h3 id="inline">Inline</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,,outline%&#125;</span><br></pre></td></tr></table></figure>
<p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org" 
  title="Butterfly"><span>Butterfly</span></a><br>
This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org" 
  title="Butterfly"><span>Butterfly</span></a></p>
<hr>
<h3 id="block">Block</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure>
<p>This is my website, click the button  <a class="btn-beautify block larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is my website, click the button  <a class="btn-beautify block center larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is my website, click the button  <a class="btn-beautify block right blue larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<hr>
<h3 id="option">option</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<div class="btn-center">
<a class="btn-beautify larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify blue larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify pink larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify red larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify purple larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify orange larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify green larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
</div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<div class="btn-center">
<a class="btn-beautify outline larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline blue larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline pink larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline red larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline purple larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline orange larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline green larger" href="https://butterfly.js.org" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
</div>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>博客写作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>周计划（6.13-6.19）</title>
    <url>/2022/06/13/%E5%91%A8%E8%AE%A1%E5%88%92%EF%BC%886-13-6-19%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li>[x] 微积分通过考试宝典整体过一遍，熟悉知识体系。</li>
<li>[x] 大学物理通过宝典和精选习题也是整体的过一遍。</li>
<li>[x] 英语卓越篇八个单元，每天复习一个单元，认真积累词汇，读懂文章。词汇每日过一遍。</li>
<li>[x] 近代史的vlog的ddl尽快完成。</li>
</ul>
<p>总结：</p>
<p>微积分基本完成，大学物理还没开始复习，英语也只完成了两个单元，效率低下，面对即将到来的考试你准备怎么应对？大物好好复习！！！</p>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>个人反思</tag>
      </tags>
  </entry>
  <entry>
    <title>多态性</title>
    <url>/2022/07/31/%E5%A4%9A%E6%80%81%E6%80%A7/</url>
    <content><![CDATA[<h1 id="多态性概述">多态性概述</h1>
<p>多态指的是同样的消息被不同类型的对象接收时导致的不同的行为。消息指的是<strong>对类的成员函数的调用</strong>，不同的行为指的的是不同的实现，就是<strong>调用了不同的函数</strong>。</p>
<p>最简单的一个例子就是**“+”**，可以实现整数、浮点数和双精度浮点数之间的加法，包括混合类的加法。同样的一个“+”消息，被不同类型对象接受后，采用不同的方式进行加法运算。这就是多态性。</p>
<h2 id="多态的类型">多态的类型</h2>
<p>面向对象的多态性可以分为四类：</p>
<ul>
<li>重载多态</li>
<li>强制多态</li>
<li>包含多态</li>
<li>参数多态</li>
</ul>
<p>前两种称为<strong>专用多态</strong>，后两种称为<strong>通用多态</strong>。</p>
<ol>
<li>重载多态也就是之前学过的普通函数和类的成员函数的重载，当然也包括<strong>运算符的重载</strong>。</li>
<li>强制多态，简单说举个例子就是**+**涉及混合类型的时候，会进行强制类型的转化，这是强制多态的实例。</li>
<li>包含多态主要指的是类族中定义于不同类的同名成员函数的多态行为，通过<strong>虚函数</strong>实现。</li>
<li>参数多态与类模版相关联，使用的时候必须赋予实际的类型才能实例化。</li>
</ol>
<p>本篇所要介绍的正式运算符的重载和虚函数。</p>
<h2 id="多态的实现">多态的实现</h2>
<p>多态从实现的角度可以分为两类，<strong>编译时的多态和运行时的多态</strong>，前者顾名思义，在编译的过程中确定了同名操作的具体操作对象，这种操作的具体对象的过程就叫做<strong>绑定（binding）</strong>。</p>
<p>绑定指的是计算机程序自身彼此关联的过程，把一个<strong>标识符和一个存储地址联系在一起</strong>的过程。用面向对象的术语说，把一条消息和一个对象的方法相结合的过程。</p>
<p>绑定也分为两种，<strong>静态绑定</strong>和<strong>动态绑定</strong>。</p>
<p>绑定在编译连接阶段完成的情况称之为<strong>静态绑定</strong>。也称之为早期绑定或者早绑定。</p>
<p>有了静态绑定，<strong>动态绑定</strong>顾名思义就是在程序运行的过程完成绑定。也称之为晚期绑定和后绑定。对应着运行时的多态。</p>
<h1 id="运算符的重载">运算符的重载</h1>
<p>运算符重载是对已有的运算符赋予多重含义，是同一个运算符作用于不同类型的数据时导致不同的行为。</p>
<h2 id="运算符重载的规则">运算符重载的规则</h2>
<ol>
<li>C++中的运算符除了少数几个之外，都能重载，而且<strong>只能重载已有的运算符</strong>。</li>
<li>重载之后运算符的优先级和结合性都不会改变。</li>
<li>运算符是针对新类型数据的实际需要，对原有运算符进行适当的改造。重载的功能应该和原有功能类似，不能改变操作数的数目，至少一个是自定义的类型（否则也不叫重载）。</li>
</ol>
<div class="note danger flat"><p>不能重载的几个操作符，类属关系运算符**&quot;.&quot;**、成员函数指针运算符&quot;.*&quot;、作用域分辨符&quot;::“和三目运算符”?:&quot;。</p>
</div>
<hr>
<p>重载形式有两种，<strong>重载为类的非静态成员函数</strong>和<strong>重载为非成员函数</strong>。</p>
<p>重载为类的非静态成员函数和非成员函数的一般形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回类型 <span class="keyword">operator</span> 运算符(形参表)</span><br><span class="line">&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>当以非成员函数的形式重载，有时需要访问类中的成员，这时候可以声明为友元函数。</p>
</div>
<p>需要<strong>注意</strong>的是：</p>
<p>当运算符重载为类的成员函数时，函数的参数个数比原来的操作数个数要少一个（后置“++”“–”除外）；当重载为非成员函数的时候，参数个数与原操作数的个数相等。原因是，重载为类的成员函数时，第一个操作数会被作为函数调用的目的对象，因此无需出现在参数表中，函数体中可以直接访问第一个操作数的成员，而重载为非成员函数时，运算符所有的操作数必须显式通过参数传递。</p>
<h2 id="运算符重载为成员函数">运算符重载为成员函数</h2>
<p>主要是单目运算符和双目运算符的区别。</p>
<p>双目运算符，应该将前面的类的数据类型作为那个类的成员函数，后面的类的数据类型放在形参里。</p>
<p>单目运算符分为两类，<strong>前置单目运算符</strong>和<strong>后置单目运算符</strong>。(++，–就是单目运算符，放的位置不一样叫法不一样)</p>
<ul>
<li>
<p>对于前置单目运算符，重载的成员函数没有形参；</p>
</li>
<li>
<p>对于后置的单目运算符，函数要带有一个int型的形参，这里的int型参数在运算中不起任何作用，只是用于区别前置和后置。</p>
</li>
</ul>
<h2 id="运算符重载为非成员函数">运算符重载为非成员函数</h2>
<p>对于双目运算符，前后两个数据，只需要一个是自定义数据类型就能够进行操作符的重载，且两个数据类型都需要作为函数的形参。</p>
<p>对于前置单目运算符，形参是操作的数据类型。</p>
<p>对于后置单目运算符，形参有两个，一个需要操作的数据类型，另一个是int型数据。</p>
<div class="note success flat"><p>不难发现，成员函数和非成员函数的主要区别的就是，成员函数把前一个操作数据作为函数调用的对象，隐含进去了，非成员函数则不会。</p>
</div>
<hr>
<p>本节用一个Complex(复数类)去说明</p>
<p><a href="https://raw.githubusercontent.com/hustlixiang21/cpp-practice/main/%E5%AE%9D%E8%B4%9D%E6%96%87%E4%BB%B6/3.4.bmp">点击查看题目图片</a>(地大实验题目)</p>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/Complex/main.cpp">源代码见github</a></p>
<h1 id="虚函数">虚函数</h1>
<p>虚函数是动态绑定的基础。虚函数必须是非静态的成员函数。虚函数经过派生之后，在类族中就可以实现运行过程中的多态。</p>
<h2 id="一般虚函数成员">一般虚函数成员</h2>
<p>声明语法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名(形参表)；</span><br></pre></td></tr></table></figure>
<div class="note danger flat"><p>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数中实现。</p>
</div>
<p>运行过程中的多态需要满足的条件:</p>
<pre><code>1. 赋值兼容规则
1. 声明虚函数
1. 由成员函数来调用或者是通过指针、引用来访问虚函数
</code></pre>
<p>如果派生类中并没有显式给出虚函数的声明，这时系统就会遵循以下规则来判断派生类的一个函数成员是不是虚函数：</p>
<ol>
<li>该函数是否与基类的虚函数有相同的名称。</li>
<li>该函数是否与基类的虚函数有相同的参数个数和对应的参数类型。</li>
<li>该函数是否与基类的虚函数有相同的返回值类型或者满足赋值兼容规则的指针，引用类型的返回值。</li>
</ol>
<p>如果满足了上述条件，派生类中的虚函数就会<strong>覆盖</strong>掉基类中的一切同名函数，也就是作用域屏蔽。当然也可以通过作用域分辨符&quot;::&quot;区分。</p>
<p>强调一下，只用通过基类的指针或引用调用虚函数时，才会发生动态绑定。</p>
<div class="note success flat"><p>其实在不在派生类的虚函数前加上virtual关键字都无所谓，但是建议还是要加上，能够更加清晰得看出是虚函数。</p>
</div>
<p><strong>对象切片</strong>指的是用派生类的实例去初始化基类的对象，调用的是基类的复制构造函数，也就是说，派生类的数据成员只有与基类相同的部分会进行复制，其余的不管。此时这个基类的对象就和派生类的对象毫无关系了，也非常符合类型兼容规则。</p>
<h2 id="虚析构函数">虚析构函数</h2>
<p>不能声明虚构造函数但是可以声明虚析构函数。语法形式在正常的析构函数前加一个virtual关键字。</p>
<p>那么什么情况下需要使用到虚析构函数呢？</p>
<p>当基类的指针指向一个派生类的对象的时候，若此时进行<code>delete(基类的指针)</code>就会调用基类的析构函数而非派生类的析构函数，造成内存泄漏。（我其实觉得这种情况几乎不会碰到了解就好）跟普通成员函数的多态区别其实也不大。</p>
<h1 id="纯虚函数与抽象类">纯虚函数与抽象类</h1>
<h2 id="纯虚函数">纯虚函数</h2>
<p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”,例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>我的一大疑惑是为什么要引入纯虚函数？</p>
<ol>
<li>为了方便使用多态特性，我们常常需要在基类中定义虚拟函数。</li>
<li>在很多情况下，基类本身生成对象是不合情理的。</li>
</ol>
<p>例如，动物作为一个基类可以派生出老虎、孔雀等子类，但动物本身生成对象明显不合常理。</p>
<p>为了解决上述问题，引入了纯虚函数的概念，将函数定义为纯虚函数，则编译器要求在派生类中必须予以重写以实现多态性。同时含有纯虚拟函数的类称为抽象类，它不能生成对象。这样就很好地解决了上述两个问题。声明了纯虚函数的类是一个抽象类。所以，<strong>用户不能创建抽象类的实例</strong>，只能创建它的派生类（实现了基类中的纯虚函数的定义）的实例。纯虚函数最显著的特征是：它们<strong>必须在继承类中重新声明函数</strong>（不要后面的＝0，否则该派生类也不能实例化），而且它们在<strong>抽象类中往往没有定义</strong>。定义纯虚函数的目的在于，<strong>使派生类仅仅只是继承函数的接口</strong>。纯虚函数的意义，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，但类无法为纯虚函数提供一个合理的缺省实现。所以类纯虚函数的声明就是在告诉子类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”。</p>
<h2 id="抽象类">抽象类</h2>
<p>很简单，有纯虚函数的类就是抽象类，<strong>不能实例化</strong></p>
<p>如果你想了解更多，<a href="https://blog.csdn.net/LY_ysys629/article/details/76904129">参见博客</a>。</p>
<h1 id="程序实例-变步长梯形积分算法求解函数的定积分">程序实例——变步长梯形积分算法求解函数的定积分</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E5%8F%98%E6%AD%A5%E9%95%BF%E6%A2%AF%E5%BD%A2%E7%A7%AF%E5%88%86%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E7%A7%AF%E5%88%86.cpp">参见github</a></p>
<h1 id="综合实例-对个人银行账户管理程序的改进">综合实例——对个人银行账户管理程序的改进</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_2">参见github</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>大一学年总结</title>
    <url>/2022/08/04/%E5%A4%A7%E4%B8%80%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote><p><font size=5px>Get busy living or get busy dying.</font></p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=505421421&bvid=BV1Sg411F7cb&cid=405595939&page=1" width=100% height=540 scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<h1 id="一个阶段的结束">一个阶段的结束</h1>
<p>滴滴滴…</p>
<p>高考结束的铃声响起，身上的重担全部消失了，高中三年第一次全身心放松的离开我的母校，也是最后一次。</p>
<p><img src="https://pic4.zhimg.com/80/v2-f087e91d7da10e616c5abb9effd0833c_1440w.jpeg" alt=""></p>
<p>在洪高旁边拍摄的最后一张照片，标志高中的结束，我也搬离了那里。这条路，我走过很多很多次，这个湖，我也曾远眺过很多很多次。那时的我喜欢望着远方憧憬着大学的一切，充满梦想与激情。我就是那么一个感性，拥有着一个丰富内心世界的人。</p>
<blockquote><p>离开了，就永远回不去了。另一个残酷的事实就是，我即将脱离父母的羽翼，独立追求着自己梦想…</p>
</blockquote>
<hr>
<h1 id="开端">开端</h1>
<p>带着高考的些许不甘心和迈入新阶段的激动与憧憬。我来到了这里。1037号森林——华中科技大学。</p>
<p><img src="https://pic2.zhimg.com/80/v2-35ae425967378f31ee31cbfc10d0178d_1440w.jpeg" alt=""></p>
<hr>
<p>站在校门前，身旁是大包小包的物件，看着这个陌生的地方，看着这些陌生的人，憧憬着未来几年大学的生活，探索属于我自己的一条路…</p>
<img src="https://pic1.zhimg.com/80/v2-57a85bdc69159d055a04b90d4570d075_1440w.jpeg" alt="Pulpit rock" width="500" height="650">
<hr>
<p>一段新的、未知的甚至可能是艰难的旅程就此开始…</p>
<h1 id="适应">适应</h1>
<p>初入大学的我，第一次的挑战，是为期19天的军训，唯一的收获是认识了许多不同的人，听到了许多不同的事儿，最开心的时候莫过于大家坐在一起开心的聊着聊那。累但没有什么压力。</p>
<p>大学的第一堂课没记错的话应该是微积分，进入一个只在视频上见到过的大教室，坐满了人。和那很窄的桌子，时不时吱吱作响的椅子。四块可以挪动的黑板，上课铃声响起，总之，第一堂课就那么开始了，学习生活就那么开始了。</p>
<p>刚开始，课不是很多，难度也不是很大。令我感到最不同的是，那种自由的感觉，没有人催促你的感觉，甚至是没有管你的感觉。有大把的时间可以自我支配，打游戏，看手机，刷视频都行。</p>
<p>我当时就不停的问自己，你想要的生活是什么？我的决定就是，誓死不做摆烂人，我要成为一个能够控制自己身体和意志的人，我需要提高自己各方面的能力！</p>
<p>我迈开的第一步就是加入学院的学生组织，媒体宣传部，因为我想提升自己社交，工作能力和学习一些实用技术，例如摄影，p图、推文排版。我也认识了很多很多的人，他们对我的帮助也很大。</p>
<p>第一个学期，学习方面我好像陷入了另一个误区，所有的课程我都不听，自己去学，有的课甚至不去，去图书馆自习，我觉得自己能够搞得好，但是现实似乎略显骨感，分数并不高。好在通过期末痛苦的复习，取得了不错的成绩，没记错的话加权的排名在整个学院应该是第九，分流到信安应该是第三。其实并没有什么出众的地方，无非就是认真复习而已。</p>
<p>这可能是属于我的一个特质吧，初入一个新的阶段，我适应得会比较快，我也能保持一种谦卑的心态，能够沉得下心来去专注自己的事情。同时也不得不坦白我的一个缺点，浮躁，通常是一切顺利的时候，会把自己的姿态放高，自我感觉良好，然后一个打击之后气焰全无。这一点在第二个学期得到了印证。</p>
<h1 id="改变">改变</h1>
<p>经过一个学期的适应，我在寒假期间也仔细反思了一下自己的问题，并做出了一些改变。</p>
<ul>
<li>认真听课，不迟到，也不早退，不缺课</li>
<li>找寻自己的方向，探索自己喜欢的方向，找到自己的兴趣</li>
<li>尽量更多的参加的课外活动，利用好自身的资源</li>
<li>规划好自己时间，做到能够掌控自己的一切</li>
</ul>
<p>而此刻我坐在这里，回顾当时自己的思考，我认为我的这个学期，我过的是相当充实的。</p>
<p>这第二个学期，我只有在学校解封那一天，和室友出去浪的那一晚上，逃了一节公选课，其余的时候，我从未逃过一节课，即使它是水课，不听的状况仍然也会出现，但是能够认真去做自己事情也算是一种进步，自己感兴趣的地方也会听一听。</p>
<p>其他的主要的课程，我上课听的时候真的有的时候是晕晕乎乎的，特别是线性代数课程，由于我并没有预习过，每节课都很难受，看着自己陌生的概念，她讲着，我还在看之前的内容。所以我课下作业的时候，会花大量的时间去复习ppt，想清楚每一个细节，作业也会很认真的完成，最后结果也令我非常的满意。其他的课程我几乎也是这样去学习的，我始终坚信，大学的课程并不是为了考倒你，即使会有几个难题，只要平时勤于思考，考试周认真复习，想取得好成绩绝对是不难的。</p>
<p>我也重拾自己初中的兴趣爱好，踢足球，即使我的身材有点走样了，技术也很不是很好，但是我依然选择加入了院里的足球队，参加过组织的训练，认识了很多学长，很多朋友。我们一同征战华工杯，即使我们在小组内就被淘汰了，我们没有失掉自己的信心，大家相聚一起，有球踢，有天聊，开心就好。</p>
<p>课外的竞赛方面，我跟两个数院的学长参加了美赛，我是作为论文手，我当时课下自学了latex排版，最终的翻译排版都是由我完成的。结果也非常令我出乎意料，拿了一个F（Finalist）奖(获奖率比较低)，当时真的很激动开心，可以算是我大学第一个竞赛的奖项。值得一提的还有我人生中第一笔奖学金，新生学习优秀奖学金（600元）。这些都是对于我的努力的肯定，心里的确是非常的开心。</p>
<p>课余的学习生活中，我也学习过不少的课外知识，学习过py，cpp和linux命令行，这些要么在我<a href="https://github.com/">github的仓库</a>里，要么在<a href="https://hustlixiang21.github.io/">我的博客</a>里都留下了记录，我感觉更多的还是被课内繁杂的课程占用了大部分的时间，被加权分数所裹挟，我深知自己不该把加权看的太重，但是周围的环境却时刻提醒着我自己，需要拿到保研名额并不容易。而我现在的想法就是<strong>保持+拓宽</strong>。保持住自己的加权就行，不必日日夜夜围绕着分数，我觉的更重要的还是练就自己一身的本领，学习自己感兴趣的技术。如果可以，加入一个科研团队，锻炼自己的科研水平。</p>
<h1 id="总结">总结</h1>
<p>在华科的一年时光就这么过去了，而自己也褪去了年幼时的那份稚嫩，羽翼渐丰。这一年里，有对新生活的不断适应与改变，认识了诸多好友，参与了许多有趣的活动，收获了不可多得的快乐；在学习生活方面也取得了不错的成绩，学年加权91.15，位列 4/98 ，甚至拿了美赛的一个奖项；情感方面，少了高中时的一些臭毛病，可以说是慢慢走向正轨，也不知不觉在一起三年多了，希望以后的路也能继续一起走完吧。</p>
<p>至于对未来的憧憬，希望自己能够成为一个自己想要成为的人，走出国门去看看世界，抑或是进入国内更高层次的学府去深造，一份安稳的工作，一个美满的家庭，其实这已经是很多人梦寐以求的生活，是以不敢奢望太多。我只知我不惧未知，也敢于拼搏…</p>
<blockquote><p>Having dreams is what makes life tolerable.</p>
</blockquote>
<p>深知自己文笔有限，还是多读读书，多写点东西慢慢提升吧，这一年的回顾，就到这了…</p>
<p align="right"><font size=4><b>八月四日晚八点，于校图书馆</b></font></p>
<hr>
<br>
<p style="text-align:center;font-size:20px;">最后附上几张照片，以纪念这匆匆逝去的一年。</p>
<div class="fj-gallery"><p><img src="https://pic1.zhimg.com/80/v2-e72f84985fe12334cccd92b012f72336_1440w.jpeg" alt="img"></p><p><img src="https://pica.zhimg.com/80/v2-e858eda3937d5b629d5a11013a110af4_1440w.jpeg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-025ae25e21b536130df53a272fbb34c4_1440w.jpeg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-a4f01cff9ab56596369c93d988d3db47_1440w.jpeg" alt="img"></p><p><img src="https://pica.zhimg.com/80/v2-e9135724d7f5c138a04a5e6f38bd84c7_1440w.jpeg" alt="img"></p><p><img src="https://pica.zhimg.com/80/v2-5a8d823eb451fc6855cb9f9a781723dd_1440w.jpeg" alt="img"></p><p><img src="https://pica.zhimg.com/80/v2-0256b20f83c5e2bcdce8de54464eb774_1440w.jpeg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-ebf47ce94ec315447883cdd8f664ac91_1440w.jpeg" alt="img"></p>
          </div>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>个人反思</tag>
      </tags>
  </entry>
  <entry>
    <title>linux实训</title>
    <url>/2022/05/25/%E5%A4%B4%E5%93%A5linux%E5%AE%9E%E8%AE%AD/</url>
    <content><![CDATA[<h1 id="根目录文件及其用处">根目录文件及其用处</h1>
<p><img src="https://pic2.zhimg.com/80/v2-faec5535f8d7f0d4589adfa8135fa98a_1440w.png" alt=""></p>
<span id="more"></span>
<h1 id="linux之用户管理">Linux之用户管理</h1>
<h2 id="创建-删除新用户">创建/删除新用户</h2>
<h3 id="linux创建用户命令">Linux创建用户命令</h3>
<p>Linux中使用<code>useradd</code>命令来创建一个新用户。<br>
命令格式格式：<code>useradd [命令参数] 参数</code><br>
常见命令参数：</p>
<ul>
<li>d&lt;登入目录&gt;：指定用户登入时的启始目录；</li>
<li>D：查看或变更预设值；</li>
<li>g&lt;群组&gt;：指定用户所属的群组；</li>
<li>m：自动建立用户的登入目录；</li>
<li>M：不要自动建立用户的登入目录；</li>
<li>s：指定用户登入后所使用的shell。</li>
</ul>
<p><code>useradd</code>必须以root权限才能执行，如果是普通用户想创建一个新用户时，需要在命令前加<code>sudo</code>命令来提升权限为root权限。</p>
<p>案例演示：</p>
<p>1.查看useradd系统默认属性值，使用命令<code>useradd -D</code><br>
<img src="https://pic1.zhimg.com/80/v2-cd4d69f535cad63f82850712990ef2a7_1440w.png" alt="截屏2022-05-17 20.55.31.png"></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>GROUP</td>
<td>指新创建的用户将被添加到用户组ID为100的公共用户组中</td>
</tr>
<tr>
<td>HOME</td>
<td>指新创建的用户将在/home目录下创建一个HOME账户</td>
</tr>
<tr>
<td>INACTIVE</td>
<td>指当密码逾期时，用户将不会被禁用</td>
</tr>
<tr>
<td>EXPIRE</td>
<td>指新创建的用户不会在设定日期被设置为逾期</td>
</tr>
<tr>
<td>SHELL</td>
<td>指新创建的用户使用/bin/sh(也就是bash)作为默认shell</td>
</tr>
<tr>
<td>SKEL</td>
<td>指系统会将/etc/skel目录中的内容复制到新创建的用户的HOME目录</td>
</tr>
<tr>
<td>CREATE_MAIL_SPOOL</td>
<td>指系统不会在邮件目录中创建一个文件用于新创建用户账户接受邮件</td>
</tr>
</tbody>
</table>
<p>2.创建新用户<br>
<img src="https://pic1.zhimg.com/80/v2-b25c232976216fcb6f3f803aeff450bd_1440w.png" alt="截屏2022-05-17 21.00.31.png"></p>
<p>Linux中用户信息是保存在<code>/etc/passwd</code>文件中，我们可以使用命令<code>tail</code> <code>/etc/passwd</code>命令查看<code>/etc/passwd</code>文件最后10行中是否存在刚刚新创建的testUser用户信息。</p>
<p><img src="https://pic1.zhimg.com/80/v2-7cbdd2c9f33f3d821619f37e443faf69_1440w.png" alt="截屏2022-05-17 21.03.00.png"></p>
<h3 id="linux删除用户命令">Linux删除用户命令</h3>
<p>Linux中使用<code>userdel</code>命令来删除一个已经存在的用户。<br>
命令格式：<code>userdel [命令参数] 参数</code><br>
常见命令参数：</p>
<ul>
<li>f：强制删除用户，即使用户当前已登录；</li>
<li>r：删除用户的同时，删除与用户相关的所有文件。</li>
</ul>
<p><code>userdel</code>必须以root权限才能执行，如果是普通用户想使用该命令时，需要在命令前加sudo命令来提升权限为root权限。</p>
<p>案例演示:</p>
<ol>
<li>使用userdel命令删除一个已经存在的用户testUser，并且自动删除其家目录文件。</li>
</ol>
<p><img src="https://pic3.zhimg.com/80/v2-cc94c16290b8db6a31084c63f2cfbc1c_1440w.png" alt="截屏2022-05-17 21.07.46.png"></p>
<h2 id="linux-用户密码管理">Linux 用户密码管理</h2>
<h3 id="用户密码存放地及方式">用户密码存放地及方式</h3>
<p>Linux中用户的登录密码是存放在<code>/etc/shadow</code>文件中，<code>/etc/shadow</code>文件中存放的是加密过后的密码，所以在<code>/etc/shadow</code>文件中看到的密码是加密过后的密文。</p>
<p><img src="https://pic3.zhimg.com/80/v2-56da6c940f5d0647ee221877032f9006_1440w.png" alt="截屏2022-05-17 21.12.04.png"></p>
<p>可以看到第一个冒号前是用户名，用户名是以明文的方式存放。</p>
<p>在第一个冒号和第二个冒号之间存放的是加密过后的密码，密码是以密文的方式存放，其中密文是由用户密码和其它信息加密后组成的，这里不做详细讲解，我们只需要知道如果第一个冒号和第二个冒号之间是*或者!或者空，则表示该用户没有密码，否则，则表示该用户是有密码。</p>
<h3 id="使用passwd命令修改用户密码">使用passwd命令修改用户密码</h3>
<p>命令格式：<code>passwd [命令参数] 参数</code></p>
<p>常见命令参数：</p>
<ul>
<li>d 删除密码；</li>
<li>l 停止账号使用；</li>
<li>S 显示密码信息。</li>
</ul>
<p>passwd必须以root权限才能执行，如果是普通用户想执行passwd时，需要在命令前加sudo命令来提升权限为root权限。</p>
<p>案例演示：</p>
<ol>
<li>使用useradd命令来新创建一个用户，使用passwd命令来设置登录密码。</li>
</ol>
<p><img src="https://pic1.zhimg.com/80/v2-d5b2e731ec72100890b67f8135105474_1440w.png" alt="截屏2022-05-17 21.15.41.png"></p>
<p>使用useradd命令创建一个新用户(test)，此时test用户是没有密码的，所以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 1 /etc/shadow</span><br><span class="line"><span class="built_in">tail</span>用法：-n, --lines=[+]NUM</span><br><span class="line">output the last NUM lines, instead of the last 10; or use -n +NUM to output starting with line NUM</span><br></pre></td></tr></table></figure>
<p>命令查看/etc/shadow文件的最后一行可以看出test用户密码部分为!。</p>
<p>使用passwd命令为test用户设置密码时，可以看到需要输入两次密码，目的是为了确保两次输入的密码一致。当设置完密码后，可以看到/etc/shadow文件中test用户的密码部分已经为加密过后的密文。</p>
<ol start="2">
<li>使用passwd命令来清除用户的密码。</li>
</ol>
<p><img src="https://pica.zhimg.com/80/v2-103024acdf47401fc675a536612fc29d_1440w.png" alt="截屏2022-05-17 21.22.23.png"></p>
<p>使用passwd命令清除用户test的登录密码，使用tail -n 1 /etc/shadow命令查看/etc/shadow文件的最后一行可以看出test用户密码部分为空，此时test用户是没有密码的。</p>
<h3 id="使用chpasswd命令修改用户密码">使用chpasswd命令修改用户密码</h3>
<p><code>chpasswd</code>命令通常是用于批量修改用户密码，从标准输入批量读取成对的用户名和密码，其中输入的用户名和密码的格式为: 用户名:密码</p>
<p>例如要批量更新用户密码，将用户名和密码写入到一个文件中，格式如下所示：</p>
<p><img src="https://pic3.zhimg.com/80/v2-3614610da6fdd274a3230a23dd8df26a_1440w.png" alt="截屏2022-05-17 21.24.16.png"><br>
然后执行执行如下命令来更新密码：</p>
<p>sudo chpasswd &lt; batch.txt</p>
<p>“&lt;”代表着重定向</p>
<p>命令格式：<code>chpasswd [命令参数] 参数</code></p>
<p>常见命令参数</p>
<ul>
<li>e：输入的密码是加密后的密文；</li>
<li>h：显示帮助信息并退出。</li>
</ul>
<p>chpasswd必须以root权限才能执行，如果是普通用户执行时，需要在命令前加sudo命令来提升权限为root权限。</p>
<h2 id="linux用户权限切换">Linux用户权限切换</h2>
<h3 id="图形化界面登录">图形化界面登录</h3>
<p>Linux中添加用户后，用户在图形界面登录系统的方式和Windows一样，都是选择要登录的用户后直接输入登录密码即可。</p>
<p>案例演示：</p>
<ol>
<li>添加一个新用户，并且设置登录密码，然后在图形界面登录。</li>
</ol>
<p><img src="https://picx.zhimg.com/80/v2-09a98a0817379f8c0b43104f19f9de87_1440w.png" alt="截屏2022-05-17 21.28.44.png"></p>
<h3 id="使用login命令登录">使用login命令登录</h3>
<p>login命令是让用户登录系统，可通过它的功能随时更换登入身份。当/etc目录里含名称为nologin的文件时，系统只允许root帐号登入系统，其他用户一律不准登入。</p>
<p>当使用login命令登录系统后，可以使用logout命令或者exit命令来退出当前用户登录，返回到登录前的用户状态。</p>
<p>命令格式：<code>login [命令参数] 参数</code></p>
<p>参数为登录的用户名，可以不输入登录的用户名，直接输入login命令后回车，然后根据提示再输入用户名和密码。</p>
<p>常见命令参数:</p>
<ul>
<li>p：告诉login指令不销毁环境变量；</li>
<li>h：指定远程服务器的主机名。</li>
</ul>
<p>login必须以root权限才能执行，如果是普通用户执行时，需要在命令前加sudo命令来提升权限为root权限。</p>
<p>案例演示:</p>
<ol>
<li>使用login命令来登录系统(文件/etc/nologin不存在)。</li>
</ol>
<p>首先查看当前登录的用户名是parallels。</p>
<p><img src="https://pica.zhimg.com/80/v2-cdc7b7aed2db8158ea6eeb482fcadee0_1440w.png" alt="截屏2022-05-17 21.31.38.png"></p>
<p>使用test    用户来登录系统，然后查看当前登录的用户名。</p>
<p><img src="https://pic2.zhimg.com/80/v2-6f2d3e98f7e8c5ba554d10c47f08be59_1440w.png" alt="截屏2022-05-17 21.33.19.png"></p>
<p>使用logout或者exit命令退出test用户，然后在查看当前登录用户是否为parallels。</p>
<p><img src="https://pic2.zhimg.com/80/v2-6f2d3e98f7e8c5ba554d10c47f08be59_1440w.png" alt="img"></p>
<ol start="2">
<li>使用login命令来登录系统(文件/etc/nologin存在)。</li>
</ol>
<p>首先查看当前登录的用户名是parallels。</p>
<p>在/etc目录下新创建一个nologin文件，使用如下命令创建：</p>
<p><code>sudo touch /etc/nologin</code></p>
<p>发现使用test用户是无法登录系统的，只有使用root用户才能登录系统。</p>
<h3 id="使用su命令切换用户身份">使用su命令切换用户身份</h3>
<p>su命令用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号的密码。</p>
<p>当使用su命令切换用户后，使用exit命令退出当前身份，返回原有登录用户身份。</p>
<p>注：如果当前用户身份是root，则使用su命令切换到其他用户的时候不需要相应用户的密码</p>
<p>命令格式：<code>su [命令参数] 参数</code></p>
<p>参数为登录的用户名，如果没有参数，则默认切换为root用户。</p>
<p>常见命令参数</p>
<ul>
<li>-c&lt;指令&gt;或–command=&lt;指令&gt;：执行完指定的指令后，即恢复原来的身份；</li>
<li>-l或–login：改变身份时，也同时变更工作目录，以及HOME,SHELL,USER,logname。此外，也会变更PATH变量；</li>
<li>-m,-p或–preserve-environment：变更身份时，不要变更环境变量；</li>
<li>s<shell>或–shell=<shell>：指定要执行的shell。</li>
</ul>
<p>su命令所有使用者都可以执行。</p>
<p>案例演示:</p>
<ol>
<li>使用su命令切换当前用户身份(不改变当前工作目录)。</li>
</ol>
<p><img src="https://pic3.zhimg.com/80/v2-a3edb5c1caf53250c70364feb7675c44_1440w.png?source=d16d100b" alt="img"></p>
<ol start="2">
<li>使用su命令切换当前用户身份(改变当前工作目录)。</li>
</ol>
<p><img src="https://pica.zhimg.com/80/v2-4b268df03f89c301fb2afb2a601e452e_1440w.png" alt="img"></p>
<ol start="3">
<li>利用-c命令参数实现执行完毕相应的命令立马返回当前用户</li>
</ol>
<p><img src="https://pic1.zhimg.com/80/v2-6e1cc71d9b639a1f76c2198e24599a4e_1440w.png?source=d16d100b" alt="img"><br>
或者如下也行<br>
<img src="https://pic2.zhimg.com/80/v2-ed4d916345d18f5d708fcdb476eeca75_1440w.png" alt="截屏2022-05-17 21.54.57.png"></p>
<h1 id="linux之文件-目录搜索">Linux之文件/目录搜索</h1>
<h2 id="查询命令-locate">查询命令-locate</h2>
<p><code>locate</code>命令用来查找文件或目录。</p>
<p>locate命令要比其他查找文件命令（例如:find）快得多，原因在于它不搜索具体目录，而是搜索一个数据库<code>/var/lib/mlocate/mlocate.db</code></p>
<p><code>/var/lib/mlocate/mlocate.db</code>这个数据库中含有本地所有文件信息。Linux 系统自动创建这个数据库，并且每天自动更新一次，因此，我们在用locate查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>
<p>locate具体命令如下：</p>
<p><code>locate　命令参数　文件/目录</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-c, --count            只输出找到的数量；</li>
<li>-d, --database DBPATH  使用DBPATH指定的数据库，而不是默认数据库/var/lib/mlocate/mlocate.db；</li>
<li>-i, --ignore-case      忽略大小写；</li>
<li>-q, --quiet            安静模式，不会显示任何错误讯息；</li>
<li>-e, --existing         只显示当前存在的文件条目；</li>
</ul>
<p>案例演示：</p>
<ol>
<li>搜索etc目录下以pass开头的文件或目录，具体使用如下命令：</li>
</ol>
<p><code>locate /etc/pass</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo updatedb</span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ locate /etc/pass</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br></pre></td></tr></table></figure>
<p>因为updatedb需要root权限，这里需要使用sudo</p>
<ol start="2">
<li>搜索包含passwd字母的文件或目录总个数，具体使用如下命令：</li>
</ol>
<p><code>locate -c passwd</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ locate -c passwd</span><br><span class="line">176</span><br></pre></td></tr></table></figure>
<p><code>updatedb</code></p>
<p>updatedb命令用来创建或更新locate命令所必需的数据库文件。</p>
<p>updatedb命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入locate数据库文件中。</p>
<p>具体命令如下：</p>
<p><code>updatedb　命令参数</code></p>
<p>常用参数如下：</p>
<ul>
<li>-o&lt;文件&gt;：忽略默认的数据库文件，使用指定的slocate数据库文件；</li>
<li>-U&lt;目录&gt;：更新指定目录的slocate数据库；</li>
<li>-v：显示执行的详细过程;</li>
</ul>
<p>案例演示：</p>
<ol>
<li>新创建一个testFile文件，更新locate数据库后使用locate命令定位该文件，具体使用如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch testFile</span><br><span class="line">locate testFile</span><br><span class="line">sudo updatedb</span><br><span class="line">locate testFile</span><br></pre></td></tr></table></figure>
<p>执行情况如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#更新之前</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ touch testFile;locate testFile</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ </span><br><span class="line">#更新数据库之后                                            </span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ sudo updatedb</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ locate testFile </span><br><span class="line">/home/kali/trial/testFile</span><br></pre></td></tr></table></figure>
<p>可以看到新创建文件后直接使用locate去查找是没有任何结果的，只有更新数据库后才能查找到新创建的文件。</p>
<ol start="2">
<li>删除testFile文件，更新locate数据库后使用locate命令定位该文件，具体使用如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm testFile</span><br><span class="line">locate testFile</span><br><span class="line">sudo updatedb -U ./</span><br><span class="line">locate testFile</span><br></pre></td></tr></table></figure>
<p>执行情况如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ rm testFile</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ locate testFile</span><br><span class="line">/home/kali/trial/testFile</span><br><span class="line">#更新数据库之后</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ sudo updatedb -U /home/kali/trial </span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$ locate testFile</span><br><span class="line">┌──(kali㉿kali)-[~/trial]</span><br><span class="line">└─$</span><br></pre></td></tr></table></figure>
<p>第三条updatedb命令使用了-U参数，只更新testFile所在目录的数据库，这样速度比较快，如果不使用该参数，则会更新整个文件系统的内容，速度就会比较慢。</p>
<p>删除文件后直接使用locate去查找可以定位到的，原因是没有马上更新数据库，数据库里面仍然有“过时”的信息。</p>
<h2 id="查询命令-which-whereis">查询命令-which/whereis</h2>
<p>which命令主要是用来查找系统==PATH目录下的可执行文件==，说白了就是查找那些我们已经安装好的可以直接执行的命令。</p>
<p>whereis命令可以用来查找==二进制（命令）、源文件、man文件==。与which不同的是这条命令可以是通过文件索引数据库而非PATH来查找的，所以查找的面比which要广。</p>
<h3 id="which">which</h3>
<p>which命令用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
<p>which是shell内建命令，内建命令要比系统论命令有比较高的执行效率。</p>
<p>具体命令如下：</p>
<p><code>which　命令</code></p>
<p>案例演示：</p>
<p>使用which命令定位passwd命令的位置，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which passwd</span><br></pre></td></tr></table></figure>
<p>执行情况如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ which passwd</span><br><span class="line">/usr/bin/passwd</span><br></pre></td></tr></table></figure>
<p>可以看到passwd命令是存放在/usr/bin目录下。</p>
<h3 id="whereis">whereis</h3>
<p>whereis命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。</p>
<p>具体命令如下：</p>
<p>whereis　命令参数　文件名</p>
<p>常用命令参数如下：</p>
<ul>
<li>-b：只查找二进制文件；</li>
<li>-B&lt;目录&gt;：只在设置的目录下查找二进制文件；</li>
<li>-m：只查找说明文件；</li>
<li>-M&lt;目录&gt;：只在设置的目录下查找说明文件；</li>
<li>-s：只查找原始代码文件；</li>
<li>-S&lt;目录&gt;只在设置的目录下查找原始代码文件；</li>
</ul>
<p>案例演示：</p>
<ol>
<li>使用whereis命令查找passwd命令所有信息，包括二进制文件位置、说明文件位置和源码文件位置，具体使用如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis passwd</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ whereis passwd   </span><br><span class="line">passwd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1ssl.gz /usr/share/man/man1/passwd.1.gz /usr/share/man/man5/passwd.5.gz</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用whereis命令仅查找passwd命令二进制文件位置，具体使用如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis -b passwd</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ whereis -b passwd </span><br><span class="line">passwd: /usr/bin/passwd /etc/passwd</span><br></pre></td></tr></table></figure>
<p>可以看到passwd命令存在的位置有两处，分别是/usr/bin/passwd和/usr/bin/X11/passwd，那么在我们执行passwd时，如何确定是执行的哪一个，此时我们就可以使用which命令来定位首先被执行的命令位置。</p>
<h2 id="查询命令-find">查询命令-find</h2>
<p>find命令与locate命令相比各有优劣，locate命令的查找速度比find命令快的多，但是无法查找最新添加的文件/目录以及会查找出来已经过期的文件/目录。</p>
<p>相find命令可以按照自定义的方法查找任何文件，功能比较强大。缺点就是查询速度比较慢，因为它会通过遍历硬盘来查找。通常我们会使用find命令，相较于它提供的强大的搜索能力而言，多花费的些微时间不值一提。</p>
<p>find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<p>具体命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find　查找目录　查找参数　查找内容</span><br></pre></td></tr></table></figure>
<p>常用查找参数如下：</p>
<ul>
<li>-amin&lt;+|-分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</li>
<li>-atime&lt;+|-24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</li>
<li>-cmin&lt;+|-分钟&gt;：查找在指定时间之时被更改过的文件或目录；</li>
<li>-ctime&lt;+|-24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</li>
<li>-mmin&lt;+|-分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</li>
<li>-mtime&lt;+|-24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</li>
<li>-depth：从指定目录下最深层的子目录开始查找；</li>
<li>-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</li>
<li>-follow：排除符号连接；</li>
<li>-gid&lt;群组识别码&gt;：查找符合指定群组识别码的文件或目录；</li>
<li>-group&lt;群组名称&gt;：查找符合指定群组名称的文件或目录；</li>
<li>-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</li>
<li>-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</li>
<li>-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</li>
<li>-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</li>
<li>-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</li>
<li>-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</li>
<li>-size&lt;+|-|=文件大小&gt;：查找符合指定的文件大小的文件；</li>
<li>-type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</li>
<li>-a：是前后条件都要满足；</li>
<li>-o ：是满足一个条件就好；</li>
<li>+：表示大于设置值的文件；</li>
<li>
<ul>
<li>：表示小于设置值的文件；</li>
</ul>
</li>
<li>= ：表示等于设置值的文件；</li>
</ul>
<p>案例演示1：</p>
<p>查找/etc目录下以update开头以.conf结尾的文件或目录，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -name &quot;update*.conf&quot;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -name &quot;update*.conf&quot;</span><br><span class="line">/etc/initramfs-tools/update-initramfs.conf</span><br><span class="line">/etc/updatedb.conf</span><br></pre></td></tr></table></figure>
<p>*表示任意字母。这里使用的是正则表达式，正则表达式可以检索、替换那些符合某个模式或规则的文本，非常强大。有兴趣的同学可以了解一下。</p>
<p>案例演示2：</p>
<p>查找/etc目录下在超过7天前被访问的文件或目录，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -atime +7</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -atime +7</span><br><span class="line">/etc/king-phisher/server_config.yml</span><br><span class="line">/etc/postgresql/14/main/environment</span><br><span class="line">/etc/postgresql/14/main/pg_ctl.conf</span><br><span class="line">/etc/postgresql/14/main/postgresql.conf</span><br><span class="line">/etc/postgresql/14/main/pg_hba.conf</span><br><span class="line">/etc/postgresql/14/main/pg_ident.conf</span><br><span class="line">/etc/geoclue/geoclue.conf</span><br></pre></td></tr></table></figure>
<p>案例演示3：</p>
<p>查找/etc目录下恰好在7天前被访问的文件或目录，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -atime 7</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -atime 7 </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$</span><br></pre></td></tr></table></figure>
<p>案例演示4：</p>
<p>查找/etc目录下在5分钟内被访问的文件或目录，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -amin -5</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[/etc]</span><br><span class="line">└─$ sudo find /etc -amin -20</span><br><span class="line">/etc/king-phisher</span><br><span class="line">/etc/postgresql/14/main</span><br><span class="line">/etc/postgresql/14/main/conf.d</span><br><span class="line">/etc/geoclue</span><br></pre></td></tr></table></figure>
<h3 id="type-文件类型使用方法">-type 文件类型使用方法</h3>
<p>常见文件类型：</p>
<ul>
<li>f：普通文件</li>
<li>l：符号链接</li>
<li>d：目录</li>
<li>c：字符设备</li>
<li>b：块设备</li>
<li>s：套接字</li>
<li>p：Fifo</li>
</ul>
<p>案例演示：</p>
<p>查找/etc目录下以my开头的目录，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -name &quot;my*&quot; -a -type d</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -name &quot;my*&quot; -a -type d   </span><br><span class="line">/etc/mysql</span><br></pre></td></tr></table></figure>
<h3 id="size-文件大小-使用方法">size &lt;+|-|=文件大小&gt;使用方法</h3>
<p>常见文件大小单位：</p>
<ul>
<li>b —— 块（512字节）</li>
<li>c —— 字节</li>
<li>w —— 字（2字节）</li>
<li>k —— 千字节</li>
<li>M —— 兆字节</li>
<li>G —— 吉字节</li>
</ul>
<p>案例演示：</p>
<p>查找/etc目录下大于1M的文件，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -size +1M</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -size +1M </span><br><span class="line">/etc/theHarvester/wordlists/dns-big.txt</span><br></pre></td></tr></table></figure>
<h3 id="exec使用方法"><code>-exec</code>使用方法</h3>
<p>具体使用方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find　…　-exec 要执行的命令  &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>-exec选项后面跟随着所要执行的命令或脚本，然后是一个空格一对儿{}一个空格和一个;。</p>
<p>注意：要执行的命令和{之间以及}与;之间的空格是不能省略的。</p>
<p>案例演示：</p>
<p>查找/etc目录下大于1M的文件/目录的详细信息，具体使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find /etc -size +1M -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo find /etc -size +1M -exec ls -l &#123;&#125; \;</span><br><span class="line">-rw-r--r-- 1 root root 1115633 Nov 25 12:42 /etc/theHarvester/wordlists/dns-big.txt</span><br></pre></td></tr></table></figure>
<h1 id="linux之文件打包和解压缩">Linux之文件打包和解压缩</h1>
<h2 id="打包和压缩的区别">打包和压缩的区别</h2>
<p>文件打包，有可能仅仅是将多个文件连接成1个文件，并不进行压缩处理。有时候也可能看起来文件变小，那是因为多个文件储存可能造成多余的空间浪费，究其原因是文件储存方式中，分块族造成的。1个族1次只能被1个文件使用，虽然1个文件能使用多个族，但最后1个族未必能填满。因此，大量的文件就会造成很多浪费。而连接成1个文件后，只会浪费1个族。压缩就不一样了，它不但把文件连在一起，还进行特定算法的压缩。对于txt这类很“松”的文件，可以大大减小文件的大小</p>
<h2 id="tar打包命令">tar打包命令</h2>
<p>tar（tape archive的简写）工具可完成许多功能，其名称源于它的原始功能－创建和读取归档文件和备份磁带。如今，该工具常用来将多个文件或多个目录打包成一个tar文件，或者将某个tar文件分解开。</p>
<p>打包:<br>
tar命令可以将多个文件/目录进行打包，将多个文件生成一个文件，生成的文件后缀为.tar。</p>
<p>具体的打包命令为:<br>
<code>tar -cvf 生成的tar包名 要打包的文件或者是目录</code></p>
<p>常用的参数命令：</p>
<ul>
<li>-c 建立新的归档文件</li>
<li>-v 处理过程中输出相关信息</li>
<li>-f 对普通文件操作</li>
</ul>
<p>解包：<br>
tar命令可以将已经打包好的文件解压出来。</p>
<p>具体解包命令如下:<br>
<code>tar　-xvf　解压包名 -C 解压到指定目录</code></p>
<p>常用的参数：</p>
<ul>
<li>-x 或 --ext\fract 或 --get：从备份文件中还原文件</li>
<li>-v 处理过程中输出相关信息</li>
<li>-f 对普通文件进行操作</li>
<li>-C &lt;目标路径&gt; 切换到指定的目录</li>
</ul>
<p>ps:如果不使用-C(大写)参数，则默认解压到当前目录下。</p>
<h2 id="文件压缩命令">文件压缩命令</h2>
<p>Linux下存在多个文件压缩工具，常用的有bzip2、gzip和zip。这三个工具都是可以将一个文件进行压缩操作，使其在不丢失任何信息的情况下占用较少的磁盘空间<br>
对于多文件/目录的压缩操作分为两步：</p>
<ol>
<li>将其进行打包</li>
<li>将打包过后的文件进行压缩操作。</li>
</ol>
<h3 id="bzip2">bzip2</h3>
<p>bzip2命令用于创建和管理（包括解压缩）.bz2格式的压缩包。</p>
<p>具体命令如下：<br>
<code>bzip2　命令参数　指定要压缩的文件</code></p>
<ul>
<li>-z或–compress：强制执行压缩；</li>
<li>-d或–decompress：执行解压缩；</li>
<li>-f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；</li>
<li>-v或–verbose：压缩或解压缩文件时，显示详细的信息；</li>
</ul>
<p><img src="https://pic3.zhimg.com/80/v2-b42ce538c7788075a09af03c46919de7_1440w.png" alt="img"></p>
<h3 id="gzip">gzip</h3>
<p>gzip命令用于创建和管理（包括解压缩）.gz格式的压缩包。</p>
<p>具体命令如下：<br>
<code>gzip　命令参数　指定要压缩的文件</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-d或–decompress或----uncompress：解开压缩文件；</li>
<li>-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</li>
<li>-l或——list：列出压缩文件的相关信息；</li>
<li>-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</li>
<li>-v或——verbose：显示指令执行过程；</li>
</ul>
<p><img src="https://pic3.zhimg.com/80/v2-41a8bf0cbf36afa1df267e3de583f83f_1440w.png" alt="img"></p>
<h3 id="zip">zip</h3>
<p>zip命令对文件进行打包操作。zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有.zip扩展名的压缩文件。</p>
<p>具体命令如下：<br>
<code>zip　命令参数　指定生成的压缩文件名　要被压缩的文件/目录列表</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-d：从压缩文件内删除指定的文件；</li>
<li>-q：不显示指令执行过程；</li>
<li>-r：递归处理，将指定目录下的所有文件和子目录一并处理；</li>
<li>-v：显示指令执行过程或显示版本信息；</li>
<li>-u：更换较新的文件到压缩文件内；</li>
<li>-x&lt;范本样式&gt;：压缩时排除符合条件的文件；</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-9dd464d71df248e65262a1f214bc09e7_1440w.png" alt="img"></p>
<h3 id="tar命令进行压缩">tar命令进行压缩</h3>
<p>可以使用tar命令一步就实现对多文件/目录进行压缩操作。</p>
<h4 id="采用bzip2方式执行tar命令进行压缩">采用bzip2方式执行tar命令进行压缩</h4>
<p>具体命令如下：<br>
<code>tar -jcvf　指定生成的压缩文件名　要被压缩的文件/目录列表</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-c 建立新的归档文件；</li>
<li>-v 处理过程中输出相关信息；</li>
<li>-f 对普通文件操作；</li>
<li>-j 以bzip2对文件/目录进行压缩；</li>
</ul>
<p><img src="https://pic1.zhimg.com/80/v2-8aaf0456c7efac96190cfb060d770eeb_1440w.png" alt="img"></p>
<h4 id="采用gzip进行压缩">采用gzip进行压缩</h4>
<p>具体命令如下：<br>
<code>tar　-zcvf　指定生成的压缩文件名　要被压缩的文件/目录列表</code></p>
<p>常用命令参数如下：</p>
<p>-c 建立新的归档文件；<br>
-v 处理过程中输出相关信息；<br>
-f 对普通文件操作；<br>
-z 以gzip对文件/目录进行压缩；</p>
<p><img src="https://pica.zhimg.com/80/v2-02c04e92a06377ae24a04f9370c1ce16_1440w.png" alt="img"></p>
<h2 id="文件解压缩命令">文件解压缩命令</h2>
<p>针对bzip2、gzip和zip这三种压缩工具生成的压缩包，我们可以使用bunzip2、gunzip和unzip命令对其进行解压缩。</p>
<h3 id="bunzip2">bunzip2</h3>
<p>bunzip2命令解压缩由bzip2指令创建的.bz2压缩包。使用bzip2 -d命令也可以将.bz2压缩包进行解压。</p>
<p>具体命令如下：<br>
<code>bunzip2　命令参数　指定要解压的文件</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-f或–force：解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件；</li>
<li>-k或–keep：在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数；</li>
<li>-v或–verbose：解压缩文件时，显示详细的信息；</li>
</ul>
<h3 id="gunzip">gunzip</h3>
<p>gunzip命令解压缩由gzip指令创建的.gz压缩包。使用gzip -d命令也可以将.gz压缩包进行解压。</p>
<p>具体命令如下：<br>
<code>gunzip　命令参数　指定要解压的文件</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</li>
<li>-l或-list：列出压缩文件的相关信息；</li>
<li>-q或-quiet：不显示警告信息；</li>
<li>-r或-recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</li>
<li>-v或-verbose：显示指令执行过程；</li>
</ul>
<h3 id="unzip">unzip</h3>
<p>unzip命令用于解压缩由zip命令压缩的.zip压缩包。</p>
<p>具体命令如下：<br>
<code>unzip　命令参数　指定要解压的文件</code></p>
<p>常用命令参数如下：</p>
<ul>
<li>-q：执行时不显示任何信息；</li>
<li>-n：解压缩时不要覆盖原有的文件；</li>
<li>-d&lt;目录&gt;：指定文件解压缩后所要存储的目录；</li>
</ul>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>CS工具</tag>
        <tag>linux基础</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>我们应当去往何处？</title>
    <url>/2022/10/11/%E6%88%91%E4%BB%AC%E5%BA%94%E5%BD%93%E5%8E%BB%E5%BE%80%E4%BD%95%E5%A4%84%EF%BC%9F/</url>
    <content><![CDATA[<p>已经许久没更新过自己的博客了，或许也是因为这忙碌的生活导致自己无暇顾及。开学后的一个半月里，终于在昨天，迎来了自己本学期的第一次破防，我决定在今天去写一些东西，希望能够记录乃至帮助自己走出自己像轮子一般的生活。</p>
<p>我从未想到过我的大学竟然可以这么累，我现在甚至不知道自己忙碌的意义在哪里，数不清的任务，还有数不清的需要去做的事儿，还有忙着跟npy争辩。我的生活给我的感觉就像是完成一项项的任务，完成了任务就能稍微舒服点了，然后紧接着别的任务来了，我又得忙碌了，做不完心里就不踏实。试问，这样的生活真的有意思么？看着别人的大学生活，我很羡慕，能有三五好友漫步谈心，干饭喝酒，这样的生活我也想要。但是我的学校给我的感觉就是，不学你就得死，众多的傻x课程，包括无聊至极的思政课，无脑夸无脑鼓吹，你当我是tmd小学生呢。还不能选自己想要的课程，这样的课程体系还停留在上个世纪，能不能有点进步性的改革，当成高中生来教。</p>
<p>当然，说这些的一切前提还是我并不是一个摆子，我也不想摆，但是也不想卷，只想学自己想学的，要考试的课程复习复习就完事儿了，我也不想去下很大的功夫去刷题考高分，但是总有这么一群人喜欢干这种事儿，譬如那个奖学金答辩就是，甲醛为王，答辩走个过场，你分数是啥，你就是啥奖，那你就别说综合评定占比多少多少，名额大概率也是分配好的，平衡嘛，我懂。</p>
<p>喷完了，舒服！但是生活还得继续，我希望自己的生活能够更加的丰富，改变盲目内卷的状态，find your own path！面对着清晨的第一缕阳光，我发现我仍然是那个自信阳光正能量的李翔！</p>
<p>我的目标是星辰大海，我必将远航！</p>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>个人反思</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影</title>
    <url>/2022/06/01/%E6%91%84%E5%BD%B1/</url>
    <content><![CDATA[<h3 id="分享一些自己的拍摄照片">分享一些自己的拍摄照片</h3>
<p><img src="https://pic2.zhimg.com/80/v2-880f14a452020c4bc2960951c42b20f1_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<span id="more"></span>
<p><img src="https://pic1.zhimg.com/80/v2-a0f11cbb7953ba01a890c23e3be6c63f_1440w.jpeg" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-9649a908558db3a70a77ae9e1fb8d33a_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pica.zhimg.com/80/v2-717a3602b5c57865874b88f563cee104_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic2.zhimg.com/80/v2-319e56149a37bb79ebf398313ee0ef8a_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-d4104a182c25846d796f9334e94d860c_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pica.zhimg.com/80/v2-35c2028c96d3af9820616de6388003f4_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-def6aca439de3567dfd35065ee0e61e7_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-ac2fd89cd4fa0896b54d2b6a20b66486_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic2.zhimg.com/80/v2-eaff4c547270c0b99608f71874ebc9a5_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pica.zhimg.com/80/v2-3e75354556b09d68ea7385b9c5610748_1440w.png?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-64aae8ff73271c57cab8a5c79b7b29db_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pica.zhimg.com/80/v2-648b81c8736de915dc8bc2e4c0385f8b_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-ea5211faa3dd7dfaed9a64bd645866a3_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-e6e138d6ab805a903e7ad780a0c4fff1_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-835481f1de4157b12dfc740d54378618_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-a90e6cd32db008c98c24a931b83e1dd1_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-1b4264e392f1b8337c353a01adf72601_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic3.zhimg.com/80/v2-4ce7490f09c5f2f2909cdbad626b9308_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-5a3bfbbb36571fecb58251160155c7fb_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
<p><img src="https://pic1.zhimg.com/80/v2-bf9de49eb26f598c9af619bd40a3bdfc_1440w.jpeg?source=d16d100b" alt="夕阳"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>美景</tag>
      </tags>
  </entry>
  <entry>
    <title>杭州游记</title>
    <url>/2023/05/03/%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>五一假期，我和几个好兄弟决定去有着“上有天堂，下有苏杭”美誉的杭州走走看看，正好也是许久不见相聚的好机会，于是五一一到，我们整装待发，从各个省份城市，共同奔赴杭州。</p>
<h3 id="4-30">4.30</h3>
<p>早上跟乐哥碰头，从武汉站出发历经4个半小时到达杭州东站，见到非爷在酒店楼下等我们，然后摆了俩小时聊天，去浙大华家池校区，被残忍的拒之门外，我好说歹说也不让进，我们几个只得绕着浙大走了一圈，也算是到过了浙大，得知陶神也到了我们几个赶忙回酒店迎接，没想到陶神从我们后面窜了出来，得陶神因为有事儿只能来一晚上，然后我们一起吃饭、喝酒，最重要的还是夸天，回到酒店就开卷，搞各种东西，非爷卷图形学和人智导，我等只能在旁仰望，欢声笑语罢，我们上床进入梦乡，结束了这四人团聚的一天。（这次有俩人没赶上高铁，我不说是谁）</p>
<h3 id="5-1">5.1</h3>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型程序设计与C++标准模版库（STL）</title>
    <url>/2022/08/04/%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8EC-%E6%A0%87%E5%87%86%E6%A8%A1%E7%89%88%E5%BA%93%EF%BC%88STL%EF%BC%89/</url>
    <content><![CDATA[<p>上来先来两篇文章作为参考：<br>
<a href="https://blog.csdn.net/weixin_61907955/article/details/123855928">STL函数大全</a><br>
<a href="https://blog.csdn.net/weixin_41969690/article/details/106648441">什么是STL？</a></p>
<h1 id="泛型程序设计及stl结构">泛型程序设计及STL结构</h1>
<h2 id="泛性程序设计的基本概念">泛性程序设计的基本概念</h2>
<p>即指编写<strong>不依赖具体数据类型</strong>的程序，模板是泛性程序设计的主要工具。</p>
<p>术语：概念</p>
<p>用来界定具备一定功能的数据类型。例如:</p>
<ul>
<li>将“可以比大小的所有数据类型(有比较运算符)”这一概念记为Comparable</li>
<li>将“具有公有的复制构造函数并可以用‘=’赋值的数据类型”这一概念 记为Assignable</li>
<li>将“可以比大小、具有公有的复制构造函数并可以用‘=’赋值的所有数 据类型”这个概念记作Sortable。</li>
</ul>
<p>对于两个不同的概念A和B，如果概念A所需求的所有功能也是概念B所需求的功能，那么就说概念B是概念A的子概念。例如:</p>
<ul>
<li>Sortable既是Comparable的子概念，也是Assignable的子概念</li>
</ul>
<blockquote>
<p>其实这个子概念和基类派生的子类意思差不多。</p>
</blockquote>
<p>术语：模型</p>
<p>模型（model）：符合一个概念的数据类型称为该概念的模型</p>
<ul>
<li>int型是Comparable概念的模型；</li>
<li>静态数组类型不是Assignable概念的类型（静态数组不可赋值）。</li>
</ul>
<p>用概念做模板参数名</p>
<ul>
<li>很多STL的实现代码就是使用概念来命名模板参数的。</li>
<li>为概念赋予一个名称，并使用该名称作为模板参数名。</li>
</ul>
<p>例如：<br>
表示insertionSort这样一个函数模板的原型:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Sortable</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(Sortable a[], <span class="type">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="stl简介">STL简介</h1>
<p><strong>标准模版库</strong>提供了一些非常常用的数据结构和算法。</p>
<p>STL的基本组件：</p>
<ul>
<li>容器（container）</li>
<li>迭代器（iterator）</li>
<li>函数对象（function object）</li>
<li>算法（algorithms）</li>
</ul>
<p>基本的关系：</p>
<ul>
<li>Iterator（迭代器）是算法和容器的桥梁。将迭代器作为算法的参数、通过迭代器来访问容器而不是把容器直接作为算法的参数；</li>
<li>将函数对象作为算法的参数而不是将函数所执行的运算作为算法的一部分。</li>
</ul>
<p>关系图：</p>
<p><img src="https://pic4.zhimg.com/80/v2-277324313f500492215f4604944da7fb_1440w.png" alt=""></p>
<h2 id="stl的基本组件-容器-container">STL的基本组件—容器（container）</h2>
<p>容器是容纳一组元素的对象，容器类库包含七种基本容器：向量（vector）、双端队列（deque）、列表（list）、集合（set）、多重集合（multiset）、map（映射）和多重映射（multimap）。</p>
<ul>
<li>顺序容器：array，vector，deque，forward_list（单链表）、list（列表，底层是双向链表） ；</li>
<li>有序关联容器：set、multiset、map、multimap；</li>
<li>无序关联容器：unordered_set、unordered_multiset、unordered_map、unordered_mutimap。</li>
</ul>
<p>容器适配器：stack、queue、priority_queue（优先队列，底层是最大或最小二叉堆）</p>
<div class="note info flat"><p>使用容器，需要包含对应的头文件。</p>
</div>
<h2 id="stl的基本组件-迭代器-iterator">STL的基本组件—迭代器（iterator）</h2>
<ul>
<li>迭代器是泛化的指针，提供了顺序访问容器中每个元素的方法；</li>
<li>提供了顺序访问容器中每个元素的方法；</li>
<li>可以使用“++”运算符来获得指向下一个元素的迭代器；</li>
<li>可以使用“*”运算符访问一个迭代器所指向的元素，如果元素类型是类或结构体，还可以使用“-&gt;”运算符直接访问该元素的一个成员；</li>
<li>有些迭代器还支持通过“–”运算符获得指向上一个元素的迭代器；</li>
<li>迭代器是泛化的指针：指针也具有同样的特性，因此指针本身就是一种迭代器；</li>
<li>使用独立于STL容器的迭代器，需要包含头文件<code>&lt;iterator&gt;</code>。</li>
</ul>
<h2 id="stl的基本组件-函数对象-function-object">STL的基本组件—函数对象（function object）</h2>
<ul>
<li>一个行为类似函数的对象，对它可以像调用函数一样调用。</li>
<li>函数对象是泛化的函数：任何普通的函数和任何重载了“()” 运算符的类的对象都可以作为函数对象使用。</li>
<li>使用STL的函数对象，需要包含头文件<code>&lt;functional&gt;</code>。</li>
</ul>
<h2 id="stl的基本组件-算法-algorithms">STL的基本组件—算法（algorithms）</h2>
<ul>
<li>STL包括70多个算法,例如：排序算法，消除算法，计数算法，比较算法，变换算法，置换算法和容器管理等;</li>
<li>可以广泛用于不同的对象和内置的数据类型;</li>
<li>使用STL的算法，需要包含头文件<code>&lt;algorithm&gt;</code>。</li>
</ul>
<h3 id="算法举例-transform算法">算法举例—transform算法</h3>
<p>transform算法顺序遍历first和last两个迭代器所指向的元素；</p>
<ul>
<li>将每个元素的值作为函数对象op的参数；</li>
<li>将op的返回值通过迭代器result顺序输出；</li>
<li>遍历完成后result迭代器指向的是输出的最后一个元素的下一个位置，transform会将该迭代器返回。</li>
</ul>
<p>例如，以下可以是transform算法的一种实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>, <span class="keyword">class</span> <span class="title class_">UnaryFunction</span>&gt;</span><br><span class="line"><span class="function">OutputIterator <span class="title">transform</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (;first != last; ++first, ++result) </span><br><span class="line">		&#123;</span><br><span class="line">			*result = <span class="built_in">op</span>(*first);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从标准输入读入几个整数，存入向量容器，输出相反数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout,<span class="string">&quot; &quot;</span>),<span class="built_in">negate</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="迭代器">迭代器</h1>
<p>迭代器是算法和容器的桥梁：</p>
<ul>
<li>迭代器用作访问容器中的元素</li>
<li>算法不直接操作容器中的数据，而是通过迭代器间接操作</li>
</ul>
<p>算法和容器独立：</p>
<ul>
<li>增加新的算法，无需影响容器的实现</li>
<li>增加新的容器，原有的算法也能适用</li>
</ul>
<h2 id="输入流迭代器和输出流迭代器">输入流迭代器和输出流迭代器</h2>
<p>输入流迭代器</p>
<ul>
<li><code>stream_iterator&lt;T&gt;</code></li>
<li>以输入流(如cin)为参数构造</li>
<li>可用*(p++)获得下一个输入的元素<br>
输出流迭代器</li>
<li><code>ostream_iterator&lt;T&gt;</code></li>
<li>构造时需要提供输出流(如cout)</li>
<li>可用(*p++) = x将x输出到输出流</li>
</ul>
<p>二者都属于适配器</p>
<ul>
<li>适配器是用来为已有对象提供新的接口的对象</li>
<li>输入流适配器和输出流适配器为流对象提供了迭代器的接口</li>
</ul>
<p>程序实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从标准输入读入几个实数，分别输出他们的平方</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">square</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">transform</span>(<span class="built_in">istream_iterator</span>&lt;<span class="type">double</span>&gt;(cin),<span class="built_in">istream_iterator</span>&lt;<span class="type">double</span>&gt;(),<span class="built_in">ostream_iterator</span>&lt;<span class="type">double</span>&gt;(cout,<span class="string">&quot;\t&quot;</span>),square);</span><br><span class="line">    <span class="comment">//istream_iterator&lt;double&gt;()调用了输入流迭代器的默认构造函数，使之指向的是输入流的结束位置。</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//你如果不手动终止程序，程序会一直运行下去，因为输入流一直在等待你的输入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="迭代器的分类">迭代器的分类</h2>
<p>根据访问的方式分类：<br>
<img src="https://img-blog.csdnimg.cn/20200609192939833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTk2OTY5MA==,size_16,color_FFFFFF,t_70" alt="Fetching Title#2j8d"></p>
<p>关系图：<br>
<img src="https://pica.zhimg.com/80/v2-9cb5c611c9ab48c561a010de1208c150_1440w.png" alt=""></p>
<p>根据操作类型分类：<br>
<img src="https://img-blog.csdnimg.cn/20200609192955690.png" alt=""></p>
<h2 id="迭代器的区间">迭代器的区间</h2>
<ul>
<li>两个迭代器表示一个区间:[p1, p2)，区间包含p1，但不包含p2；</li>
<li>STL算法常以迭代器的区间作为输入，传递输入数据；</li>
<li>合法的区间：p1经过n次(n &gt; 0)自增(++)操作后满足p1 == p2。</li>
</ul>
<p>程序实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//综合运用集中迭代器的实例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;T&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (first != last)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">push_back</span>(*first);</span><br><span class="line">        first++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()); <span class="comment">//sort参数必须是随机访问迭代器</span></span><br><span class="line">    <span class="built_in">copy</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a[<span class="number">5</span>] = &#123;<span class="number">1.2</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">3.3</span>, <span class="number">3.2</span>&#125;;</span><br><span class="line">    <span class="comment">//对已知数组排序</span></span><br><span class="line">    <span class="built_in">mySort</span>&lt;<span class="type">double</span>&gt;(a, a + <span class="number">5</span>, <span class="built_in">ostream_iterator</span>&lt;<span class="type">double</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//从标准输入读入若干整数，排序后的结果输出</span></span><br><span class="line">    <span class="built_in">mySort</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(cin), <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="迭代器的辅助函数">迭代器的辅助函数</h2>
<ul>
<li>advance(p,n)：对p执行n次自增操作</li>
<li>distance(first,last)：计算两个迭代器first和last的距离</li>
</ul>
<h1 id="容器">容器</h1>
<h2 id="容器的基本功能与分类">容器的基本功能与分类</h2>
<p><img src="https://pica.zhimg.com/80/v2-015ee01d628fdd4ee76acf4213a6d583_1440w.png" alt=""></p>
<p>容器的通用功能</p>
<ul>
<li>用默认构造函数构造空容器</li>
<li>支持关系运算符：==、!=、&lt;、&lt;=、&gt;、&gt;=</li>
<li>begin()、end()：获得容器首、尾迭代器(<strong>其实指向的是容器尾元素的下一个元素</strong>)</li>
<li>cbegin() 、cend()：获取容器首、尾常迭代器，不需要改变容器时更加安全</li>
<li>clear()：将容器清空</li>
<li>empty()：判断容器是否为空</li>
<li>size()：得到容器元素个数</li>
<li>s1.swap(s2)：将s1和s2两容器内容交换</li>
</ul>
<p>相关数据类型(S表示容器类型)</p>
<ul>
<li>S::iterator：指向容器元素的迭代器类型</li>
<li>S::const_iterator：常迭代器类型</li>
</ul>
<p>使用一般容器的begin()/end()，得到的迭代器都是前向迭代器，而可逆容器所提供的迭代器都是双向迭代器。</p>
<div class="note info flat"><p>事实上，STL模版提供的标准容器至少都是可逆容器，但有些非标准的模版库，提供像slist（单向链表）这样仅提供前向迭代器的容器。</p>
</div>
<h3 id="对可逆容器的访问">对可逆容器的访问</h3>
<p>STL为每个可逆容器都提供了逆向迭代器，逆向迭代器可以通过下面的成员函数得到:</p>
<ul>
<li>rbegin() :指向容器尾的逆向迭代器</li>
<li>rend():指向容器首的逆向迭代器</li>
</ul>
<p>逆向迭代器的类型名的表示方式如下(S表示容器类型):</p>
<ul>
<li>S::reverse_iterator:逆向迭代器类型</li>
<li>S::const_reverse_iterator:逆向常迭代器类型</li>
</ul>
<p>逆向迭代器是普通迭代器的适配器，逆向迭代器的++被映射成了前向迭代器的–。</p>
<blockquote>
<p>细节：<br>
一个迭代器和它的逆向迭代器之间可以相互转换。例如：若p1是S::iterator类型的迭代器，则使用表达式S::reverse_iterator(p1)可以得到与p1对应的逆向迭代器；也可以使用base函数得到逆向迭代器对应的那个普通迭代器，如：r1是一个通过S::reverse_iterator(p1)构造的逆向迭代器，那么就有r1.base() == p1。但是r1和p1并不是指向同一个元素的，r1指向的元素总是与p1-1所指向的元素相同。</p>
</blockquote>
<h2 id="顺序容器">顺序容器</h2>
<p>STL中的顺序容器</p>
<ul>
<li>
<p>向量（vector）</p>
</li>
<li>
<p>双端队列（deque）</p>
</li>
<li>
<p>列表（list）</p>
</li>
<li>
<p>单向链表（forward_list）</p>
</li>
<li>
<p>数组（array）</p>
</li>
<li>
<p>元素线性排列，可以随时在指定位置插入元素和删除元素。</p>
</li>
<li>
<p>必须符合Assignable这一概念（即具有公有的复制构造函数并可以<br>
用“=”赋值）。</p>
</li>
<li>
<p>array对象的大小固定，forward_list有特殊的添加和删除操作。</p>
</li>
</ul>
<h3 id="顺序容器的接口">顺序容器的接口</h3>
<div class="note danger flat"><p>不包含单向链表（forward_list）和数组（array）</p>
</div>
<ol>
<li>构造函数
<ul>
<li>列表初始化，如<code>vector&lt;int&gt; arr = &#123;1,4,5,7&#125;;</code></li>
</ul>
</li>
<li>赋值函数
<ul>
<li>assign</li>
</ul>
</li>
<li>插入函数
<ul>
<li><code>insert(iterator pos, const T&amp; v)</code>, 在pos位置插入后，返回新插入元素的迭代器;</li>
<li>push_front(只对list和deque), push_back;</li>
<li>emplace_front、emplace 和 emplace_back，这些操作构造而不是拷贝元素到容器中，这些操作分别对应push_front、insert 和push_back，允许我们将元素放在容器头部、一个指定的位置和容器尾部。</li>
</ul>
</li>
<li>删除函数
<ul>
<li>erase，clear，pop_front(只对list和deque)，pop_back</li>
</ul>
</li>
<li>首尾元素的直接访问
<ul>
<li>front，back</li>
</ul>
</li>
<li>改变大小
<ul>
<li>resize</li>
</ul>
</li>
</ol>
<div class="note success flat"><p>记住对于头部的操作不适合物理地址连续的数据结构。</p>
</div>
<h3 id="向量-vector">向量（vector）</h3>
<p>特点：</p>
<ul>
<li>一个可以扩展的动态数组</li>
<li>随机访问、在尾部插入或删除元素快</li>
<li>在中间或头部插入或删除元素慢</li>
</ul>
<p>向量的容量(capacity)：实际分配空间的大小</p>
<ul>
<li>s.capacity() ：返回当前容量</li>
<li>s.reserve(n)：若容量小于n，则对s进行扩展，使其容量至少为n</li>
<li>s.shrink_to_fit(): 回收未使用的元素空间，即size和capacity函数返回值相等</li>
</ul>
<div class="note danger flat"><p>失效：<br>
如果加入元素使得vector有扩展的话，那么所有的迭代器，指针和引用都会失效，因为内存空间被重新分配了；如果没有扩展，那么只是插入（或删除）的元素之后的迭代器等等会失效（因为元素被移动了）。</p>
</div>
<h3 id="双端队列-deque">双端队列（deque）</h3>
<p>特点</p>
<ul>
<li>在两端插入或删除元素快</li>
<li>在中间插入或删除元素慢</li>
<li>随机访问较快，但比向量容器慢</li>
</ul>
<p>双端队列在很多STL的实现中是一个分段数组，容器中的元素分段的存放在一个个大小固定的数组中，此外容器还需要维护一个存这些分段数组首地址的索引数组，所以双端队列连续是一个假象。</p>
<p><img src="https://img-blog.csdnimg.cn/20190217155302649.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQ2MjIwMg==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190217155302649.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQ2MjIwMg==,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先按照从大到小顺序输出奇数，再按照从小到大顺序输出偶数。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">i1</span><span class="params">(cin)</span>, i2</span>; <span class="comment">//建立一对输入流迭代器,第一个是标准输入的开始，第二个是标准输入的结束</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(i1, i2)</span></span>;            <span class="comment">//通过输入流迭代器从标准输入流中输入数据</span></span><br><span class="line">    <span class="built_in">sort</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>());        <span class="comment">//将输入的整数排序</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">    <span class="comment">//以下循环遍历s1</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator iter = s1.<span class="built_in">begin</span>(); iter != s1.<span class="built_in">end</span>(); ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*iter % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//偶数放到s2尾部</span></span><br><span class="line">            s2.<span class="built_in">push_back</span>(*iter);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//奇数放到s2首部</span></span><br><span class="line">            s2.<span class="built_in">push_front</span>(*iter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将s2的结果输出</span></span><br><span class="line">    <span class="built_in">copy</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="列表-list">列表(list)</h3>
<p>底层逻辑是双向链表。</p>
<p>特点</p>
<ul>
<li>在任意位置插入和删除元素都很快</li>
<li>不支持随机访问</li>
</ul>
<p>接合(splice)操作<code>s1.splice(p, s2, q1, q2)</code>表示将s2中[q1, q2)移动到s1中p所指向元素之前</p>
<h3 id="单向链表-forward-list">单向链表（forward_list）</h3>
<p>特点：</p>
<ul>
<li>单向链表每个结点只有指向下个结点的指针，没有简单的方法来获取一个结点的前驱；</li>
<li>未定义insert、emplace和erase操作，而定义了insert_after、emplace_after和erase_after操作，其参数与list的insert、emplace和erase相同，但并不是插入或删除迭代器p1所指的元素，而是对p1所指元素之后的结点进行操作；</li>
<li>不支持size操作。</li>
</ul>
<h3 id="数组-array">数组（array）</h3>
<p>特点：</p>
<ul>
<li>array是对内置数组的封装，提供了更安全，更方便的使用数组的方式</li>
<li>array的对象的大小是固定的，定义时除了需要指定元素类型，还需要指定容器大小。</li>
<li>不能动态地改变容器大小</li>
</ul>
<p><img src="https://picx.zhimg.com/80/v2-ea9110203c1e89cfaac565d2c3356953_1440w.jpeg" alt=""></p>
<h2 id="顺序容器的插入迭代器与适配器">顺序容器的插入迭代器与适配器</h2>
<h3 id="顺序容器的插入迭代器">顺序容器的插入迭代器</h3>
<p>概念：用于向容器头部、尾部或中间指定位置插入元素的迭代器，包括前插迭代器（front_inserter）、后插迭代器（back_insrter）和任意位置插入迭代器（inserter）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function">back_inserter <span class="title">iter</span><span class="params">(s)</span></span>;</span><br><span class="line">*(iter++) = <span class="number">5</span>; <span class="comment">//通过iter把5插入s末尾</span></span><br></pre></td></tr></table></figure>
<h3 id="顺序容器的适配器">顺序容器的适配器</h3>
<p>以顺序容器胃基础构建一些常用的数据结构，是对顺序容器的封装：</p>
<ul>
<li>栈（stack）：最先压入的元素最后被弹出</li>
<li>队列（queue）：最先压入的元素最先被弹出</li>
<li>优先级队列（priority_queue）：最“大”的元素最先被弹出</li>
</ul>
<p>栈可以用任何一种顺序容器作为基础容器，但是队列只允许用<strong>前插顺序容器</strong>（双端队列或列表）</p>
<div class="note info flat"><p>优先级队列的本质是最大（小）二叉堆。</p>
</div>
<h4 id="栈和队列共同支持的操作">栈和队列共同支持的操作</h4>
<ul>
<li>s1 op s2 op可以是==、!=、&lt;、&lt;=、&gt;、&gt;=之一，它会对两个容器适配器之间的元素按<strong>字典序</strong>进行比较;</li>
<li>s.size() 返回s的元素个数;</li>
<li>s.empty() 返回s是否为空;</li>
<li>s.push(t) 将元素t压入到s中;</li>
<li>s.pop() 将一个元素从s中弹出，对于栈来说，每次弹出的是最后被压入的元素，而对于队列，每次被弹出的是最先被压入的元素;</li>
<li><strong>不支持迭代器</strong>，因为它们不允许对任意元素进行访问。</li>
</ul>
<h4 id="栈和队列的不同操作">栈和队列的不同操作</h4>
<p>栈的操作：</p>
<ul>
<li>s.top() 返回栈顶元素的引用</li>
</ul>
<p>队列操作：</p>
<ul>
<li>s.front() 获得队头元素的引用</li>
<li>s.back() 获得队尾元素的引用</li>
</ul>
<h4 id="优先级队列">优先级队列</h4>
<p>优先级队列也像栈和队列一样支持元素的压入和弹出，但元素弹出的顺序与元素的大小有关，每次弹出的总是容器中最“大”的一个元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Sequence</span> = vector&lt;T&gt;</span><br><span class="line"><span class="keyword">class</span> priority_queue; </span><br></pre></td></tr></table></figure>
<p>优先级队列的基础容器必须是<strong>支持随机访问</strong>的顺序容器。</p>
<ul>
<li>支持栈和队列的size、empty、push、pop几个成员函数，用法与栈和队列相同。</li>
<li>优先级队列并<strong>不支持比较操作</strong>。</li>
<li>与栈类似，优先级队列提供一个top函数，可以获得下一个即将被弹出元素（即最“大”的元素）的引用。</li>
</ul>
<h2 id="关联容器">关联容器</h2>
<h3 id="关联容器的分类和基本功能">关联容器的分类和基本功能</h3>
<p>对于关联容器而言，每个元素都有一个键(key),容器中元素的顺序是按照键<strong>取值的升序</strong>排列的。</p>
<blockquote>
<p>与顺序容器查找元素的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>不同，关联容器会把元素根据键的大小组织成一颗<strong>平衡二叉树</strong>，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
</blockquote>
<p>有序关联容器的分类：</p>
<ul>
<li>单重关联容器(set和map)
<ul>
<li>键值是<strong>唯一的</strong>，一个键值<strong>只能对应一个元素</strong></li>
</ul>
</li>
<li>多重关联容器(multiset和multimap)
<ul>
<li>键值是<strong>不唯一的</strong>，一个键值可以<strong>对应多个元素</strong></li>
</ul>
</li>
<li>简单关联容器(set和multiset)
<ul>
<li>容器只有<strong>一个类型参数</strong>，如set&lt;K&gt;、multiset&lt;K&gt;，表示键类型</li>
<li>容器的<strong>元素就是键本身</strong></li>
</ul>
</li>
<li>二元关联容器(map和multimap)
<ul>
<li>容器有<strong>两个类型参数</strong>，如map&lt;K,V&gt;、multimap&lt;K,V&gt;，分别表示键和附加数据的类型</li>
<li>容器的元素类型是pair&lt;K,V&gt;，即由<strong>键类型和附加数据类型复合</strong>而成的二元组</li>
</ul>
</li>
</ul>
<p>接口</p>
<ul>
<li>构造：列表初始化，如<code>map&lt;string, int&gt; id_map = &#123;&#123;"小明", 1&#125;, &#123;"李华", 2&#125;&#125;</code></li>
<li>插入：insert</li>
<li>删除：erase</li>
<li>查找：find</li>
<li>定界：lower_bound、upper_bound、equal_range</li>
<li>计数：count</li>
</ul>
<blockquote>
<p>C++11新标准中定义了4个无序关联容器<br>
unordered_set、unordered_map、unordered_multiset、unordered_multimap</p>
<ul>
<li>不是使用比较运算符来组织元素的，而是通过一个哈希函数和键类型的==运算符。</li>
<li>提供了与有序容器相同的操作</li>
<li>可以直接定义关键字是内置类型的无序容器。</li>
<li>不能直接定义关键字类型为自定义类的无序容器，如果需要，必须提供我们自己的hash模板。</li>
</ul>
</blockquote>
<h3 id="集合-set">集合（set）</h3>
<p>集合用来存储一组无重复的元素。由于集合的元素本身是有序的，可以高效地查找指定元素，也可以方便地得到指定大小范围的元素在容器中所处的区间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;set&lt;<span class="type">double</span>&gt;::iterator,<span class="type">bool</span>&gt; r=s.<span class="built_in">insert</span>(v); </span><br><span class="line"><span class="keyword">if</span> (!r.second);</span><br><span class="line"><span class="comment">//稍微解释一下这个意思，insert函数的返回值是一个二元组，first是迭代器，第二个是判断能否插入的bool值。</span></span><br><span class="line"><span class="comment">//第一行构建了一个r二元组，访问其中两个元素的方法就是r.first和r.second。</span></span><br></pre></td></tr></table></figure>
<h3 id="映射-map">映射（map）</h3>
<p>映射与集合同属于单重关联容器，它们的主要区别在于，集合的元素类型是键本身，而映射的元素类型是由键和附加数据所构成的<strong>二元组</strong>。</p>
<p>在集合中按照键查找一个元素时，一般只是用来确定这个元素是否存在，而在映射中按照键查找一个元素时，除了能确定它的存在性外，还可以得到<strong>相应的附加数据</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">courses.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;CSAPP&quot;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//二元组的初始化可以用pair&lt;first_type,second_type&gt; r = &#123;element1,element2&#125;</span></span><br><span class="line"><span class="comment">//同时如果想作为函数的参数，可以省略构造这一步，直接使用make_pair(element1,element2)</span></span><br></pre></td></tr></table></figure>
<h3 id="多重集合-multiset-与多重映射-multimap">多重集合（multiset）与多重映射（multimap）</h3>
<p>多重集合是<strong>允许有重复元素</strong>的集合，多重映射是<strong>允许一个键对应多个附加数据</strong>的映射。</p>
<p>多重集合与集合、多重映射与映射的用法差不多，只在几个成员函数上有细微差异，其差异主要表现在<strong>去除了键必须唯一的限制</strong>。</p>
<h1 id="函数对象">函数对象</h1>
<h2 id="函数对象基本概念及分类">函数对象基本概念及分类</h2>
<p>函数对象其实就是一个行为类似函数的对象，它可以不需要参数，也可以带有若干参数，其功能是获取一个值，或着改变操作的状态。</p>
<blockquote>
<p>任何普通的函数和任何重载了调用运算符operator()的类的对象都满足函数对象的特征</p>
</blockquote>
<p><img src="https://pic1.zhimg.com/80/v2-31d073302a8e96d89105422051760a76_1440w.png" alt=""></p>
<p>下面给出两个结果相同的程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> <span class="comment">//包含数值算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义一个普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The result by multipling all elements in a is &quot;</span> &lt;&lt; <span class="built_in">accumulate</span>(a, a + N, <span class="number">1</span>, mult) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> <span class="comment">//包含数值算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultClass</span>&#123; <span class="comment">//定义MultClass类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载操作符operator()</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The result by multipling all elements in a is &quot;</span> &lt;&lt; <span class="built_in">accumulate</span>(a, a + N, <span class="number">1</span>, <span class="built_in">MultClass</span>()) <span class="comment">//Multclass类的对象传递给通用算法 </span></span><br><span class="line">	&lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个普通函数，一个类重载（）。</p>
<p>STL提供的函数对象：</p>
<ul>
<li>用于算数运算的函数对象</li>
<li>用于关系运算、逻辑运算的函数对象（要求返回值为boolaxs）</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-0e4a6bbd4d06bb5765d22c2d1662cdad_1440w.jpeg" alt=""></p>
<p><img src="https://pica.zhimg.com/80/v2-7df16ba33fcbf887ef22acad3f7855ee_1440w.jpeg" alt=""></p>
<h2 id="lambda表达式">lambda表达式</h2>
<p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html">lambda表达式详解</a><br>
定义：[捕获列表] (参数列表) -&gt; 返回类型 {函数体}</p>
<ul>
<li>捕获列表可捕获lambda所在函数的局部变量</li>
<li>参数列表、返回类型和函数题与普通函数一致</li>
<li>可定义在函数内部，理解为未命名的内联函数</li>
<li>auto lmda = [] { return “Hello World!”; };</li>
<li>cout&lt;&lt; lmda() &lt;&lt;std::endl; //执行与函数对象一致</li>
</ul>
<p>捕获列表有值捕获、引用捕获和隐式捕获方式</p>
<ul>
<li>int size = 10, base = 0; //局部变量</li>
<li>auto longer = [size](const string &amp;s){return s.size()&gt;size;} //值捕获</li>
<li>auto longer = [&amp;size](const string &amp;s){return s.size()&gt;size;}//引用捕获</li>
<li>auto longer = [=](const string &amp;s){return s.size()&gt;base;}//隐式值捕获</li>
<li>auto longer = [&amp;](const string &amp;s){return s.size()&gt;size;}//隐式引用捕获</li>
</ul>
<h2 id="函数适配器">函数适配器</h2>
<p><img src="https://pic4.zhimg.com/80/v2-2ed3c65215b6553242c0785fb1c84ae7_1440w.jpeg" alt=""></p>
<p>bind2nd产生binder2nd函数适配器的实例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders; <span class="comment">//占位符_n的命名空间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> intArr[] = &#123; <span class="number">30</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">80</span> &#125;;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(intArr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(intArr, intArr + N)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> p = <span class="built_in">find_if</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(),<span class="built_in">bind2nd</span>(greater&lt;&gt;(), <span class="number">40</span>));</span><br><span class="line">	<span class="keyword">if</span> (p == a.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;no element greater than 40&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;first element greater than 40 is: &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数模板还有很多内容，实践中再慢慢学习</p>
</blockquote>
<h1 id="算法">算法</h1>
<p>算法的特点：</p>
<ul>
<li>STL算法本身是一种函数模版</li>
<li>通过迭代器获得输入数据</li>
<li>通过函数对象对数据进行处理</li>
<li>通过迭代器将结果输出</li>
<li>STL算法是通用的，独立于具体的数据类型、容器类型</li>
</ul>
<p>算法的分类：</p>
<ul>
<li>不可变序列算法</li>
<li>可变序列算法</li>
<li>排序和搜索算法</li>
<li>数值算法</li>
</ul>
<blockquote>
<p>代码所用算法都可以在图片中到找，故不做解释。</p>
</blockquote>
<h2 id="不可变序列算法">不可变序列算法</h2>
<p>不直接修改所操作的容器内容的算法，用于查找指定元素、比较两个序列是否相等、对元素进行计数等。</p>
<p><img src="https://pic3.zhimg.com/80/v2-cbe6b4025b2427cf9b3936eb3a467b96_1440w.png" alt=""></p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIterator, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function">InputIterator <span class="title">find_if</span><span class="params">(InputIterator first, InputIterator last, UnaryPredicate pred)</span></span>;</span><br><span class="line"><span class="comment">//查找[first, last)区间内pred(x)为真的首个元素</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/main.cpp">不可变序列算法实例</a></p>
<h2 id="可变序列算法">可变序列算法</h2>
<p>可以修改它们所操作的容器对象，包括对序列进行复制、删除、替换、倒序、旋转、交换、分割、去重、填充、洗牌的算法及生成一个序列的算法。</p>
<p><img src="https://pic3.zhimg.com/80/v2-ec3de91c8801e4fbb7993a038d8ba58e_1440w.png" alt=""></p>
<p><img src="https://picx.zhimg.com/80/v2-e1eedaedbe50397fdac1453674369c25_1440w.png" alt=""></p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIterator, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fill</span><span class="params">(ForwardIterator first, ForwardIterator last, <span class="type">const</span> T&amp; x)</span></span>;</span><br><span class="line"><span class="comment">//将[first, last)区间内的元素全部改写为x。</span></span><br></pre></td></tr></table></figure>
<div class="note danger flat"><p><a href="https://blog.csdn.net/qq_27788829/article/details/51181080?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-51181080-blog-80187847.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-51181080-blog-80187847.pc_relevant_default&amp;utm_relevant_index=1">remove_if的欺诈性</a></p>
</div>
<blockquote>
<p>Removing is done by shifting (by means of copy assignment (until C++11)move assignment (since C++11)) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the <em>physical</em> size of the container is unchanged. Iterators pointing to an element between the new <em>logical</em> end and the <em>physical</em> end of the range are still dereferenceable, but the elements themselves have unspecified values (as per <a href="https://en.cppreference.com/w/cpp/named_req/MoveAssignable" title="cpp/named req/MoveAssignable">MoveAssignable</a> post-condition).</p>
</blockquote>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/main.cpp">可变序列算法实例</a></p>
<h2 id="排序和搜索算法">排序和搜索算法</h2>
<ul>
<li>对序列进行排序</li>
<li>对两有序序列进行合并</li>
<li>对有序序列进行搜索</li>
<li>有序序列的集合操作</li>
<li>堆算法</li>
</ul>
<p><img src="https://pic2.zhimg.com/80/v2-d880ec033f01b154525a1600bad9c14f_1440w.jpeg" alt=""></p>
<p><img src="https://pic3.zhimg.com/80/v2-e367dca4110be05e688ba80abffe29be_1440w.jpeg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">RandomAccessIterator</span> , <span class="keyword">class</span> <span class="title class_">UnaryPredicate</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last, UnaryPredicate comp)</span></span>;</span><br><span class="line"><span class="comment">//以函数对象comp为“&lt;”，对 [first, last)区间内的数据进行排序</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>sort要求first和last必须是随机迭代器类型，因为sort的具体实现使用了快速排序，使用随机迭代器是效率上的考虑。</p>
</blockquote>
<h2 id="数值算法">数值算法</h2>
<p>求序列中元素的“和”、部分“和”、相邻元素的“差”或两序列的内积，求“和”的“+”、求“差”的“-”以及求内积的“+”和“·”都可由函数对象指定。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b20e0971749bf96f4e9e97fdb6121fd2_1440w.png" alt=""></p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>, <span class="keyword">class</span> <span class="title class_">BinaryFunction</span>&gt; ▫ <span class="function">OutputIterator <span class="title">partial_sum</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result, BinaryFunction op)</span></span>;</span><br><span class="line"><span class="comment">//对[first, last)内的元素求部分“和”（所谓部分“和”，是一个长度与输入序列相同的序列，其第n项为输入序列前n个元素的“和”）</span></span><br><span class="line"><span class="comment">//以函数对象op为“+”运算符，结果通过result输出，返回的迭代器指向输出序列最后一个元素的下一个元素</span></span><br></pre></td></tr></table></figure>
<p>[数值算法实例](<a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E6%95%B0%E5%80%BC%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">https://github.com/hustlixiang21/cpp-practice/tree/main/数值算法应用实例</a></p>
<h1 id="综合实例-银行账户管理">综合实例—银行账户管理</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update4">源代码+更新</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>模版与群体数据的组织</title>
    <url>/2022/08/04/%E6%A8%A1%E7%89%88%E4%B8%8E%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="函数模版与类模版">函数模版与类模版</h1>
<p>模板可以实现<strong>参数化多态性</strong>，就是将程序处理对象的类型参数化，使一段程序能够用于处理多种<strong>不同类型</strong>的对象。</p>
<h2 id="函数模板">函数模板</h2>
<p>函数模板存在的意义简单来说就是为了避免两个只有处理<strong>数据类型不同</strong>的函数重复编写，使代码的可重用性大大提高，从而提高软件的开发效率。</p>
<p>语法形式在函数定义前加上语句<code>template&lt;模板参数表&gt;</code></p>
<p>模板参数表的内容：</p>
<ul>
<li>类型参数： class（或typename）标识符</li>
<li>常量参数： 类型说明符 标识符</li>
<li>模板参数： template&lt;参数表&gt; class 标识符</li>
</ul>
<p>实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用类型的绝对值函数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x&gt;<span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <div class="note danger flat"><p>函数模版与函数有着本质的区别</p>
<ol>
<li>函数模版本身在编译时<strong>不会生成</strong>任何目标代码，只有函数模版的实例会生成目标代码。</li>
<li>被多个源文件引用的函数模板，需要连通函数体一同放在头文件中，而不能像普通函数那样只把声明放在头文件中。</li>
<li>函数指针也只能指向函数模版的实例，<strong>不能指向函数模板</strong>。</li>
</ol>
</div>
<h2 id="类模版">类模版</h2>
<p>使用类模板能够可以为类定义一种模式，使得类中的某些数据成员，某些成员函数的参数，返回值或局部变量能取任意类型。</p>
<p>类模版的声明方式与函数模版方式相同，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在类模版以外的地方定义成员函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;模板参数表&gt;</span><br><span class="line">类型名 类名&lt;模板参数标识符列表&gt;::函数名(参数表)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模版类来定义对象</span></span><br><span class="line">模板名&lt;模版参数类型&gt;对象名<span class="number">1</span>,...,对象名n;</span><br></pre></td></tr></table></figure>
<h1 id="线性群体">线性群体</h1>
<p>线性群体顾名思义，元素的位置与其位置关系时互相对应的。分类可以分为，直接访问、顺序访问和索引访问。直接访问指不需要按照顺序直接跳到需要访问的位置，而顺序访问只能够按照元素排列顺序从头访问。</p>
<h2 id="直接访问群体-数组类">直接访问群体—数组类</h2>
<p>要求自己设计一个可变长度的数组，<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%95%B0%E7%BB%84%E7%B1%BB%E6%A8%A1%E7%89%88/Array.h">点击查看源码</a>，并列出一些语法注意点。</p>
 <div class="note info flat"><p>语法规定“=”，“[ ]”，“( )”，“-&gt;”只能被重载为成员函数，而且派生类中的“=”运算函数总会隐藏基类中的“=”运算符。</p>
</div>
<p>如果我们希望在程序中像使用普通数组一样使用Array类的对象，需要对其进行重载指针转换运算符。</p>
<h3 id="指针转换运算符的作用">指针转换运算符的作用</h3>
<p>为了说明重载指针转换运算符的必要性，先来看看下面这段程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span> <span class="params">(<span class="type">int</span> *p, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++）</span><br><span class="line">        cin&gt;&gt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">read</span>(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里函数 read 的第一个形参是 int 指针，而数组名a 是一个int 型地址常量，类型恰好是匹配的。如果希望在程序中像使用普通数组一祥做用Array类的对象，将上述 main两数修改如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Arrays&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">read</span>(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情况会怎样呢？这回在调用read 时会发现实参类型与形参类型不同，这时编译系统会试图进行自动类型转换：将对象名转换为 int * 类型。由于a是自定义的类型对象,所以编译系统提供的自动转换功能当然<strong>无法实现这一转换</strong>，因此我们需要自行编写重载的指针类型转换函数。<br>
C++中,如果想将自定义类型T的对象隐含或显式地转换为S 类型，可以将operator S定义为T的成员函数。这样，在把T类型对象显式隐含转换为 S 类型，或用static_cast 显式转换为 S 类型时，该成员函数会被调用。转换操作符的重载函数不用指<br>
定返回值的类型，这是由于这种情况下<strong>重载函数的返回类型与操作符名称一致</strong>，因此C++标准规定不能为这类函数指定返回值类型(也不要写 void)。<br>
而当对象本身为常数时，为了避免通过指针对数组内容进行修改,只能将对象转换为常指针。</p>
<p>在这个Array类中重载指针转换运算符的写法如下；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">Array&lt;T&gt;::<span class="keyword">operator</span> T *()  <span class="comment">//不用写返回值的类型</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> list;<span class="comment">//数组的首地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="顺序访问群体-链表类">顺序访问群体—链表类</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinkedList.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LINKEDLIST_H </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINKEDLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Node.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;T&gt; *front, *rear;      <span class="comment">//表头和表尾指针</span></span><br><span class="line">    Node&lt;T&gt; *prevPtr, *currPtr; <span class="comment">//记录表当前遍历位置的指针，由插入和删除操作更新</span></span><br><span class="line">    <span class="type">int</span> size;                   <span class="comment">//表中的元素个数</span></span><br><span class="line">    <span class="type">int</span> position;               <span class="comment">//当前元素在表中的位置序号。由函数reset使用 </span></span><br><span class="line">    <span class="comment">//生成新结点，数据域为item，指针域为ptrNext</span></span><br><span class="line">    <span class="function">Node&lt;T&gt; *<span class="title">newNode</span><span class="params">(<span class="type">const</span> T &amp;item, Node&lt;T&gt; *ptrNext = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">freeNode</span><span class="params">(Node&lt;T&gt; *p)</span></span>; <span class="comment">//释放结点</span></span><br><span class="line">    <span class="comment">//将链表L 复制到当前表(假设当前表为空)，被复制构造函数、operator = 调用</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedList</span>();                                     <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">LinkedList</span>(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L);               <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">LinkedList</span>();                                    <span class="comment">//析构函数</span></span><br><span class="line">    LinkedList&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L); <span class="comment">//重载赋值运算符</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="type">const</span></span>;                              <span class="comment">//返回链表中元素个数 bool isEmpty() const; //链表是否为空</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> pos = <span class="number">0</span>)</span></span>;                          <span class="comment">//初始化游标的位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>;                                      <span class="comment">//使游标移动到下一个结点</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">endOfList</span><span class="params">()</span> <span class="type">const</span></span>;                           <span class="comment">//游标是否到了链尾</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">currentPosition</span><span class="params">()</span> <span class="type">const</span></span>;                      <span class="comment">//返回游标当前的位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertFront</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                  <span class="comment">//在表头插入结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertRear</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                   <span class="comment">//在表尾添加结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertAt</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                     <span class="comment">//在当前结点之前插入结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertAfter</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                  <span class="comment">//在当前结点之后插入结点</span></span><br><span class="line">    <span class="function">T <span class="title">deleteFront</span><span class="params">()</span></span>;                                  <span class="comment">//删除头结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteCurrent</span><span class="params">()</span></span>;                             <span class="comment">//删除当前结点</span></span><br><span class="line">    <span class="function">T &amp;<span class="title">data</span><span class="params">()</span></span>;                                        <span class="comment">//返回对当前结点成员数据的引用</span></span><br><span class="line">    <span class="function"><span class="type">const</span> T &amp;<span class="title">data</span><span class="params">()</span> <span class="type">const</span></span>;                            <span class="comment">//返回对当前结点成员数据的常引用</span></span><br><span class="line">    <span class="comment">//清空链表:释放所有结点的内存空间。被析构函数、operator= 调用</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LINKEDLIST_H </span></span></span><br><span class="line"><span class="comment">//链表类模板函数实现代码可以从网上下载</span></span><br></pre></td></tr></table></figure>
<p>链表的基本操作:</p>
<ul>
<li>生成链表</li>
<li>插入结点</li>
<li>查找结点</li>
<li>删除结点</li>
<li>遍历链表</li>
<li>清空链表</li>
</ul>
<h2 id="栈类">栈类</h2>
<p><strong>栈类模版的编写</strong>，<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/stack_calculator/Stack.h">点击查看源码</a>。</p>
<p>栈的元素其实可以用<strong>数组</strong>表示也可以用<strong>链表</strong>表示。</p>
<p>栈的基本操作：</p>
<ul>
<li>初始化</li>
<li>入栈</li>
<li>出栈</li>
<li>清空栈</li>
<li>访问栈顶元素</li>
<li>检测栈的状态（满、空）</li>
</ul>
<h2 id="队列类">队列类</h2>
<p>设计的是循环队列，用的是数组，增减较为的麻烦，其实我觉得用链表实现的话不需要用循环。</p>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E9%98%9F%E5%88%97%E7%B1%BB%E6%A8%A1%E7%89%88/Queue.h">点击此处查看源码</a></p>
<h1 id="群体数组的组织">群体数组的组织</h1>
<p>简单的排序和查找都较为的基础，在此插入一些图片和链接以更好的理解。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7da3a687b4b607d415bbf4617768727f_1440w.jpeg" alt=""></p>
<p><a href="https://labuladong.github.io/algo/1/11/">我把二分搜索写了一首诗—labuladong</a></p>
<h1 id="综合实例-对个人银行账户管理程序的改进">综合实例—对个人银行账户管理程序的改进</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_3">查看源码点击此处</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP继承与派生</title>
    <url>/2022/07/31/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F/</url>
    <content><![CDATA[<h1 id="类的继承与派生">类的继承与派生</h1>
<h2 id="概述">概述</h2>
<p>所谓继承就是从先辈处得到<strong>属性</strong>和<strong>行为特征</strong>。</p>
<p>类的继承，是新的类从已有类那里得到已有的特性。从另一个角度来看，从已有类产生新类的过程就是类的派生。</p>
<div class="note info flat"><p>两者本质上是一样的，只是同一过程从不同角度去看而已。</p>
</div>
<h3 id="继承与派生的目的">继承与派生的目的</h3>
<p>继承的目的：实现设计与代码的重用。</p>
<p>派生的目的：当新的问题出现，原有程序无法较好的解决，需要对原有程序进行改造。</p>
<hr>
<blockquote><p>不同标准的分类</p>
<blockquote><p>直接参与派生出某类的基类叫做<strong>直接基类</strong>，基类的基类甚至更高层的基类称为<strong>间接基类</strong>。</p>
</blockquote>
<blockquote><p>一个派生类，可以同时有多个基类，这种情况称为<strong>多继承</strong>。同理，只有一个基类的情况称为<strong>单继承</strong>。</p>
</blockquote></blockquote>
<h2 id="派生类的定义">派生类的定义</h2>
<p>派生类定义语法为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名: 继承方式 基类名<span class="number">1</span>,...,继承方式 基类名n</span><br><span class="line">&#123;</span><br><span class="line">  成员声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="派生类的生成过程">派生类的生成过程</h2>
<ol>
<li>吸收基类成员</li>
</ol>
<p>​	吸收基类成员之后，派生类实际上就包含了它的全部基类中<strong>除构造和析构函数之外</strong>的所有成员。</p>
<ol start="2">
<li>改造基类成员</li>
</ol>
<p>​	如果派生类声明了一个和某基类成员同名的新成员，派生的新成员就<strong>隐藏或覆盖</strong>了外层同名成员。</p>
<ol start="3">
<li>添加新的成员</li>
</ol>
<p>​	派生类增加新成员使派生类在功能上有所发展。</p>
<h1 id="访问控制">访问控制</h1>
<p>访问主要来自两个方面：一是派生类中的新增成员访问从基类继承的成员；二是在派生类外部，通过派生类的对象访问从基类继承的成员。</p>
<p>继承方式主要分为<strong>三种</strong>，及其各自的特点在下面列出。</p>
<h2 id="公有继承-public">公有继承（public）</h2>
<ul>
<li>
<p>基类的public和protected成员的访问属性在派生类中<strong>保持不变</strong>，但基类的private成员<strong>不可直接访问</strong>。</p>
</li>
<li>
<p>派生类中的成员函数可以直接访问基类中的public和protected成员，但<strong>不能直接访问</strong>基类的private成员。</p>
</li>
<li>
<p>通过派生类的对象访问从基类继承的成员<strong>只能访问public成员</strong>。</p>
</li>
</ul>
<h2 id="保护继承-protected">保护继承（protected）</h2>
<ul>
<li>
<p>基类的public和protected成员都<strong>以protected身份</strong>出现在派生类中，但基类的private成员<strong>不可直接访问</strong>。</p>
</li>
<li>
<p>派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。</p>
</li>
<li>
<p>通过派生类的对象<strong>不能直接访问从基类继承的任何成员</strong>。</p>
</li>
</ul>
<h2 id="私有继承-private">私有继承（private）</h2>
<ul>
<li>
<p>基类的public和protected成员都<strong>以private身份</strong>出现在派生类中，但基类的private成员<strong>不可直接访问</strong>。</p>
</li>
<li>
<p>派生类中的成员函数<strong>可以直接访问</strong>基类中的public和protected成员，但<strong>不能直接访问</strong>基类的private成员。</p>
</li>
<li>
<p>通过派生类的对象<strong>不能直接访问从基类继承的任何成员</strong>。</p>
</li>
</ul>
<div class="note success flat"><p>其实不难看出，这三种继承方式的第二条完全一模一样，这正是遵循了数据的共享与保护原则。派生类的对象在公有继承下可以访问public成员，其余情况出于对数据的保护都不能访问。</p>
</div>
<p><a href="https://www.cnblogs.com/NueXini/p/16180257.html">附上一篇比较好的详解</a></p>
<h1 id="类型兼容规则">类型兼容规则</h1>
<p>类型兼容规则是指在需要基类对象的任何地方，都可以使用<strong>公有派生类的对象</strong>来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员，具备了基类的所有功能。（保护和私有继承不行，因为从对象不能访问从基类继承的任何成员）</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B &#123;...&#125;</span><br><span class="line"></span><br><span class="line">B b1, * pb1;</span><br><span class="line">D d1;</span><br></pre></td></tr></table></figure>
<p>根据上述代码有如下三种替代的情况:</p>
<ul>
<li>
<p>派生类的对象可以隐含转化为基类的对象</p>
<p><code>b1=d1;</code></p>
</li>
<li>
<p>派生类的对象可以初始化基类的引用</p>
<p><code>B &amp;rb=d1;</code></p>
</li>
<li>
<p>派生类的指针可以隐含转化为基类的指针</p>
<p><code>pb1=&amp;d1</code></p>
</li>
</ul>
<p>这种兼容规则使得我们可以用相同的函数统一处理基类及公有派生类的对象。即形参是基类的对象（引用、指针）时，实参 可以是派生类的对象或指针。大大提高了程序运行的效率。</p>
<h1 id="派生类的构造和析构函数">派生类的构造和析构函数</h1>
<p>派生类的构造函数只负责对派生类新增的成员进行初始化，对所有从基类继承下来的成员，其初始化工作还是由基类的构造函数完成。最后对派生对象的清理工作也需要加入新的析构函数。</p>
<h2 id="构造函数">构造函数</h2>
<p>由于派生的类对于基类中的很多数据成员是不能访问的，需要借助基类的构造函数。且在构造派生类对象的时候，会首先调用基类的构造函数，其次再是初始化派生类新增的成员对象。</p>
<p>一般语法形式为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">派生类名::派生类名(参数表):基类名<span class="number">1</span>(基类名<span class="number">1</span>初始化参数表),...,基类名<span class="built_in">n</span>(基类n初始化参数表)</span><br><span class="line">,成员对象名<span class="number">1</span>(成员对象<span class="number">1</span>初始化参数表),...,成员对象名<span class="built_in">m</span>(成员对象m初始化参数表)</span><br><span class="line">&#123;</span><br><span class="line">  派生类构造函数其他初始化操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数执行的一般次序</p>
<ol>
<li>调用基类构造函数，调用顺序按照被继承时声明的顺序(从左向右)。</li>
<li>对派生类新增的成员对象初始化，按照在类中声明的顺序。</li>
<li>执行派生类构造函数体中的内容。</li>
</ol>
<h2 id="复制构造函数">复制构造函数</h2>
<p>派生类进行复制构造的时候同样会用到基类的复制构造函数。</p>
<p>例：如果要为Derived类（以Base类为基类）编写复制构造函数，形式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Derived::<span class="built_in">Derived</span>(<span class="type">const</span> Derived &amp;v): <span class="built_in">Base</span>(v)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>此处基类使用了派生类的引用，完全符合类型兼容规则中的，可以用派生类的对象去初始化基类。</p>
</div>
<h2 id="析构函数">析构函数</h2>
<p>其实和构造函数的思想完全一致，最大的区别就是，<strong>析构的次序和初始化的次序完全反了过来。</strong></p>
<hr>
<h1 id="派生类成员的标识与访问">派生类成员的标识与访问</h1>
<h2 id="作用域分辨符">作用域分辨符</h2>
<p>&quot;::&quot;就是作用域分辨符，用来限定要访问的成员所在的类的名称。</p>
<p>如果派生类中声明了与基类成员函数同名的新函数，即使函数的参数表不同，从基类继承的同名函数的所有重载形式也都会被隐藏。</p>
<p>对于数据成员也是如此，新增同名数据会覆盖基类；若多继承基类重复，则会产生二义性，必须通过类名和作用域分辨符来标识成员。</p>
<div class="note danger flat"><p>只有在相同作用域中定义的函数才叫做重载。</p>
</div>
<hr>
<p>可以使用using关键字去使用别的作用域中的标识符。</p>
<h2 id="虚基类">虚基类</h2>
<p>假设一个派生类继承了多个基类，而且这多个基类中部分或者全部基类由<strong>另一个共同基类派生而来</strong>的时候，那么在这个派生类中，会有相同的名称，在内存中也拥有<strong>多个副本</strong>，造成程序开销。</p>
<p>这时候可以将共同基类设置为虚基类，从不同路径继承过来的同名数据成员在内存中就只有一个副本，同一个函数名也只有一个映射。</p>
<p>语法形式为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名:<span class="keyword">virtual</span> 继承方式 基类名</span><br></pre></td></tr></table></figure>
<h2 id="虚基类及其派生类的构造函数">虚基类及其派生类的构造函数</h2>
<p>在整个继承关系中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化列表中列出对虚基类的初始化。</p>
<p>且调用虚拟类的构造函数时，C++编译器会指定最远派生类的构造函数去调用虚基类的构造函数，不必担心会多次重复调用。</p>
<blockquote><p>构造一个类的对象的一般顺序是：</p>
<p>（1） 如果该类有直接或间接的虚基类，则限制性虚基类的构造函数。</p>
<p>（2） 如果有其他基类，则按照他们在继承声明列表中出现的次序，分别初始化，但在构造的过程中，不再执行他们的虚基类的构造函数</p>
<p>（3） 按照定义出现的顺序，对新增的成员对象初始化。对于类类型的成员对象，如果出现在构造函数初始化列表中，则以其中指定的参数执行构造函数，如未出现，则执行默认构造函数；对于基本类型的成员独享，如果出现在初始化列表中，则使用其中指定的值为其赋初值，否则什么也不干。</p>
<p>（4） 执行构造函数的函数体。</p>
</blockquote>
<h1 id="程序实例-用高斯消去法解线性方程组">程序实例——用高斯消去法解线性方程组</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Gauss%E6%B6%88%E5%8E%BB_CPP">源码见github</a></p>
<h1 id="综合实例-个人银行账户管理程序">综合实例——个人银行账户管理程序</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_1">源码见github</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>流类库与输入/输出</title>
    <url>/2022/08/04/%E6%B5%81%E7%B1%BB%E5%BA%93%E4%B8%8E%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h1 id="i-o流的概念及流类库的结构">I/O流的概念及流类库的结构</h1>
<p>程序建立一个<strong>流对象</strong>：</p>
<ul>
<li>当程序与外界环境进行信息交换时，存在着两个对象，一个是<strong>程序中的对象</strong>，另一个是<strong>文件对象</strong>。</li>
<li>流是一种抽象，它负责在<strong>数据的生产者</strong>和<strong>数据的消费者</strong>之间建立联系，并管理数据的流动。</li>
</ul>
<p>指定这个流对象与某个文件对象建立连接，程序操作流对象流，对象通过文件系统对所连接的文件对象产生作用。</p>
<blockquote>
<p>操作系统是将键盘、屏幕、打印机和通信端口作为扩充文件来处理的，而这种处理是通过操作系统的设备驱动程序来实现的。这些设备与磁盘文件是等同的。</p>
</blockquote>
<p>一般意义下的读操作在流数据对象中被称为（从流中）<strong>提取</strong>，写操作被称为（向流中）<strong>插入</strong>。</p>
<p style="text-align:center;">I/O流类列表</p>
![](https://pic3.zhimg.com/80/v2-4544fd2b14037c1638862690c745edc2_1440w.png)
<h1 id="输出流">输出流</h1>
<p>最重要的三个输出流：</p>
<ul>
<li>ostream</li>
<li>ofstream</li>
<li>ostringstream</li>
</ul>
<p>预先定义的输出流对象：</p>
<ul>
<li>cout 标准输出</li>
<li>cerr 标准错误输出，没有缓冲，发送给它的内容立即被输出。</li>
<li>clog 类似于cerr，但是有缓冲，缓冲区满时被输出。</li>
</ul>
<h2 id="构造输出流对象">构造输出流对象</h2>
<p>构造文件输出流常用的方法如下：</p>
<ol>
<li>使用默认构造函数，然后调用open成员函数。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ofstream myFile; <span class="comment">//定义一个静态文件输出流对象</span></span><br><span class="line">myFile.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>); <span class="comment">//打开文件，使流对象与文件建立联系</span></span><br></pre></td></tr></table></figure>
</li>
<li>在调用构造函数时指定文件名： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>在构造对象或用open打开文件时可以指定模式 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>, ios_base::out | ios_base::binary)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>也可以使用同一个流对象先后打开不同的文件（同一时刻只有一个是打开的）</li>
</ol>
<h2 id="文件输出流成员函数">文件输出流成员函数</h2>
<p>三种类型：</p>
<ul>
<li>与操纵符等价的成员函数。</li>
<li>执行非格式化写操作的成员函数。</li>
<li>其它修改流状态且不同于操纵符或插入运算符的成员函数。</li>
</ul>
<p>文件输出流成员函数</p>
<ul>
<li>open函数
<ul>
<li>把流与一个特定的磁盘文件关联起来。</li>
<li>需要指定打开模式。</li>
</ul>
</li>
<li>put函数
<ul>
<li>把一个字符写到输出流中。</li>
</ul>
</li>
<li>write函数
<ul>
<li>把内存中的一块内容写到一个文件输出流中</li>
</ul>
</li>
<li>seekp和tellp函数
<ul>
<li>操作文件流的内部指针</li>
</ul>
</li>
<li>close函数
<ul>
<li>关闭与一个文件输出流关联的磁盘文件</li>
</ul>
</li>
<li>错误处理函数
<ul>
<li>在写到一个流时进行错误处理</li>
</ul>
</li>
</ul>
<h2 id="向文本文件输出">向文本文件输出</h2>
<p>标准输出设备显示器被系统看作文本文件，所以我们以向标准设备输出为例，介绍文本文件输出格式控制。</p>
<h3 id="插入运算符">插入运算符</h3>
<p>插入(&lt;&lt;)运算符：为所有标准C++数据类型预先设计的，用于传送字节到一个输出流对象。</p>
<h3 id="操纵符-manipulator">操纵符（manipulator）</h3>
<p>插入运算符与操纵符一起工作控制输出格式。</p>
<ul>
<li>很多操纵符都定义在ios_base类中（如hex()）、&lt;iomanip&gt;头文件（如setprecision()）。</li>
<li>控制输出宽度：在流中放入setw操纵符或调用width成员函数为每个项指定输出宽度。</li>
</ul>
<blockquote>
<p>setw和width仅影响紧随其后的输出项，但其它流格式操纵符保持有效直到发s生改变。</p>
</blockquote>
<ul>
<li>dec、oct和hex操纵符设置输入和输出的默认进制</li>
</ul>
<h4 id="设置宽度">设置宽度</h4>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BD%BF%E7%94%A8width%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E5%AE%BD%E5%BA%A6/main.cpp">width源代码</a><br>
<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BD%BF%E7%94%A8setw%E6%93%8D%E7%BA%B5%E7%AC%A6%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/main.cpp">setw源代码</a></p>
<blockquote>
<p>width成员函数在iostream中声明了，如果带参量使用setw或任何其他操纵符，就必须包括<strong>iomanip</strong></p>
</blockquote>
<h4 id="对齐方式">对齐方式</h4>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E8%AE%BE%E7%BD%AE%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/main.cpp">设置对齐方式源代码</a></p>
<h4 id="setiosflags操纵符">setiosflags操纵符</h4>
<p>这个程序中，通过使用带参数的setiosflags操纵符来设置左对齐，setiosflags定义在头文件iomanip中。</p>
<ul>
<li>参数ios_base::left是ios_base的静态常量，因此引用时必须包括ios_base::前缀。</li>
<li>这里需要用resetiosflags操纵符<strong>关闭左对齐标志</strong>。setiosflags不同于width和setw，它的<strong>影响是持久的</strong>，直到用resetiosflags重新恢复默认值时为止 。</li>
<li>setiosflags的参数是该流的格式标志值，可用按位或（|）运算符进行<strong>组合</strong>。</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-aebc935a529984f183707440dd181431_1440w.png" alt=""></p>
<h4 id="精度">精度</h4>
<p>浮点数输出精度的默认值是6，例如：3466.98。</p>
<ul>
<li>要改变精度：setprecision操纵符（定义在头文件iomanip中）</li>
<li>如果不指定fixed或scientific，精度值表示有效数字位数。</li>
<li>如果设置了ios_base::fixed或ios_base::scientific精度值表示小数点之后的位数。</li>
</ul>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6/main.cpp">控制输出精度—未指定fixed或scientific</a><br>
<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6%E2%80%94%E6%8C%87%E5%AE%9Afixed/main.cpp">控制输出精度——指定fixed</a><br>
<a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6%E2%80%94%E6%8C%87%E5%AE%9Ascientific">控制输出精度——指定scientific</a></p>
<h2 id="向二进制文件输出">向二进制文件输出</h2>
<h3 id="二进制文件流">二进制文件流</h3>
<p>使用ofstream构造函数中的模式参量指定二进制输出模式；以通常方式构造一个流，然后使用setmode成员函数，在文件打开后改变模式； 通过二进制文件输出流对象完成输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Date</span> &#123; </span><br><span class="line"><span class="type">int</span> mon, day, year; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Date dt = &#123; <span class="number">6</span>, <span class="number">10</span>, <span class="number">92</span> &#125;;</span><br><span class="line">	<span class="function">ofstream <span class="title">file</span><span class="params">(<span class="string">&quot;date.dat&quot;</span>, ios_base::binary)</span></span>;</span><br><span class="line">	file.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(&amp;dt),<span class="built_in">sizeof</span>(dt));</span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>write函数遇到空字符时并不停止，因此能够写入完整的类结构，该函数带两个参数；一个char指针（其实地址），和一个所写的字节数。<strong>注意需要用reinterpret_cast将该对象的地址显式转化为char * 类型。</strong></p>
</blockquote>
<h2 id="向字符串输出">向字符串输出</h2>
<p>将字符串作为输出流的目标，可以实现将其他数据类型转换为字符串的功能。</p>
<h3 id="字符串输出流-ostringstream">字符串输出流（ ostringstream ）</h3>
<p>用于构造字符串</p>
<p>功能：</p>
<ul>
<li>支持ofstream类的除open、close外的所有操作</li>
<li>str函数可以返回当前已构造的字符串</li>
</ul>
<p>典型应用</p>
<ul>
<li>将数值转换为字符串</li>
</ul>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%95%B0%E5%80%BC%E8%BD%AC%E5%8C%96%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/main.cpp">用ostringstream将数值转换为字符串</a></p>
<h1 id="输入流">输入流</h1>
<p>重要的输入流类：</p>
<ul>
<li>istream类最适合用于顺序文本模式输入。cin是其实例。</li>
<li>ifstream类支持磁盘文件输入。</li>
<li>istringstream</li>
</ul>
<h2 id="构造输入流对象">构造输入流对象</h2>
<ul>
<li>如果在构造函数中指定一个文件名，在构造该对象时该文件便自动打开。  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>在调用默认构造函数之后使用open函数来打开文件。  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ifstream myFile;<span class="comment">//建立一个文件流对象</span></span><br><span class="line">myFile.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>); <span class="comment">//打开文件&quot;filename”</span></span><br></pre></td></tr></table></figure>
</li>
<li>打开文件时可以指定模式  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>, ios_base::in | ios_base::binary)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用提取运算符从文本文件输入">使用提取运算符从文本文件输入</h2>
<p>提取运算符(&gt;&gt;)对于所有标准C++数据类型都是预先设计好的。是从一个输入流对象获取字节最容易的方法。ios类中的很多操纵符都可以应用于输入流。但是只有少数几个对输入流对象具有实际影响，其中最重要的是进制操纵符dec、oct和hex。</p>
<h2 id="输入流相关函数">输入流相关函数</h2>
<ul>
<li>open函数把该流与一个特定磁盘文件相关联。</li>
<li>get函数的功能与提取运算符（&gt;&gt;）很相像，主要的不同点是get函数在读入数据时包括空白字符。（第6章介绍过）</li>
<li>getline的功能是从输入流中读取多个字符，并且允许指定输入终止字符，读取完成后，从读取的内容中删除终止字符。（第6章介绍过）</li>
<li>read成员函数从一个文件读字节到一个指定的内存区域，由长度参数确定要读的字节数。当遇到文件结束或者在文本模式文件中遇到文件结束标记字符时结束读取。</li>
<li>seekg函数用来设置文件输入流中读取数据位置的指针。</li>
<li>tellg函数返回当前文件读指针的位置。</li>
<li>close函数关闭与一个文件输入流关联的磁盘文件。</li>
</ul>
<h2 id="实例">实例</h2>
<p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BB%8E%E6%96%87%E4%BB%B6%E8%AF%BB%E4%B8%80%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AE%B0%E5%BD%95%E5%88%B0%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E4%B8%AD/main.cpp">从文件读一个二进制记录到一个结构中</a><br>
<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E7%94%A8seekg%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88/main.cpp">用seekg函数设置位置指针</a><br>
<a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E8%AF%BB%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B9%B6%E6%98%BE%E7%A4%BA%E5%87%BA%E5%85%B6%E4%B8%AD0%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%8D%E7%BD%AE/main.cpp">读一个文件并显示出其中0元素的位置</a></p>
<h2 id="从字符串输入-istringstream">从字符串输入（ istringstream）</h2>
<p>用于从字符串读取数据，在构造函数中设置要读取的字符串。</p>
<p>功能</p>
<ul>
<li>支持ifstream类的除open、close外的所有操作</li>
</ul>
<p>典型应用</p>
<ul>
<li>将字符串转换为数值</li>
</ul>
<h1 id="输入-输出流">输入/输出流</h1>
<h2 id="两个重要的输入-输出流">两个重要的输入/输出流</h2>
<p>一个iostream对象可以是数据的源或目的。</p>
<ul>
<li>两个重要的I/O流类都是从iostream派生的，它们是fstream和stringstream</li>
<li>这些类继承了前面描述的istream和ostream类的功能。</li>
</ul>
<h2 id="fstream类">fstream类</h2>
<p>fstream类支持磁盘文件输入和输出。</p>
<ul>
<li>如果需要在同一个程序中从一个特定磁盘文件读并写到该磁盘文件，可以构造一个fstream对象。</li>
<li>一个fstream对象是有两个逻辑子流的单个流，两个子流一个用于输入，另一个用于输出。</li>
</ul>
<h2 id="stringstream类">stringstream类</h2>
<p>stringstream类支持面向字符串的输入和输出</p>
<ul>
<li>可以用于对同一个字符串的内容交替读写，同样是由两个逻辑子流构成。</li>
</ul>
<h1 id="综合实例-个人银行账户管理">综合实例-个人银行账户管理</h1>
<p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update5">点击查看源代码</a></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>C++程序设计</tag>
        <tag>C++语言</tag>
      </tags>
  </entry>
  <entry>
    <title>警醒</title>
    <url>/2022/06/15/%E8%AD%A6%E9%86%92/</url>
    <content><![CDATA[<h1 id="戒骄戒躁-专注当下">戒骄戒躁，专注当下！</h1>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>个人反思</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络基础知识</title>
    <url>/2022/06/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>说明：全是初步的了解，并不深入，等到计网再说。</p>
<h1 id="基础概念">基础概念</h1>
<h2 id="端点和会话">端点和会话</h2>
<p>端点（endpoint） 就是指网络上能够发送或者接受数据的一台设备。两个端点之间的通信被称为会话 （conversation）。</p>
<h2 id="ip地址">ip地址</h2>
<p>32位二进制数，常用点分十进制表示，会随着设备接入局域网的变化而变化，一部分由网络号组成，另一部分是主机号，由子网掩码决定。</p>
<h2 id="子网掩码">子网掩码</h2>
<p>32位二进制数，形式类似于1111…0000,直接与ip地址进行与运算得到的是网络号，取反与ip地址进行与运算得到的是主机号。</p>
<h2 id="mac地址">Mac地址</h2>
<p>48位二进制数<br>
每台主机的唯一的身份标识（出厂后恒定不变），网卡的物理地址，在局域网中与ip地址成映射关系。而且网卡通过比对数据包内发送目标的mac地址直接判断是否送入操作系统。</p>
<p><strong>ip和mac的关系类似于收件地址和身份证号类似，收件地址可能会发生改变，但是身份证号一定不会改变。</strong></p>
<span id="more"></span>
<h2 id="question-为什么有了ip地址还需要mac地址？">Question: 为什么有了ip地址还需要mac地址？</h2>
<p>ip地址等价于快递包裹上的收件人地址。快递员通过收件人地址将包裹在出发地到目的地之间连出一条线，然后通过不同地区之间的物流中转最后将包裹送到收件人的手中。<br>
MAC地址等价于快递包裹上的收件人姓名。MAC地址更多是用于确认对方信息而存在的。就如同快递跨越几个城市来到你面前，快递员需要和你确认以下收件人是否正确，才会把包裹交给你一样。<br>
比如在学校里同一个班级（抽象成局域网）的学生大家互相都认识，互相交流就不需要借助学号（这里抽象成ip地址），直接喊名字（mac地址）即可。</p>
<p>虽然有ip地址，但是它在局域网中不起作用，因为arp协议（Address Resolution Protocol）是用于网络中寻址的，而在局域网中所有主机互相可见。（除此之外，局域网中ip地址最多是在arp广播时，作为收到包的主机解包时判定的依据，判定自己是否为目的主机，从而选择是否回应arp应答）。</p>
<h2 id="网关">网关</h2>
<p>网关（Gateway）就是一个网络连接到另一个网络的“关口”。也就是网络关卡。例如交换机和路由器。<br>
网关又称网间连接器、协议转换器。默认网关在网络层以上实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关的结构也和路由器类似，不同的是互连层。网关既可以用于广域网互连，也可以用于局域网互连。</p>
<p>==说明：由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关，在今天很多局域网采用都是路由来接入网络，因此通常指的网关就是路由器的IP==</p>
<h2 id="tcp和udp">TCP和UDP</h2>
<h3 id="udp">UDP</h3>
<p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。RFC 768描述了 UDP。<br>
Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。<strong>面向连接</strong>的是 TCP，该协议几乎做了所有的事情。</p>
<h3 id="tcp-比较屌也比较难">TCP（比较屌也比较难）</h3>
<p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。<br>
TCP旨在适应支持多网络应用的分层协议层次结构。 连接到不同但互连的计算机通信网络的主计算机中的成对进程之间依靠TCP提供可靠的通信服务。TCP假设它可以从较低级别的协议获得简单的，可能不可靠的数据报服务。 原则上，TCP应该能够在从硬线连接到分组交换或电路交换网络的各种通信系统之上操作。</p>
<h4 id="建立连接和拆除连接">建立连接和拆除连接</h4>
<p><strong>建立连接：</strong><br>
<img src="https://pic2.zhimg.com/80/v2-58989b47296d51404a93456e33fb8bce_1440w.png" alt="image"><br>
<strong>拆除连接：</strong><br>
<img src="https://pica.zhimg.com/80/v2-ef569f7a16193c4f5ec462900790a730_1440w.png" alt="image"></p>
<h4 id="主要特点">主要特点</h4>
<p>TCP是一种面向广域网的通信协议，目的是在跨越多个网络通信时，为两个通信端点之间提供一条具有下列特点的通信方式：</p>
<ul>
<li>基于流的方式；</li>
<li>面向连接；</li>
<li>可靠通信方式；</li>
<li>在网络状况不佳的时候尽量降低系统由于重传带来的带宽开销；</li>
<li>通信连接维护是面向通信的两个端点的，而不考虑中间网段和节点。</li>
</ul>
<p>为满足TCP协议的这些特点，TCP协议做了如下的规定：<br>
①数据分片：在发送端对用户数据进行分片，在接收端进行重组，由TCP确定分片的大小并控制分片和重组；<br>
②到达确认：接收端接收到分片数据时，根据分片数据序号向发送端发送一个确认；<br>
③超时重发：发送方在发送分片时启动超时定时器，如果在定时器超时之后没有收到相应的确认，重发分片；<br>
④滑动窗口：TCP连接每一方的接收缓冲空间大小都固定，接收端只允许另一端发送接收端缓冲区所能接纳的数据，TCP在滑动窗口的基础上提供流量控制，防止较快主机致使较慢主机的缓冲区溢出；<br>
⑤失序处理：作为IP数据报来传输的TCP分片到达时可能会失序，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层；<br>
⑥重复处理：作为IP数据报来传输的TCP分片会发生重复，TCP的接收端必须丢弃重复的数据；<br>
⑦数据校验：TCP将保持它首部和数据的检验和，这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到分片的检验和有差错，TCP将丢弃这个分片，并不确认收到此报文段导致对端超时并重发。</p>
<h3 id="简单的区分">简单的区分</h3>
<p>Internet 的传输层有两个主要协议，互为补充。<strong>无连接</strong>的是UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。<strong>面向连接</strong>的是 TCP，该协议几乎做了所有的事情。</p>
<h2 id="dhcp服务">DHCP服务</h2>
<h3 id="dhcp简介">DHCP简介</h3>
<p><strong>DHCP</strong>（Dynamic Host Configuration Protocol <strong>动态主机配置协议</strong>）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。<br>
通常被应用在大型的局域网络环境中，主要作用是集中地管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。</p>
<p>DHCP协议采用客户端/服务器模型，主机地址的动态分配任务由网络主机驱动。当DHCP服务器接收到来自网络主机申请地址的信息时，才会向网络主机发送相关的地址配置等信息，以实现网络主机地址信息的动态配置。</p>
<h3 id="dhcp功能">DHCP功能</h3>
<p>DHCP具有以下功能：</p>
<ol>
<li>保证任何IP地址在同一时刻只能由一台DHCP客户机所使用。</li>
<li>DHCP应当可以给用户分配永久固定的IP地址。</li>
<li>DHCP应当可以同用其他方法获得IP地址的主机共存（如手工配置IP地址的主机）。</li>
<li>DHCP服务器应当向现有的BOOTP客户端提供服务。</li>
</ol>
<h3 id="地址分配方法">地址分配方法</h3>
<p>DHCP有三种机制分配IP地址：</p>
<ol>
<li>自动分配方式（Automatic Allocation），DHCP服务器为主机指定一个永久性的IP地址，一旦DHCP客户端第一次成功从DHCP服务器端租用到IP地址后，就可以永久性的使用该地址。</li>
<li>动态分配方式（Dynamic Allocation），DHCP服务器给主机指定一个具有时间限制的IP地址，时间到期或主机明确表示放弃该地址时，该地址可以被其他主机使用。</li>
<li>手工分配方式（Manual Allocation），客户端的IP地址是由网络管理员指定的，DHCP服务器只是将指定的IP地址告诉客户端主机。<br>
三种地址分配方式中，只有动态分配可以重复使用客户端不再需要的地址。</li>
</ol>
<h2 id="ftp">FTP</h2>
<h3 id="ftp简介">FTP简介</h3>
<p>文件传输协议（File Transfer Protocol，FTP）是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 <strong>TCP 传输而不是 UDP</strong>， 客户在和服务器建立连接前要经过一个“三次握手”的过程，保证客户与服务器之间的连接是可靠的，而且是面向连接，为数据传输提供可靠保证。<br>
FTP允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信。然而，用户并不真正登录到自己想要存取的计算机上面而成为完全用户，可用FTP程序访问远程资源，实现用户往返传输文件、目录管理以及访问电子邮件等等，即使双方计算机可能配有不同的操作系统和文件存储方式。</p>
<h3 id="传输方式">传输方式</h3>
<p>FTP的传输有两种方式：ASCII、二进制。</p>
<h4 id="ascii传输方式">ASCII传输方式</h4>
<p>假定用户正在拷贝的文件包含的简单ASCII码文本，如果在远程机器上运行的不是UNIX，当文件传输时ftp通常会自动地调整文件的内容以便于把文件解释成另外那台计算机存储文本文件的格式。但是常常有这样的情况，用户正在传输的文件包含的不是文本文件，它们可能是程序，数据库，字处理文件或者压缩文件。在拷贝任何非文本文件之前，用binary 命令告诉ftp逐字拷贝。</p>
<h4 id="二进制传输模式">二进制传输模式</h4>
<p>在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。即使目的地机器上包含位序列的文件是没意义的。例如，macintosh以二进制方式传送可执行文件到Windows系统，在对方系统上，此文件不能执行。如在ASCII方式下传输二进制文件，即使不需要也仍会转译。这会损坏数据。（ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。如果传输二进制文件，所有的位都是重要的。）</p>
<h3 id="ftp支持两种模式">FTP支持两种模式</h3>
<p>FTP客户端发起FTP会话，与FTP服务器建立相应的连接。FTP会话期间要建立控制信息进程与数据进程两个连接。控制连接不能完成传输数据的任务，只能用来传送FTP执行的内部命令以及命令的响应等控制信息；数据连接是服务器与客户端之间传输文件的连接，是全双工的，允许同时进行双向数据传输。当数据传输完成后，数据连接会撤消，再回到FTP会话状态，直到控制连接被撤消，并退出会话为止。<br>
FTP支持两种模式：Standard（PORT方式，主动方式），Passive（PASV，被动方式）。</p>
<h4 id="port模式-主动模式">Port模式（主动模式）</h4>
<p>FTP 客户端首先和服务器的TCP 21端口建立连接，用来发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过自己的TCP 20端口连接至客户端的指定端口发送数据。FTP server必须和客户端建立一个新的连接用来传送数据。</p>
<h4 id="passive模式-被动模式">Passive模式（被动模式）</h4>
<p>建立控制通道和Standard模式类似，但建立连接后发送Pasv命令。服务器收到Pasv命令后，打开一个临时端口（端口号大于1023小于65535）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，然后FTP服务器将通过这个端口传送数据。</p>
<h4 id="注意">注意</h4>
<p>很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</p>
<h2 id="http">HTTP</h2>
<p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。请求和响应消息的头以ASCII形式给出。</p>
<h3 id="应用场景">应用场景</h3>
<p>HTTP诞生之初主要是应用于WEB端内容获取，那时候内容还不像现在这样丰富，排版也没那么精美，用户交互的场景几乎没有。对于这种简单的获取网页内容的场景，HTTP表现得还算不错。但随着互联网的发展和WEB2.0的诞生，更多的内容开始被展示（更多的图片文件），排版变得更精美（更多的CSS），更复杂的交互也被引入（更多的JS）。用户打开一个网站首页所加载的数据总量和请求的个数也在不断增加。</p>
<h3 id="报文格式">报文格式</h3>
<p>HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。</p>
<h4 id="请求报文">请求报文</h4>
<p>请求报文格式如下：</p>
<p>请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体</p>
<p>请求行以方法字段开始，后面分别是URL字段和HTTP协议版本字段，并以CRLF结尾。SP是分隔符。除了在最后的CRLF序列中CF和LF是必需的之外，其他都可以不要。有关通用信息头，请求头和实体头方面的具体内容可以参照相关文件。</p>
<h4 id="应答报文">应答报文</h4>
<p>应答报文格式如下：</p>
<p>状态行 － 通用信息头 － 响应头 － 实体头 － 报文主体</p>
<p>状态码元由3位数字组成，表示请求是否被理解或被满足。原因分析是对原文的状态码作简短的描述，状态码用来支持自动操作，而原因分析用来供用户使用。客户机无需用来检查或显示语法。有关通用信息头，响应头和实体头方面的具体内容可以参照相关文件。</p>
<p><strong><a href="https://blog.csdn.net/m0_45861545/article/details/120835738">HTTP报文详解点击此处</a></strong></p>
<h3 id="状态码">状态码</h3>
<p>服务器接收HTTP请求后，会向客户端发送响应信息，放置第一行。其中最重要的<br>
就是状态码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>
<h4 id="状态码类型-第1位数字">状态码类型—第1位数字</h4>
<ul>
<li>1**：请求被成功接收，继续处理；范围100~101</li>
<li>2**：服务器成功处理请求；范围200~206</li>
<li>3**：访问资源被移动，告知客服端重新发送新请求；范围300~305</li>
<li>4**：客户端错误，服务器无法处理请求，如访问资源不存在；范围400~415</li>
<li>5**：服务器错误；范围500~505</li>
</ul>
<h4 id="常见http状态码">常见HTTP状态码</h4>
<ul>
<li>200：客户端请求成功（常见）</li>
<li>302：重定向</li>
<li>404：请求资源不存在（常见）</li>
<li>400：客户端请求语法错误，不能被服务器所理解</li>
<li>401：访问未被授权</li>
<li>403：服务器收到请求，但拒绝服务</li>
<li>500：服务器内部错误（常见）</li>
<li>503：服务器当前不能处理，一段时间后可能可以</li>
</ul>
<p>具体细节参看《<strong>图解HTTP</strong>》</p>
<h1 id="通信">通信</h1>
<h2 id="内网通信-局域网">内网通信（局域网）</h2>
<h3 id="以太网-ethernet">以太网（ethernet）</h3>
<p>以太网是一种计算机<strong>局域网</strong>技术。</p>
<h3 id="内网通信过程">内网通信过程</h3>
<p>这里所说的内网，一般来说是指局域网（LAN）。我们说两个终端 在同一个内网中，其本质是指两个终端的网络号是相同的。如果两个终端在同一个 内网中，那么其通信方式如下</p>
<p><img src="https://pic3.zhimg.com/80/v2-28645c18e711eac7b6a3262f94556ecc_1440w.png" alt="image"></p>
<h3 id="arp简介">ARP简介</h3>
<h4 id="arp协议">ARP协议</h4>
<p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求<strong>广播(broadcast)</strong> 到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询<strong>ARP缓存</strong>以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。相关协议有RARP、代理ARP。NDP用于在IPv6中代替地址解析协议。</p>
<h4 id="arp欺骗">ARP欺骗</h4>
<p>ARP欺骗（ARP spoofing），又称ARP毒化（ARP poisoning，网络上多译为ARP病毒）或ARP攻击，是针对以太网地址解析协议（ARP）的一种攻击技术，通过欺骗局域网内访问者PC的网关MAC地址，使访问者PC错以为攻击者更改后的MAC地址是网关的MAC，导致网络不通。此种攻击可让攻击者获取局域网上的数据包甚至可篡改数据包，且可让网络上特定计算机或所有计算机无法正常连线。</p>
<h4 id="free-arp">free ARP</h4>
<ol>
<li>看有无地址冲突</li>
<li>更新自己的ARP缓存</li>
</ol>
<h2 id="因特网-internet-通信过程">因特网（Internet）通信过程</h2>
<p>如果主机在 Internet 上，则目标地址与源地址不在同一个内网中，也就是说他们的 IP 地址的网络号部分并不一致，此时需要将数据包发送到“默认网关”上进行路由选择，具体的通信过程如下：</p>
<p><img src="https://pic4.zhimg.com/80/v2-5188517210eac6afb96e4046cbbe65c6_1440w.png" alt="image"></p>
]]></content>
      <categories>
        <category>CS学习笔记</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>认清差距，努力追赶</title>
    <url>/2022/05/22/%E8%AE%A4%E6%B8%85%E5%B7%AE%E8%B7%9D%EF%BC%8C%E5%8A%AA%E5%8A%9B%E8%BF%BD%E8%B5%B6/</url>
    <content><![CDATA[<h2 id="对于今天学院csp选拔赛的感受">对于今天学院csp选拔赛的感受</h2>
<p>我对于今天的几道编程题颇有感触，跟我之前做过的完全是不同的感觉，我以为的程序是能够运行成功，但是真正的题目数据是非常大的，且有严格的时间限制，所以必须要考虑到算法的效率。</p>
<span id="more"></span>
<p>也终于明白了一味的暴力求解是很呆的方式，完全想不到效率更高的算法， 这也与我并没有接触过相关题目有关系，这个暑假提高自己的代码能力迫在眉睫，数据结构这门课需要好好吃透，然后往算法方面去提高自己的能力。</p>
<h2 id="正视自己-摆平心态">正视自己，摆平心态</h2>
<p>对于在校的学习生活压力是很大的，今天的选拔赛让我看到了许多同龄人的身影，他们的代码能力又有的甚至能够和大二的匹敌，让我知道自己其实是非常的不足，当然也不应该自暴自弃，只能说去努力的赶超吧。</p>
<p>勇于直面前方的艰难险阻，才能到达成功的彼岸！</p>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>个人反思</tag>
      </tags>
  </entry>
  <entry>
    <title>随想_2022_12_10</title>
    <url>/2022/12/10/%E9%9A%8F%E6%83%B3-2022-12-10/</url>
    <content><![CDATA[<h1 id="本学期的收获和反思">本学期的收获和反思</h1>
<p>这个学期给我的感觉就是特别的忙碌，我感觉自己完全没有任何的时间去干别的事情。仿佛我的忙碌也没有给我带来任何特别的能够令我欣喜的收获，令我感到记忆犹新的还是第一次穿上西装，站上讲台进行奖学金答辩的那一刻，见识到了许多同龄人的优秀和感受到竞争时激烈刺激的紧张感，最终虽然非常的遗憾没有拿到国奖，但是我认为个人的价值也并不能被这些成就决定，最重要的是我在这个过程中所体会到的，收获到的才是最为弥足珍贵的。这学期就这么潦草的结束了，剩下的课程复习任务也都留到了下一个学期，经历了这么多天的摆烂，我想给也应该将自己的生活回归正轨了，好好安排自己的学习任务才是最重要的。</p>
<h1 id="任务安排">任务安排</h1>
<ol>
<li>对于py的学习，可以配合着蛇书上的项目来复习py的基本语法，然后是py的几个常用的module，numpy等等，还想尝试一下清华暑培中的django框架，很想把py练好作为一个实用的工具。</li>
<li>算法方面，希望自己能够跟着labuladong的一些文章，保持每天两到三个题目，动规和一些基本的算法，还有紫皮书，我的目标就是csp的认证，同时希望自己在这个过程中享受到ac的乐趣。</li>
<li>英语方面的学习，主要是托福单词的记背和六级考试的准备，也可以多浏览一些国外的网站，能够提升自己的阅读水平。</li>
<li>跟着非爷，进行留言板小程序的学习制作。</li>
<li>还有一个支线任务就是辅导自己的弟弟进行高考的备考，我想我有信心去给他一些帮助，最后也希望他能够考到一个不错的分数，一起努力度过这个寒假。</li>
</ol>
]]></content>
      <categories>
        <category>心路</category>
      </categories>
      <tags>
        <tag>个人反思</tag>
      </tags>
  </entry>
</search>
